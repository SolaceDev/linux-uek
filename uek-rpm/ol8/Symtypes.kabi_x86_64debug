E#AUDIT_NTP_NVALS 6
E#BLKG_RWSTAT_NR 5
E#CGROUP_SUBSYS_COUNT 13
E#CPUHP_AP_ONLINE_DYN ( E#CPUHP_BP_PREPARE_DYN + 20 ) + 87
E#CPUHP_BP_PREPARE_DYN ( 0 ) + 64
E#CPU_MAX_IDLE_TYPES 3
E#DEVICE_COUNT_RESOURCE E#PCI_NUM_RESOURCES
E#FLOW_DISSECTOR_KEY_MAX 27
E#GRE_CT_MAX 2
E#HCTX_MAX_TYPES 3
E#HRTIMER_MAX_CLOCK_BASES 8
E#HRTIMER_MODE_ABS 0x00
E#HRTIMER_MODE_ABS_PINNED E#HRTIMER_MODE_ABS | E#HRTIMER_MODE_PINNED
E#HRTIMER_MODE_HARD 0x08
E#HRTIMER_MODE_PINNED 0x02
E#HRTIMER_MODE_REL 0x01
E#HRTIMER_MODE_REL_PINNED E#HRTIMER_MODE_REL | E#HRTIMER_MODE_PINNED
E#HRTIMER_MODE_SOFT 0x04
E#INPUT_CLK_MAX ( 0 ) + 3
E#IP_CT_DIR_MAX 2
E#IP_CT_ESTABLISHED 0
E#IP_CT_IS_REPLY 3
E#IP_CT_RELATED 1
E#MAX_ZONELISTS 2
E#MEMCG_NR_MEMORY_EVENTS 7
E#MEMCG_NR_STAT ( E#NR_VM_NODE_STAT_ITEMS ) + 6
E#MEM_CGROUP_NTARGETS 3
E#MIGRATE_PCPTYPES 3
E#MIGRATE_TYPES ( E#MIGRATE_PCPTYPES ) + 3
E#ND_OPT_TARGET_LL_ADDR 2
E#NEIGH_VAR_LOCKTIME 12
E#NFPROTO_NUMPROTO ( 12 ) + 1
E#NF_CT_EXT_NUM 9
E#NF_INET_NUMHOOKS 5
E#NL80211_EXT_FEATURE_ACK_SIGNAL_SUPPORT 27
E#NR_KMALLOC_TYPES ( 0 ) + 3
E#NR_LRU_BASE 0
E#NR_LRU_LISTS ( 0 + 2 + 1 ) + 2
E#NR_MM_COUNTERS 4
E#NR_NODE_STATES ( E#N_NORMAL_MEMORY ) + 3
E#NR_PSI_AGGREGATORS ( 0 ) + 2
E#NR_PSI_STATES 6
E#NR_PSI_TASK_COUNTS 3
E#NR_SLUB_STAT_ITEMS 26
E#NR_STAT_GROUPS 3
E#NR_VM_EVENT_ITEMS 85
E#NR_VM_NODE_STAT_ITEMS ( E#NR_LRU_BASE ) + 33
E#NR_VM_NUMA_STAT_ITEMS 6
E#NR_VM_ZONE_STAT_ITEMS ( E#NR_ZONE_LRU_BASE ) + 12
E#NR_WB_STAT_ITEMS 4
E#NR_WMARK 3
E#NR_ZONE_LRU_BASE 1
E#NUM_NL80211_BANDS 4
E#NUM_NL80211_EXT_FEATURES ( E#NL80211_EXT_FEATURE_ACK_SIGNAL_SUPPORT ) + 12
E#NUM_NL80211_IFTYPES 13
E#N_NORMAL_MEMORY 2
E#PCI_BRIDGE_RESOURCES ( E#PCI_IOV_RESOURCES + 6 - 1 ) + 1
E#PCI_IOV_RESOURCES ( 5 ) + 2
E#PCI_NUM_RESOURCES ( E#PCI_BRIDGE_RESOURCES + 4 - 1 ) + 1
E#PIDTYPE_MAX 4
E#RPC_DISPLAY_MAX ( 0 ) + 6
E#RX_MAX 4
E#SAS_LINK_RATE_1_5_GBPS 8
E#SAS_LINK_RATE_3_0_GBPS 9
E#SAS_PROTOCOL_SATA 0x01
E#SAS_PROTOCOL_STP 0x04
E#SB_FREEZE_COMPLETE 4
E#SCTP_CONNTRACK_MAX 10
E#SDEV_EVT_LAST E#SDEV_EVT_POWER_ON_RESET_OCCURRED
E#SDEV_EVT_MAXBITS E#SDEV_EVT_LAST + 1
E#SDEV_EVT_POWER_ON_RESET_OCCURRED ( 1 ) + 7
E#SKB_EXT_NUM 2
E#TCP_CONNTRACK_TIMEOUT_MAX 14
E#UCOUNT_COUNTS 9
E#UDP_CT_MAX 2
E#VLAN_PROTO_NUM ( 0 ) + 2
E#WLAN_KEY_LEN_WEP104 13
E#XFRM_POLICY_MAX 3
E#__BPF_CGROUP_STORAGE_MAX 2
E#__CT_DCCP_MAX 10
E#__ETHTOOL_LINK_MODE_MASK_NBITS ( 68 ) + 1
E#__GARP_APPLICATION_MAX 1
E#__ICMP6_MIB_MAX ( 0 ) + 6
E#__ICMP_MIB_MAX ( 0 ) + 28
E#__IPSTATS_MIB_MAX ( 0 ) + 37
E#__IPV4_DEVCONF_MAX ( 1 ) + 32
E#__LINUX_MIB_MAX ( 0 ) + 120
E#__LINUX_MIB_XFRMMAX ( 0 ) + 29
E#__MAX_BPF_ATTACH_TYPE 23
E#__MRP_APPLICATION_MAX 1
E#__ND_OPT_ARRAY_MAX ( 14 ) + 1
E#__NFSIOS_BYTESMAX ( 0 ) + 8
E#__NFSIOS_COUNTSMAX ( 0 ) + 27
E#__NFSIOS_FSCACHEMAX 5
E#__NL80211_AUTHTYPE_NUM 8
E#__NL80211_BSS_SELECT_ATTR_AFTER_LAST 4
E#__NL802154_CCA_ATTR_AFTER_LAST 7
E#__NL802154_CCA_OPT_ATTR_AFTER_LAST 2
E#__NL802154_SUPPORTED_BOOL_AFTER_LAST 4
E#__RTAX_MAX 18
E#__SCTP_MIB_MAX ( 0 ) + 34
E#__TCP_MIB_MAX ( 0 ) + 16
E#__UDP_MIB_MAX ( 0 ) + 9
E#perf_nr_task_contexts ( 0 ) + 2
PDE_DATA extern void * PDE_DATA ( const s#inode * )
__alloc_disk_node extern s#gendisk * __alloc_disk_node ( int , int )
__alloc_pages_nodemask s#page * __alloc_pages_nodemask ( t#gfp_t , unsigned int , int , t#nodemask_t * )
__alloc_skb s#sk_buff * __alloc_skb ( unsigned int , t#gfp_t , int , int )
__bitmap_and extern int __bitmap_and ( unsigned long * , const unsigned long * , const unsigned long * , unsigned int )
__bitmap_equal extern int __bitmap_equal ( const unsigned long * , const unsigned long * , unsigned int )
__bitmap_intersects extern int __bitmap_intersects ( const unsigned long * , const unsigned long * , unsigned int )
__bitmap_weight extern int __bitmap_weight ( const unsigned long * , unsigned int )
__bread_gfp s#buffer_head * __bread_gfp ( s#block_device * , t#sector_t , unsigned , t#gfp_t )
__break_lease extern int __break_lease ( s#inode * , unsigned int , unsigned int )
__brelse void __brelse ( s#buffer_head * )
__check_object_size extern void __check_object_size ( const void * , unsigned long , t#bool )
__close_fd extern int __close_fd ( s#files_struct * , unsigned int )
__const_udelay extern void __const_udelay ( unsigned long )
__cpu_active_mask extern s#cpumask __cpu_active_mask
__cpu_online_mask extern s#cpumask __cpu_online_mask
__cpu_possible_mask extern s#cpumask __cpu_possible_mask
__cpu_present_mask extern s#cpumask __cpu_present_mask
__cpuhp_remove_state void __cpuhp_remove_state ( e#cpuhp_state , t#bool )
__cpuhp_setup_state int __cpuhp_setup_state ( e#cpuhp_state , const char * , t#bool , int ( * ) ( unsigned int ) , int ( * ) ( unsigned int ) , t#bool )
__default_kernel_pte_mask extern t#pteval_t __default_kernel_pte_mask
__dev_kfree_skb_any void __dev_kfree_skb_any ( s#sk_buff * , e#skb_free_reason )
__fdget extern unsigned long __fdget ( unsigned int )
__fentry__ extern void __fentry__ ( void )
__free_pages extern void __free_pages ( s#page * , unsigned int )
__generic_file_fsync extern int __generic_file_fsync ( s#file * , t#loff_t , t#loff_t , int )
__generic_file_write_iter extern t#ssize_t __generic_file_write_iter ( s#kiocb * , s#iov_iter * )
__get_free_pages extern unsigned long __get_free_pages ( t#gfp_t , unsigned int )
__get_user_2 extern int __get_user_2 ( void )
__get_user_8 extern int __get_user_8 ( void )
__get_vm_area extern s#vm_struct * __get_vm_area ( unsigned long , unsigned long , unsigned long , unsigned long )
__init_rwsem extern void __init_rwsem ( s#rw_semaphore * , const char * , s#lock_class_key * )
__init_waitqueue_head extern void __init_waitqueue_head ( s#wait_queue_head * , const char * , s#lock_class_key * )
__insert_inode_hash extern void __insert_inode_hash ( s#inode * , unsigned long )
__ipv6_addr_type int __ipv6_addr_type ( const s#in6_addr * )
__kmalloc void * __kmalloc ( t#size_t , t#gfp_t )
__kmalloc_node void * __kmalloc_node ( t#size_t , t#gfp_t , int )
__list_add_valid extern t#bool __list_add_valid ( s#list_head * , s#list_head * , s#list_head * )
__list_del_entry_valid extern t#bool __list_del_entry_valid ( s#list_head * )
__local_bh_enable_ip extern void __local_bh_enable_ip ( unsigned long , unsigned int )
__lock_page extern void __lock_page ( s#page * )
__mark_inode_dirty extern void __mark_inode_dirty ( s#inode * , int )
__mmdrop extern void __mmdrop ( s#mm_struct * )
__mmu_notifier_register extern int __mmu_notifier_register ( s#mmu_notifier * , s#mm_struct * )
__module_get extern void __module_get ( s#module * )
__msecs_to_jiffies extern unsigned long __msecs_to_jiffies ( const unsigned int )
__mutex_init extern void __mutex_init ( s#mutex * , const char * , s#lock_class_key * )
__napi_schedule void __napi_schedule ( s#napi_struct * )
__napi_schedule_irqoff void __napi_schedule_irqoff ( s#napi_struct * )
__netdev_alloc_skb s#sk_buff * __netdev_alloc_skb ( s#net_device * , unsigned int , t#gfp_t )
__netlink_kernel_create s#sock * __netlink_kernel_create ( s#net * , int , s#module * , s#netlink_kernel_cfg * )
__nlmsg_put s#nlmsghdr * __nlmsg_put ( s#sk_buff * , t#u32 , t#u32 , int , int , int )
__node_distance extern int __node_distance ( int , int )
__num_online_cpus extern t#atomic_t __num_online_cpus
__page_mapcount int __page_mapcount ( s#page * )
__pagevec_lru_add void __pagevec_lru_add ( s#pagevec * )
__pagevec_release void __pagevec_release ( s#pagevec * )
__pci_register_driver int __attribute__ ( ( __warn_unused_result__ ) ) __pci_register_driver ( s#pci_driver * , s#module * , const char * )
__per_cpu_offset extern unsigned long __per_cpu_offset [ 8192 ]
__platform_driver_register extern int __platform_driver_register ( s#platform_driver * , s#module * )
__preempt_count extern __attribute__ ( ( section ( ".data..percpu" "" ) ) ) __typeof__ ( int ) __preempt_count
__pskb_pull_tail void * __pskb_pull_tail ( s#sk_buff * , int )
__put_cred extern void __put_cred ( s#cred * )
__put_devmap_managed_page void __put_devmap_managed_page ( s#page * )
__put_page void __put_page ( s#page * )
__put_user_2 extern void __put_user_2 ( void )
__put_user_4 extern void __put_user_4 ( void )
__put_user_8 extern void __put_user_8 ( void )
__register_binfmt extern void __register_binfmt ( s#linux_binfmt * , int )
__register_chrdev extern int __register_chrdev ( unsigned int , unsigned int , unsigned int , const char * , const s#file_operations * )
__release_region extern void __release_region ( s#resource * , t#resource_size_t , t#resource_size_t )
__remove_inode_hash extern void __remove_inode_hash ( s#inode * )
__request_module extern __attribute__ ( ( __format__ ( printf , 2 , 3 ) ) ) int __request_module ( t#bool , const char * , ... )
__request_region extern s#resource * __request_region ( s#resource * , t#resource_size_t , t#resource_size_t , const char * , int )
__root_device_register extern s#device * __root_device_register ( const char * , s#module * )
__set_page_dirty_buffers extern int __set_page_dirty_buffers ( s#page * )
__set_page_dirty_nobuffers int __set_page_dirty_nobuffers ( s#page * )
__skb_flow_dissect t#bool __skb_flow_dissect ( const s#net * , const s#sk_buff * , s#flow_dissector * , void * , void * , t#__be16 , int , int , unsigned int )
__skb_gso_segment s#sk_buff * __skb_gso_segment ( s#sk_buff * , t#netdev_features_t , t#bool )
__stack_chk_fail __attribute__ ( ( __externally_visible__ ) ) void __stack_chk_fail ( void )
__sw_hweight32 extern unsigned int __sw_hweight32 ( unsigned int )
__sw_hweight64 extern unsigned long __sw_hweight64 ( t#__u64 )
__tasklet_hi_schedule extern void __tasklet_hi_schedule ( s#tasklet_struct * )
__test_set_page_writeback int __test_set_page_writeback ( s#page * , t#bool )
__unregister_chrdev extern void __unregister_chrdev ( unsigned int , unsigned int , unsigned int , const char * )
__uv_cpu_info extern __attribute__ ( ( section ( ".data..percpu" "" ) ) ) __typeof__ ( s#uv_cpu_info_s ) __uv_cpu_info
__uv_hub_info_list extern void * * __uv_hub_info_list
__uv_uek_dummy void __uv_uek_dummy ( s#uv_hub_info_s * )
__vfs_getxattr t#ssize_t __vfs_getxattr ( s#dentry * , s#inode * , const char * , void * , t#size_t )
__vfs_removexattr int __vfs_removexattr ( s#dentry * , const char * )
__virt_addr_valid extern t#bool __virt_addr_valid ( unsigned long )
__vmalloc extern void * __vmalloc ( unsigned long , t#gfp_t , t#pgprot_t )
__wake_up void __wake_up ( s#wait_queue_head * , unsigned int , int , void * )
__warn_printk extern __attribute__ ( ( __format__ ( printf , 1 , 2 ) ) ) void __warn_printk ( const char * , ... )
__x86_indirect_thunk_r10 extern void __x86_indirect_thunk_r10 ( void )
__x86_indirect_thunk_r11 extern void __x86_indirect_thunk_r11 ( void )
__x86_indirect_thunk_r12 extern void __x86_indirect_thunk_r12 ( void )
__x86_indirect_thunk_r13 extern void __x86_indirect_thunk_r13 ( void )
__x86_indirect_thunk_r14 extern void __x86_indirect_thunk_r14 ( void )
__x86_indirect_thunk_r15 extern void __x86_indirect_thunk_r15 ( void )
__x86_indirect_thunk_r8 extern void __x86_indirect_thunk_r8 ( void )
__x86_indirect_thunk_r9 extern void __x86_indirect_thunk_r9 ( void )
__x86_indirect_thunk_rax extern void __x86_indirect_thunk_rax ( void )
__x86_indirect_thunk_rbx extern void __x86_indirect_thunk_rbx ( void )
__x86_indirect_thunk_rcx extern void __x86_indirect_thunk_rcx ( void )
__x86_indirect_thunk_rdi extern void __x86_indirect_thunk_rdi ( void )
__x86_indirect_thunk_rdx extern void __x86_indirect_thunk_rdx ( void )
__x86_indirect_thunk_rsi extern void __x86_indirect_thunk_rsi ( void )
_bin2bcd unsigned char _bin2bcd ( unsigned )
_cond_resched extern int _cond_resched ( void )
_copy_from_iter t#size_t _copy_from_iter ( void * , t#size_t , s#iov_iter * )
_copy_from_user extern __attribute__ ( ( __warn_unused_result__ ) ) unsigned long _copy_from_user ( void * , const void * , unsigned long )
_copy_to_iter t#size_t _copy_to_iter ( const void * , t#size_t , s#iov_iter * )
_copy_to_user extern __attribute__ ( ( __warn_unused_result__ ) ) unsigned long _copy_to_user ( void * , const void * , unsigned long )
_ctype extern const unsigned char _ctype [ ]
_dev_err __attribute__ ( ( __format__ ( printf , 2 , 3 ) ) ) __attribute__ ( ( __cold__ ) ) void _dev_err ( const s#device * , const char * , ... )
_dev_info __attribute__ ( ( __format__ ( printf , 2 , 3 ) ) ) __attribute__ ( ( __cold__ ) ) void _dev_info ( const s#device * , const char * , ... )
_dev_warn __attribute__ ( ( __format__ ( printf , 2 , 3 ) ) ) __attribute__ ( ( __cold__ ) ) void _dev_warn ( const s#device * , const char * , ... )
_raw_read_lock void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_read_lock ( t#rwlock_t * )
_raw_read_lock_bh void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_read_lock_bh ( t#rwlock_t * )
_raw_read_lock_irqsave unsigned long __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_read_lock_irqsave ( t#rwlock_t * )
_raw_read_unlock_bh void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_read_unlock_bh ( t#rwlock_t * )
_raw_read_unlock_irqrestore void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_read_unlock_irqrestore ( t#rwlock_t * , unsigned long )
_raw_spin_lock void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_lock ( t#raw_spinlock_t * )
_raw_spin_lock_bh void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_lock_bh ( t#raw_spinlock_t * )
_raw_spin_lock_irq void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_lock_irq ( t#raw_spinlock_t * )
_raw_spin_lock_irqsave unsigned long __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_lock_irqsave ( t#raw_spinlock_t * )
_raw_spin_trylock int __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_trylock ( t#raw_spinlock_t * )
_raw_spin_unlock_bh void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_unlock_bh ( t#raw_spinlock_t * )
_raw_spin_unlock_irqrestore void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_unlock_irqrestore ( t#raw_spinlock_t * , unsigned long )
_raw_write_lock void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_write_lock ( t#rwlock_t * )
_raw_write_lock_bh void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_write_lock_bh ( t#rwlock_t * )
_raw_write_lock_irqsave unsigned long __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_write_lock_irqsave ( t#rwlock_t * )
_raw_write_unlock_bh void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_write_unlock_bh ( t#rwlock_t * )
_raw_write_unlock_irqrestore void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_write_unlock_irqrestore ( t#rwlock_t * , unsigned long )
_totalram_pages extern t#atomic_long_t _totalram_pages
acpi_gbl_FADT extern s#acpi_table_fadt acpi_gbl_FADT
acpi_os_map_memory void * acpi_os_map_memory ( t#acpi_physical_address , t#acpi_size )
acpi_os_unmap_memory void acpi_os_unmap_memory ( void * , t#acpi_size )
add_timer extern void add_timer ( s#timer_list * )
add_to_page_cache_locked int add_to_page_cache_locked ( s#page * , s#address_space * , unsigned long , t#gfp_t )
add_wait_queue extern void add_wait_queue ( s#wait_queue_head * , s#wait_queue_entry * )
address_space_init_once extern void address_space_init_once ( s#address_space * )
alloc_chrdev_region extern int alloc_chrdev_region ( t#dev_t * , unsigned , unsigned , const char * )
alloc_cpu_rmap extern s#cpu_rmap * alloc_cpu_rmap ( unsigned int , t#gfp_t )
alloc_etherdev_mqs s#net_device * alloc_etherdev_mqs ( int , unsigned int , unsigned int )
alloc_file_pseudo extern s#file * alloc_file_pseudo ( s#inode * , s#vfsmount * , const char * , int , const s#file_operations * )
alloc_netdev_mqs s#net_device * alloc_netdev_mqs ( int , const char * , unsigned char , void ( * ) ( s#net_device * ) , unsigned int , unsigned int )
alloc_pages_current extern s#page * alloc_pages_current ( t#gfp_t , unsigned )
alloc_workqueue s#workqueue_struct * alloc_workqueue ( const char * , unsigned int , int , ... )
arch_phys_wc_add extern int __attribute__ ( ( __warn_unused_result__ ) ) arch_phys_wc_add ( unsigned long , unsigned long )
arch_phys_wc_del extern void arch_phys_wc_del ( int )
autoremove_wake_function int autoremove_wake_function ( s#wait_queue_entry * , unsigned , int , void * )
bd_set_size extern void bd_set_size ( s#block_device * , t#loff_t )
bdevname extern const char * bdevname ( s#block_device * , char * )
bdget extern s#block_device * bdget ( t#dev_t )
bdget_disk extern s#block_device * bdget_disk ( s#gendisk * , int )
bdput extern void bdput ( s#block_device * )
bio_add_page extern int bio_add_page ( s#bio * , s#page * , unsigned int , unsigned int )
bio_alloc_bioset extern s#bio * bio_alloc_bioset ( t#gfp_t , unsigned int , s#bio_set * )
bio_endio extern void bio_endio ( s#bio * )
bio_free_pages extern void bio_free_pages ( s#bio * )
bio_init extern void bio_init ( s#bio * , s#bio_vec * , unsigned short )
bio_integrity_add_page extern int bio_integrity_add_page ( s#bio * , s#page * , unsigned int , unsigned int )
bio_integrity_alloc extern s#bio_integrity_payload * bio_integrity_alloc ( s#bio * , t#gfp_t , unsigned int )
bio_put extern void bio_put ( s#bio * )
bitmap_find_next_zero_area_off extern unsigned long bitmap_find_next_zero_area_off ( unsigned long * , unsigned long , unsigned long , unsigned int , unsigned long , unsigned long )
blk_alloc_queue s#request_queue * blk_alloc_queue ( t#gfp_t )
blk_cleanup_queue extern void blk_cleanup_queue ( s#request_queue * )
blk_execute_rq extern void blk_execute_rq ( s#request_queue * , s#gendisk * , s#request * , int )
blk_finish_plug extern void blk_finish_plug ( s#blk_plug * )
blk_get_request extern s#request * blk_get_request ( s#request_queue * , unsigned int , t#blk_mq_req_flags_t )
blk_integrity_compare extern int blk_integrity_compare ( s#gendisk * , s#gendisk * )
blk_mq_alloc_request s#request * blk_mq_alloc_request ( s#request_queue * , unsigned int , t#blk_mq_req_flags_t )
blk_mq_alloc_tag_set int blk_mq_alloc_tag_set ( s#blk_mq_tag_set * )
blk_mq_complete_request t#bool blk_mq_complete_request ( s#request * )
blk_mq_end_request void blk_mq_end_request ( s#request * , t#blk_status_t )
blk_mq_free_tag_set void blk_mq_free_tag_set ( s#blk_mq_tag_set * )
blk_mq_init_queue s#request_queue * blk_mq_init_queue ( s#blk_mq_tag_set * )
blk_mq_kick_requeue_list void blk_mq_kick_requeue_list ( s#request_queue * )
blk_mq_run_hw_queues void blk_mq_run_hw_queues ( s#request_queue * , t#bool )
blk_mq_start_request void blk_mq_start_request ( s#request * )
blk_mq_start_stopped_hw_queues void blk_mq_start_stopped_hw_queues ( s#request_queue * , t#bool )
blk_mq_stop_hw_queues void blk_mq_stop_hw_queues ( s#request_queue * )
blk_mq_tag_to_rq s#request * blk_mq_tag_to_rq ( s#blk_mq_tags * , unsigned int )
blk_mq_unique_tag t#u32 blk_mq_unique_tag ( s#request * )
blk_put_request extern void blk_put_request ( s#request * )
blk_queue_bounce_limit extern void blk_queue_bounce_limit ( s#request_queue * , t#u64 )
blk_queue_flag_clear void blk_queue_flag_clear ( unsigned int , s#request_queue * )
blk_queue_flag_set void blk_queue_flag_set ( unsigned int , s#request_queue * )
blk_queue_io_min extern void blk_queue_io_min ( s#request_queue * , unsigned int )
blk_queue_io_opt extern void blk_queue_io_opt ( s#request_queue * , unsigned int )
blk_queue_logical_block_size extern void blk_queue_logical_block_size ( s#request_queue * , unsigned int )
blk_queue_make_request extern void blk_queue_make_request ( s#request_queue * , t#make_request_fn * )
blk_queue_max_discard_sectors extern void blk_queue_max_discard_sectors ( s#request_queue * , unsigned int )
blk_queue_max_hw_sectors extern void blk_queue_max_hw_sectors ( s#request_queue * , unsigned int )
blk_queue_max_segments extern void blk_queue_max_segments ( s#request_queue * , unsigned short )
blk_queue_physical_block_size extern void blk_queue_physical_block_size ( s#request_queue * , unsigned int )
blk_queue_segment_boundary extern void blk_queue_segment_boundary ( s#request_queue * , unsigned long )
blk_queue_stack_limits extern void blk_queue_stack_limits ( s#request_queue * , s#request_queue * )
blk_rq_map_kern extern int blk_rq_map_kern ( s#request_queue * , s#request * , void * , unsigned int , t#gfp_t )
blk_set_default_limits extern void blk_set_default_limits ( s#queue_limits * )
blk_stack_limits extern int blk_stack_limits ( s#queue_limits * , s#queue_limits * , t#sector_t )
blk_start_plug extern void blk_start_plug ( s#blk_plug * )
blkdev_get extern int blkdev_get ( s#block_device * , t#fmode_t , void * )
blkdev_get_by_dev extern s#block_device * blkdev_get_by_dev ( t#dev_t , t#fmode_t , void * )
blkdev_get_by_path extern s#block_device * blkdev_get_by_path ( const char * , t#fmode_t , void * )
blkdev_issue_discard extern int blkdev_issue_discard ( s#block_device * , t#sector_t , t#sector_t , t#gfp_t , unsigned long )
blkdev_put extern void blkdev_put ( s#block_device * , t#fmode_t )
boot_cpu_data extern s#cpuinfo_x86 boot_cpu_data
bpf_trace_run1 void bpf_trace_run1 ( s#bpf_prog * , t#u64 )
bpf_trace_run10 void bpf_trace_run10 ( s#bpf_prog * , t#u64 , t#u64 , t#u64 , t#u64 , t#u64 , t#u64 , t#u64 , t#u64 , t#u64 , t#u64 )
bpf_trace_run2 void bpf_trace_run2 ( s#bpf_prog * , t#u64 , t#u64 )
bpf_trace_run4 void bpf_trace_run4 ( s#bpf_prog * , t#u64 , t#u64 , t#u64 , t#u64 )
bsg_job_done void bsg_job_done ( s#bsg_job * , int , unsigned int )
bus_register extern int __attribute__ ( ( __warn_unused_result__ ) ) bus_register ( s#bus_type * )
bus_unregister extern void bus_unregister ( s#bus_type * )
call_netdevice_notifiers int call_netdevice_notifiers ( unsigned long , s#net_device * )
call_usermodehelper extern int call_usermodehelper ( const char * , char * * , char * * , int )
call_usermodehelper_exec extern int call_usermodehelper_exec ( s#subprocess_info * , int )
call_usermodehelper_setup extern s#subprocess_info * call_usermodehelper_setup ( const char * , char * * , char * * , t#gfp_t , int ( * ) ( s#subprocess_info * , s#cred * ) , void ( * ) ( s#subprocess_info * ) , void * )
cancel_delayed_work extern t#bool cancel_delayed_work ( s#delayed_work * )
cancel_delayed_work_sync extern t#bool cancel_delayed_work_sync ( s#delayed_work * )
cancel_work_sync extern t#bool cancel_work_sync ( s#work_struct * )
capable extern t#bool capable ( int )
cdev_add int cdev_add ( s#cdev * , t#dev_t , unsigned )
cdev_del void cdev_del ( s#cdev * )
cdev_init void cdev_init ( s#cdev * , const s#file_operations * )
clear_inode extern void clear_inode ( s#inode * )
clear_page_dirty_for_io int clear_page_dirty_for_io ( s#page * )
complete extern void complete ( s#completion * )
complete_all extern void complete_all ( s#completion * )
complete_and_exit void complete_and_exit ( s#completion * , long )
consume_skb void consume_skb ( s#sk_buff * )
copy_user_enhanced_fast_string __attribute__ ( ( __warn_unused_result__ ) ) unsigned long copy_user_enhanced_fast_string ( void * , const void * , unsigned )
copy_user_generic_string __attribute__ ( ( __warn_unused_result__ ) ) unsigned long copy_user_generic_string ( void * , const void * , unsigned )
copy_user_generic_unrolled __attribute__ ( ( __warn_unused_result__ ) ) unsigned long copy_user_generic_unrolled ( void * , const void * , unsigned )
cpu_bit_bitmap extern const unsigned long cpu_bit_bitmap [ 64 + 1 ] [ ( ( ( 8192 ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ]
cpu_info extern __attribute__ ( ( section ( ".data..percpu" "..read_mostly" ) ) ) __typeof__ ( s#cpuinfo_x86 ) cpu_info
cpu_khz extern unsigned int cpu_khz
cpu_number extern __attribute__ ( ( section ( ".data..percpu" "..read_mostly" ) ) ) __typeof__ ( int ) cpu_number
cpu_sibling_map extern __attribute__ ( ( section ( ".data..percpu" "..read_mostly" ) ) ) __typeof__ ( t#cpumask_var_t ) cpu_sibling_map
cpu_tlbstate extern __attribute__ ( ( section ( ".data..percpu" "..shared_aligned" ) ) ) __typeof__ ( s#tlb_state ) cpu_tlbstate
cpufreq_quick_get unsigned int cpufreq_quick_get ( unsigned int )
cpumask_local_spread unsigned int cpumask_local_spread ( unsigned int , int )
cpumask_next unsigned int cpumask_next ( int , const s#cpumask * )
cpumask_next_and int cpumask_next_and ( int , const s#cpumask * , const s#cpumask * )
crc32_le t#u32 __attribute__ ( ( __pure__ ) ) crc32_le ( t#u32 , unsigned char const * , t#size_t )
csum_ipv6_magic extern t#__sum16 csum_ipv6_magic ( const s#in6_addr * , const s#in6_addr * , t#__u32 , t#__u8 , t#__wsum )
current_task extern __attribute__ ( ( section ( ".data..percpu" "" ) ) ) __typeof__ ( s#task_struct * ) current_task
d_add extern void d_add ( s#dentry * , s#inode * )
d_alloc extern s#dentry * d_alloc ( s#dentry * , const s#qstr * )
d_drop extern void d_drop ( s#dentry * )
d_find_alias extern s#dentry * d_find_alias ( s#inode * )
d_instantiate extern void d_instantiate ( s#dentry * , s#inode * )
d_invalidate extern void d_invalidate ( s#dentry * )
d_lookup extern s#dentry * d_lookup ( const s#dentry * , const s#qstr * )
d_make_root extern s#dentry * d_make_root ( s#inode * )
d_move extern void d_move ( s#dentry * , s#dentry * )
d_obtain_alias extern s#dentry * d_obtain_alias ( s#inode * )
d_path extern char * d_path ( const s#path * , char * , int )
d_prune_aliases extern void d_prune_aliases ( s#inode * )
d_set_d_op extern void d_set_d_op ( s#dentry * , const s#dentry_operations * )
d_splice_alias extern s#dentry * d_splice_alias ( s#inode * , s#dentry * )
deactivate_locked_super void deactivate_locked_super ( s#super_block * )
debugfs_create_dir s#dentry * debugfs_create_dir ( const char * , s#dentry * )
debugfs_create_file s#dentry * debugfs_create_file ( const char * , t#umode_t , s#dentry * , void * , const s#file_operations * )
debugfs_create_u32 s#dentry * debugfs_create_u32 ( const char * , t#umode_t , s#dentry * , t#u32 * )
debugfs_remove void debugfs_remove ( s#dentry * )
default_llseek extern t#loff_t default_llseek ( s#file * , t#loff_t , int )
default_wake_function int default_wake_function ( s#wait_queue_entry * , unsigned , int , void * )
del_gendisk extern void del_gendisk ( s#gendisk * )
del_timer extern int del_timer ( s#timer_list * )
del_timer_sync extern int del_timer_sync ( s#timer_list * )
delayed_work_timer_fn void delayed_work_timer_fn ( s#timer_list * )
dentry_open extern s#file * dentry_open ( const s#path * , int , const s#cred * )
dentry_path_raw extern char * dentry_path_raw ( s#dentry * , char * , int )
destroy_workqueue extern void destroy_workqueue ( s#workqueue_struct * )
dev_add_pack void dev_add_pack ( s#packet_type * )
dev_close void dev_close ( s#net_device * )
dev_driver_string extern const char * dev_driver_string ( const s#device * )
dev_get_flags unsigned int dev_get_flags ( const s#net_device * )
dev_open int dev_open ( s#net_device * , s#netlink_ext_ack * )
dev_printk __attribute__ ( ( __format__ ( printf , 3 , 4 ) ) ) __attribute__ ( ( __cold__ ) ) void dev_printk ( const char * , const s#device * , const char * , ... )
dev_queue_xmit int dev_queue_xmit ( s#sk_buff * )
dev_remove_pack void dev_remove_pack ( s#packet_type * )
dev_set_name extern __attribute__ ( ( __format__ ( printf , 2 , 3 ) ) ) int dev_set_name ( s#device * , const char * , ... )
dev_set_promiscuity int dev_set_promiscuity ( s#net_device * , int )
device_add_disk extern void device_add_disk ( s#device * , s#gendisk * , const s#attribute_group * * )
device_create_file extern int device_create_file ( s#device * , const s#device_attribute * )
device_remove_file extern void device_remove_file ( s#device * , const s#device_attribute * )
devm_kmalloc extern void * devm_kmalloc ( s#device * , t#size_t , t#gfp_t )
devmap_managed_key extern s#static_key_false devmap_managed_key
dget_parent extern s#dentry * dget_parent ( s#dentry * )
dma_alloc_attrs void * dma_alloc_attrs ( s#device * , t#size_t , t#dma_addr_t * , t#gfp_t , unsigned long )
dma_direct_map_page t#dma_addr_t dma_direct_map_page ( s#device * , s#page * , unsigned long , t#size_t , e#dma_data_direction , unsigned long )
dma_direct_unmap_page void dma_direct_unmap_page ( s#device * , t#dma_addr_t , t#size_t , e#dma_data_direction , unsigned long )
dma_free_attrs void dma_free_attrs ( s#device * , t#size_t , void * , t#dma_addr_t , unsigned long )
dma_ops extern const s#dma_map_ops * dma_ops
dma_set_coherent_mask int dma_set_coherent_mask ( s#device * , t#u64 )
dma_set_mask int dma_set_mask ( s#device * , t#u64 )
do_exit void do_exit ( long )
done_path_create extern void done_path_create ( s#path * , s#dentry * )
down extern void down ( s#semaphore * )
down_interruptible extern int __attribute__ ( ( __warn_unused_result__ ) ) down_interruptible ( s#semaphore * )
down_read extern void down_read ( s#rw_semaphore * )
down_read_trylock extern int down_read_trylock ( s#rw_semaphore * )
down_write extern void down_write ( s#rw_semaphore * )
down_write_trylock extern int down_write_trylock ( s#rw_semaphore * )
downgrade_write extern void downgrade_write ( s#rw_semaphore * )
dput extern void dput ( s#dentry * )
drm_add_modes_noedid int drm_add_modes_noedid ( s#drm_connector * , int , int )
drm_compat_ioctl long drm_compat_ioctl ( s#file * , unsigned int , unsigned long )
drm_connector_attach_encoder int drm_connector_attach_encoder ( s#drm_connector * , s#drm_encoder * )
drm_connector_cleanup void drm_connector_cleanup ( s#drm_connector * )
drm_connector_init int drm_connector_init ( s#drm_device * , s#drm_connector * , const s#drm_connector_funcs * , int )
drm_connector_register int drm_connector_register ( s#drm_connector * )
drm_connector_unregister void drm_connector_unregister ( s#drm_connector * )
drm_connector_update_edid_property int drm_connector_update_edid_property ( s#drm_connector * , const s#edid * )
drm_crtc_cleanup void drm_crtc_cleanup ( s#drm_crtc * )
drm_crtc_helper_set_config int drm_crtc_helper_set_config ( s#drm_mode_set * , s#drm_modeset_acquire_ctx * )
drm_crtc_init int drm_crtc_init ( s#drm_device * , s#drm_crtc * , const s#drm_crtc_funcs * )
drm_crtc_send_vblank_event void drm_crtc_send_vblank_event ( s#drm_crtc * , s#drm_pending_vblank_event * )
drm_cvt_mode s#drm_display_mode * drm_cvt_mode ( s#drm_device * , int , int , int , t#bool , t#bool , t#bool )
drm_dbg __attribute__ ( ( __format__ ( printf , 2 , 3 ) ) ) void drm_dbg ( unsigned int , const char * , ... )
drm_dev_alloc s#drm_device * drm_dev_alloc ( s#drm_driver * , s#device * )
drm_dev_put void drm_dev_put ( s#drm_device * )
drm_dev_register int drm_dev_register ( s#drm_device * , unsigned long )
drm_dev_unregister void drm_dev_unregister ( s#drm_device * )
drm_encoder_cleanup void drm_encoder_cleanup ( s#drm_encoder * )
drm_encoder_init __attribute__ ( ( __format__ ( printf , 5 , 6 ) ) ) int drm_encoder_init ( s#drm_device * , s#drm_encoder * , const s#drm_encoder_funcs * , int , const char * , ... )
drm_err __attribute__ ( ( __format__ ( printf , 1 , 2 ) ) ) void drm_err ( const char * , ... )
drm_fb_helper_alloc_fbi s#fb_info * drm_fb_helper_alloc_fbi ( s#drm_fb_helper * )
drm_fb_helper_blank int drm_fb_helper_blank ( int , s#fb_info * )
drm_fb_helper_check_var int drm_fb_helper_check_var ( s#fb_var_screeninfo * , s#fb_info * )
drm_fb_helper_debug_enter int drm_fb_helper_debug_enter ( s#fb_info * )
drm_fb_helper_debug_leave int drm_fb_helper_debug_leave ( s#fb_info * )
drm_fb_helper_deferred_io void drm_fb_helper_deferred_io ( s#fb_info * , s#list_head * )
drm_fb_helper_fill_info void drm_fb_helper_fill_info ( s#fb_info * , s#drm_fb_helper * , s#drm_fb_helper_surface_size * )
drm_fb_helper_fini void drm_fb_helper_fini ( s#drm_fb_helper * )
drm_fb_helper_init int drm_fb_helper_init ( s#drm_device * , s#drm_fb_helper * , int )
drm_fb_helper_initial_config int drm_fb_helper_initial_config ( s#drm_fb_helper * , int )
drm_fb_helper_pan_display int drm_fb_helper_pan_display ( s#fb_var_screeninfo * , s#fb_info * )
drm_fb_helper_prepare void drm_fb_helper_prepare ( s#drm_device * , s#drm_fb_helper * , const s#drm_fb_helper_funcs * )
drm_fb_helper_restore_fbdev_mode_unlocked int drm_fb_helper_restore_fbdev_mode_unlocked ( s#drm_fb_helper * )
drm_fb_helper_set_par int drm_fb_helper_set_par ( s#fb_info * )
drm_fb_helper_set_suspend_unlocked void drm_fb_helper_set_suspend_unlocked ( s#drm_fb_helper * , t#bool )
drm_fb_helper_setcmap int drm_fb_helper_setcmap ( s#fb_cmap * , s#fb_info * )
drm_fb_helper_sys_copyarea void drm_fb_helper_sys_copyarea ( s#fb_info * , const s#fb_copyarea * )
drm_fb_helper_sys_fillrect void drm_fb_helper_sys_fillrect ( s#fb_info * , const s#fb_fillrect * )
drm_fb_helper_sys_imageblit void drm_fb_helper_sys_imageblit ( s#fb_info * , const s#fb_image * )
drm_fb_helper_unregister_fbi void drm_fb_helper_unregister_fbi ( s#drm_fb_helper * )
drm_framebuffer_cleanup void drm_framebuffer_cleanup ( s#drm_framebuffer * )
drm_framebuffer_init int drm_framebuffer_init ( s#drm_device * , s#drm_framebuffer * , const s#drm_framebuffer_funcs * )
drm_framebuffer_unregister_private void drm_framebuffer_unregister_private ( s#drm_framebuffer * )
drm_gem_dumb_destroy int drm_gem_dumb_destroy ( s#drm_file * , s#drm_device * , t#uint32_t )
drm_gem_handle_create int drm_gem_handle_create ( s#drm_file * , s#drm_gem_object * , t#u32 * )
drm_gem_object_init int drm_gem_object_init ( s#drm_device * , s#drm_gem_object * , t#size_t )
drm_gem_object_lookup s#drm_gem_object * drm_gem_object_lookup ( s#drm_file * , t#u32 )
drm_gem_object_put void drm_gem_object_put ( s#drm_gem_object * )
drm_gem_object_put_unlocked void drm_gem_object_put_unlocked ( s#drm_gem_object * )
drm_gem_object_release void drm_gem_object_release ( s#drm_gem_object * )
drm_gem_prime_export s#dma_buf * drm_gem_prime_export ( s#drm_gem_object * , int )
drm_gem_prime_fd_to_handle int drm_gem_prime_fd_to_handle ( s#drm_device * , s#drm_file * , int , t#uint32_t * )
drm_gem_prime_handle_to_fd int drm_gem_prime_handle_to_fd ( s#drm_device * , s#drm_file * , t#uint32_t , t#uint32_t , int * )
drm_gem_prime_import s#drm_gem_object * drm_gem_prime_import ( s#drm_device * , s#dma_buf * )
drm_helper_connector_dpms int drm_helper_connector_dpms ( s#drm_connector * , int )
drm_helper_disable_unused_functions void drm_helper_disable_unused_functions ( s#drm_device * )
drm_helper_mode_fill_fb_struct void drm_helper_mode_fill_fb_struct ( s#drm_device * , s#drm_framebuffer * , const s#drm_mode_fb_cmd2 * )
drm_helper_probe_single_connector_modes int drm_helper_probe_single_connector_modes ( s#drm_connector * , t#uint32_t , t#uint32_t )
drm_helper_resume_force_mode void drm_helper_resume_force_mode ( s#drm_device * )
drm_ioctl long drm_ioctl ( s#file * , unsigned int , unsigned long )
drm_irq_install int drm_irq_install ( s#drm_device * , int )
drm_irq_uninstall int drm_irq_uninstall ( s#drm_device * )
drm_kms_helper_hotplug_event void drm_kms_helper_hotplug_event ( s#drm_device * )
drm_kms_helper_poll_disable void drm_kms_helper_poll_disable ( s#drm_device * )
drm_kms_helper_poll_enable void drm_kms_helper_poll_enable ( s#drm_device * )
drm_mode_config_cleanup void drm_mode_config_cleanup ( s#drm_device * )
drm_mode_config_init void drm_mode_config_init ( s#drm_device * )
drm_mode_config_reset void drm_mode_config_reset ( s#drm_device * )
drm_mode_create_suggested_offset_properties int drm_mode_create_suggested_offset_properties ( s#drm_device * )
drm_mode_crtc_set_gamma_size int drm_mode_crtc_set_gamma_size ( s#drm_crtc * , int )
drm_mode_destroy void drm_mode_destroy ( s#drm_device * , s#drm_display_mode * )
drm_mode_legacy_fb_format t#uint32_t drm_mode_legacy_fb_format ( t#uint32_t , t#uint32_t )
drm_mode_object_find s#drm_mode_object * drm_mode_object_find ( s#drm_device * , s#drm_file * , t#uint32_t , t#uint32_t )
drm_mode_probed_add void drm_mode_probed_add ( s#drm_connector * , s#drm_display_mode * )
drm_modeset_lock_all void drm_modeset_lock_all ( s#drm_device * )
drm_modeset_unlock_all void drm_modeset_unlock_all ( s#drm_device * )
drm_object_attach_property void drm_object_attach_property ( s#drm_mode_object * , s#drm_property * , t#uint64_t )
drm_object_property_set_value int drm_object_property_set_value ( s#drm_mode_object * , s#drm_property * , t#uint64_t )
drm_open int drm_open ( s#inode * , s#file * )
drm_poll t#__poll_t drm_poll ( s#file * , s#poll_table_struct * )
drm_read t#ssize_t drm_read ( s#file * , char * , t#size_t , t#loff_t * )
drm_release int drm_release ( s#inode * , s#file * )
drop_nlink extern void drop_nlink ( s#inode * )
drop_super extern void drop_super ( s#super_block * )
dump_stack extern void dump_stack ( void )
e#aper_size_type enum aper_size_type { U8_APER_SIZE , U16_APER_SIZE , U32_APER_SIZE , LVL2_APER_SIZE , FIXED_APER_SIZE }
e#audit_state enum audit_state { AUDIT_DISABLED , AUDIT_BUILD_CONTEXT , AUDIT_RECORD_CONTEXT }
e#backlight_scale enum backlight_scale { BACKLIGHT_SCALE_UNKNOWN = 0 , BACKLIGHT_SCALE_LINEAR , BACKLIGHT_SCALE_NON_LINEAR , }
e#backlight_type enum backlight_type { BACKLIGHT_RAW = 1 , BACKLIGHT_PLATFORM , BACKLIGHT_FIRMWARE , BACKLIGHT_TYPE_MAX , }
e#blk_eh_timer_return enum blk_eh_timer_return { BLK_EH_DONE , BLK_EH_RESET_TIMER , }
e#blk_zoned_model enum blk_zoned_model { BLK_ZONED_NONE , BLK_ZONED_HA , BLK_ZONED_HM , }
e#bpf_attach_type enum bpf_attach_type { BPF_CGROUP_INET_INGRESS , BPF_CGROUP_INET_EGRESS , BPF_CGROUP_INET_SOCK_CREATE , BPF_CGROUP_SOCK_OPS , BPF_SK_SKB_STREAM_PARSER , BPF_SK_SKB_STREAM_VERDICT , BPF_CGROUP_DEVICE , BPF_SK_MSG_VERDICT , BPF_CGROUP_INET4_BIND , BPF_CGROUP_INET6_BIND , BPF_CGROUP_INET4_CONNECT , BPF_CGROUP_INET6_CONNECT , BPF_CGROUP_INET4_POST_BIND , BPF_CGROUP_INET6_POST_BIND , BPF_CGROUP_UDP4_SENDMSG , BPF_CGROUP_UDP6_SENDMSG , BPF_LIRC_MODE2 , BPF_FLOW_DISSECTOR , BPF_CGROUP_SYSCTL , BPF_CGROUP_UDP4_RECVMSG , BPF_CGROUP_UDP6_RECVMSG , BPF_CGROUP_GETSOCKOPT , BPF_CGROUP_SETSOCKOPT , __MAX_BPF_ATTACH_TYPE }
e#bpf_map_type enum bpf_map_type { BPF_MAP_TYPE_UNSPEC , BPF_MAP_TYPE_HASH , BPF_MAP_TYPE_ARRAY , BPF_MAP_TYPE_PROG_ARRAY , BPF_MAP_TYPE_PERF_EVENT_ARRAY , BPF_MAP_TYPE_PERCPU_HASH , BPF_MAP_TYPE_PERCPU_ARRAY , BPF_MAP_TYPE_STACK_TRACE , BPF_MAP_TYPE_CGROUP_ARRAY , BPF_MAP_TYPE_LRU_HASH , BPF_MAP_TYPE_LRU_PERCPU_HASH , BPF_MAP_TYPE_LPM_TRIE , BPF_MAP_TYPE_ARRAY_OF_MAPS , BPF_MAP_TYPE_HASH_OF_MAPS , BPF_MAP_TYPE_DEVMAP , BPF_MAP_TYPE_SOCKMAP , BPF_MAP_TYPE_CPUMAP , BPF_MAP_TYPE_XSKMAP , BPF_MAP_TYPE_SOCKHASH , BPF_MAP_TYPE_CGROUP_STORAGE , BPF_MAP_TYPE_REUSEPORT_SOCKARRAY , BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE , BPF_MAP_TYPE_QUEUE , BPF_MAP_TYPE_STACK , BPF_MAP_TYPE_SK_STORAGE , BPF_MAP_TYPE_DEVMAP_HASH , }
e#bpf_netdev_command enum bpf_netdev_command { XDP_SETUP_PROG , XDP_SETUP_PROG_HW , XDP_QUERY_PROG , XDP_QUERY_PROG_HW , BPF_OFFLOAD_MAP_ALLOC , BPF_OFFLOAD_MAP_FREE , XDP_SETUP_XSK_UMEM , }
e#bpf_prog_type enum bpf_prog_type { BPF_PROG_TYPE_UNSPEC , BPF_PROG_TYPE_SOCKET_FILTER , BPF_PROG_TYPE_KPROBE , BPF_PROG_TYPE_SCHED_CLS , BPF_PROG_TYPE_SCHED_ACT , BPF_PROG_TYPE_TRACEPOINT , BPF_PROG_TYPE_XDP , BPF_PROG_TYPE_PERF_EVENT , BPF_PROG_TYPE_CGROUP_SKB , BPF_PROG_TYPE_CGROUP_SOCK , BPF_PROG_TYPE_LWT_IN , BPF_PROG_TYPE_LWT_OUT , BPF_PROG_TYPE_LWT_XMIT , BPF_PROG_TYPE_SOCK_OPS , BPF_PROG_TYPE_SK_SKB , BPF_PROG_TYPE_CGROUP_DEVICE , BPF_PROG_TYPE_SK_MSG , BPF_PROG_TYPE_RAW_TRACEPOINT , BPF_PROG_TYPE_CGROUP_SOCK_ADDR , BPF_PROG_TYPE_LWT_SEG6LOCAL , BPF_PROG_TYPE_LIRC_MODE2 , BPF_PROG_TYPE_SK_REUSEPORT , BPF_PROG_TYPE_FLOW_DISSECTOR , BPF_PROG_TYPE_CGROUP_SYSCTL , BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE , BPF_PROG_TYPE_CGROUP_SOCKOPT , }
e#cfg80211_signal_type enum cfg80211_signal_type { CFG80211_SIGNAL_TYPE_NONE , CFG80211_SIGNAL_TYPE_MBM , CFG80211_SIGNAL_TYPE_UNSPEC , }
e#chipset_type enum chipset_type { NOT_SUPPORTED , SUPPORTED , }
e#cpuhp_state enum cpuhp_state { CPUHP_INVALID = - 1 , CPUHP_OFFLINE = 0 , CPUHP_CREATE_THREADS , CPUHP_PERF_PREPARE , CPUHP_PERF_X86_PREPARE , CPUHP_PERF_X86_AMD_UNCORE_PREP , CPUHP_PERF_POWER , CPUHP_PERF_SUPERH , CPUHP_X86_HPET_DEAD , CPUHP_X86_APB_DEAD , CPUHP_X86_MCE_DEAD , CPUHP_VIRT_NET_DEAD , CPUHP_SLUB_DEAD , CPUHP_MM_WRITEBACK_DEAD , CPUHP_MM_VMSTAT_DEAD , CPUHP_SOFTIRQ_DEAD , CPUHP_NET_MVNETA_DEAD , CPUHP_CPUIDLE_DEAD , CPUHP_ARM64_FPSIMD_DEAD , CPUHP_ARM_OMAP_WAKE_DEAD , CPUHP_IRQ_POLL_DEAD , CPUHP_BLOCK_SOFTIRQ_DEAD , CPUHP_ACPI_CPUDRV_DEAD , CPUHP_S390_PFAULT_DEAD , CPUHP_BLK_MQ_DEAD , CPUHP_FS_BUFF_DEAD , CPUHP_PRINTK_DEAD , CPUHP_MM_MEMCQ_DEAD , CPUHP_PERCPU_CNT_DEAD , CPUHP_RADIX_DEAD , CPUHP_PAGE_ALLOC_DEAD , CPUHP_NET_DEV_DEAD , CPUHP_PCI_XGENE_DEAD , CPUHP_IOMMU_INTEL_DEAD , CPUHP_LUSTRE_CFS_DEAD , CPUHP_AP_ARM_CACHE_B15_RAC_DEAD , CPUHP_WORKQUEUE_PREP , CPUHP_POWER_NUMA_PREPARE , CPUHP_HRTIMERS_PREPARE , CPUHP_PROFILE_PREPARE , CPUHP_X2APIC_PREPARE , CPUHP_SMPCFD_PREPARE , CPUHP_RELAY_PREPARE , CPUHP_SLAB_PREPARE , CPUHP_MD_RAID5_PREPARE , CPUHP_RCUTREE_PREP , CPUHP_CPUIDLE_COUPLED_PREPARE , CPUHP_POWERPC_PMAC_PREPARE , CPUHP_POWERPC_MMU_CTX_PREPARE , CPUHP_XEN_PREPARE , CPUHP_XEN_EVTCHN_PREPARE , CPUHP_ARM_SHMOBILE_SCU_PREPARE , CPUHP_SH_SH3X_PREPARE , CPUHP_NET_FLOW_PREPARE , CPUHP_TOPOLOGY_PREPARE , CPUHP_NET_IUCV_PREPARE , CPUHP_ARM_BL_PREPARE , CPUHP_TRACE_RB_PREPARE , CPUHP_MM_ZS_PREPARE , CPUHP_MM_ZSWP_MEM_PREPARE , CPUHP_MM_ZSWP_POOL_PREPARE , CPUHP_KVM_PPC_BOOK3S_PREPARE , CPUHP_ZCOMP_PREPARE , CPUHP_TIMERS_PREPARE , CPUHP_MIPS_SOC_PREPARE , CPUHP_BP_PREPARE_DYN , CPUHP_BP_PREPARE_DYN_END = E#CPUHP_BP_PREPARE_DYN + 20 , CPUHP_BRINGUP_CPU , CPUHP_AP_IDLE_DEAD , CPUHP_AP_OFFLINE , CPUHP_AP_SCHED_STARTING , CPUHP_AP_RCUTREE_DYING , CPUHP_AP_IRQ_GIC_STARTING , CPUHP_AP_IRQ_HIP04_STARTING , CPUHP_AP_IRQ_ARMADA_XP_STARTING , CPUHP_AP_IRQ_BCM2836_STARTING , CPUHP_AP_IRQ_MIPS_GIC_STARTING , CPUHP_AP_ARM_MVEBU_COHERENCY , CPUHP_AP_MICROCODE_LOADER , CPUHP_AP_PERF_X86_AMD_UNCORE_STARTING , CPUHP_AP_PERF_X86_STARTING , CPUHP_AP_PERF_X86_AMD_IBS_STARTING , CPUHP_AP_PERF_X86_CQM_STARTING , CPUHP_AP_PERF_X86_CSTATE_STARTING , CPUHP_AP_PERF_XTENSA_STARTING , CPUHP_AP_MIPS_OP_LOONGSON3_STARTING , CPUHP_AP_ARM_SDEI_STARTING , CPUHP_AP_ARM_VFP_STARTING , CPUHP_AP_ARM64_DEBUG_MONITORS_STARTING , CPUHP_AP_PERF_ARM_HW_BREAKPOINT_STARTING , CPUHP_AP_PERF_ARM_ACPI_STARTING , CPUHP_AP_PERF_ARM_STARTING , CPUHP_AP_ARM_L2X0_STARTING , CPUHP_AP_EXYNOS4_MCT_TIMER_STARTING , CPUHP_AP_ARM_ARCH_TIMER_STARTING , CPUHP_AP_ARM_GLOBAL_TIMER_STARTING , CPUHP_AP_JCORE_TIMER_STARTING , CPUHP_AP_ARM_TWD_STARTING , CPUHP_AP_QCOM_TIMER_STARTING , CPUHP_AP_TEGRA_TIMER_STARTING , CPUHP_AP_ARMADA_TIMER_STARTING , CPUHP_AP_MARCO_TIMER_STARTING , CPUHP_AP_MIPS_GIC_TIMER_STARTING , CPUHP_AP_ARC_TIMER_STARTING , CPUHP_AP_RISCV_TIMER_STARTING , CPUHP_AP_CSKY_TIMER_STARTING , CPUHP_AP_KVM_STARTING , CPUHP_AP_KVM_ARM_VGIC_INIT_STARTING , CPUHP_AP_KVM_ARM_VGIC_STARTING , CPUHP_AP_KVM_ARM_TIMER_STARTING , CPUHP_AP_DUMMY_TIMER_STARTING , CPUHP_AP_ARM_XEN_STARTING , CPUHP_AP_ARM_CORESIGHT_STARTING , CPUHP_AP_ARM64_ISNDEP_STARTING , CPUHP_AP_SMPCFD_DYING , CPUHP_AP_X86_TBOOT_DYING , CPUHP_AP_ARM_CACHE_B15_RAC_DYING , CPUHP_AP_ONLINE , CPUHP_TEARDOWN_CPU , CPUHP_AP_ONLINE_IDLE , CPUHP_AP_SMPBOOT_THREADS , CPUHP_AP_X86_VDSO_VMA_ONLINE , CPUHP_AP_IRQ_AFFINITY_ONLINE , CPUHP_AP_ARM_MVEBU_SYNC_CLOCKS , CPUHP_AP_X86_INTEL_EPB_ONLINE , CPUHP_AP_PERF_ONLINE , CPUHP_AP_PERF_X86_ONLINE , CPUHP_AP_PERF_X86_UNCORE_ONLINE , CPUHP_AP_PERF_X86_AMD_UNCORE_ONLINE , CPUHP_AP_PERF_X86_AMD_POWER_ONLINE , CPUHP_AP_PERF_X86_RAPL_ONLINE , CPUHP_AP_PERF_X86_CQM_ONLINE , CPUHP_AP_PERF_X86_CSTATE_ONLINE , CPUHP_AP_PERF_S390_CF_ONLINE , CPUHP_AP_PERF_S390_SF_ONLINE , CPUHP_AP_PERF_ARM_CCI_ONLINE , CPUHP_AP_PERF_ARM_CCN_ONLINE , CPUHP_AP_PERF_ARM_HISI_DDRC_ONLINE , CPUHP_AP_PERF_ARM_HISI_HHA_ONLINE , CPUHP_AP_PERF_ARM_HISI_L3_ONLINE , CPUHP_AP_PERF_ARM_L2X0_ONLINE , CPUHP_AP_PERF_ARM_QCOM_L2_ONLINE , CPUHP_AP_PERF_ARM_QCOM_L3_ONLINE , CPUHP_AP_PERF_ARM_APM_XGENE_ONLINE , CPUHP_AP_PERF_ARM_CAVIUM_TX2_UNCORE_ONLINE , CPUHP_AP_PERF_POWERPC_NEST_IMC_ONLINE , CPUHP_AP_PERF_POWERPC_CORE_IMC_ONLINE , CPUHP_AP_PERF_POWERPC_THREAD_IMC_ONLINE , CPUHP_AP_PERF_POWERPC_TRACE_IMC_ONLINE , CPUHP_AP_WATCHDOG_ONLINE , CPUHP_AP_WORKQUEUE_ONLINE , CPUHP_AP_RCUTREE_ONLINE , CPUHP_AP_BASE_CACHEINFO_ONLINE , CPUHP_AP_ONLINE_DYN , CPUHP_AP_ONLINE_DYN_END = E#CPUHP_AP_ONLINE_DYN + 30 , CPUHP_AP_X86_HPET_ONLINE , CPUHP_AP_X86_KVM_CLK_ONLINE , CPUHP_AP_ACTIVE , CPUHP_ONLINE , }
e#dev_pm_qos_req_type enum dev_pm_qos_req_type { DEV_PM_QOS_RESUME_LATENCY = 1 , DEV_PM_QOS_LATENCY_TOLERANCE , DEV_PM_QOS_FLAGS , }
e#dev_prop_type enum dev_prop_type { DEV_PROP_U8 , DEV_PROP_U16 , DEV_PROP_U32 , DEV_PROP_U64 , DEV_PROP_STRING , DEV_PROP_MAX , }
e#devlink_dpipe_field_mapping_type enum devlink_dpipe_field_mapping_type { DEVLINK_DPIPE_FIELD_MAPPING_TYPE_NONE , DEVLINK_DPIPE_FIELD_MAPPING_TYPE_IFINDEX , }
e#devlink_eswitch_encap_mode enum devlink_eswitch_encap_mode { DEVLINK_ESWITCH_ENCAP_MODE_NONE , DEVLINK_ESWITCH_ENCAP_MODE_BASIC , }
e#devlink_port_flavour enum devlink_port_flavour { DEVLINK_PORT_FLAVOUR_PHYSICAL , DEVLINK_PORT_FLAVOUR_CPU , DEVLINK_PORT_FLAVOUR_DSA , DEVLINK_PORT_FLAVOUR_PCI_PF , DEVLINK_PORT_FLAVOUR_PCI_VF , }
e#devlink_port_type enum devlink_port_type { DEVLINK_PORT_TYPE_NOTSET , DEVLINK_PORT_TYPE_AUTO , DEVLINK_PORT_TYPE_ETH , DEVLINK_PORT_TYPE_IB , }
e#devlink_sb_pool_type enum devlink_sb_pool_type { DEVLINK_SB_POOL_TYPE_INGRESS , DEVLINK_SB_POOL_TYPE_EGRESS , }
e#devlink_sb_threshold_type enum devlink_sb_threshold_type { DEVLINK_SB_THRESHOLD_TYPE_STATIC , DEVLINK_SB_THRESHOLD_TYPE_DYNAMIC , }
e#devlink_trap_action enum devlink_trap_action { DEVLINK_TRAP_ACTION_DROP , DEVLINK_TRAP_ACTION_TRAP , }
e#devlink_trap_type enum devlink_trap_type { DEVLINK_TRAP_TYPE_DROP , DEVLINK_TRAP_TYPE_EXCEPTION , }
e#dl_dev_state enum dl_dev_state { DL_DEV_NO_DRIVER = 0 , DL_DEV_PROBING , DL_DEV_DRIVER_BOUND , DL_DEV_UNBINDING , }
e#dma_data_direction enum dma_data_direction { DMA_BIDIRECTIONAL = 0 , DMA_TO_DEVICE = 1 , DMA_FROM_DEVICE = 2 , DMA_NONE = 3 , }
e#drm_color_encoding enum drm_color_encoding { DRM_COLOR_YCBCR_BT601 , DRM_COLOR_YCBCR_BT709 , DRM_COLOR_YCBCR_BT2020 , DRM_COLOR_ENCODING_MAX , }
e#drm_color_range enum drm_color_range { DRM_COLOR_YCBCR_LIMITED_RANGE , DRM_COLOR_YCBCR_FULL_RANGE , DRM_COLOR_RANGE_MAX , }
e#drm_connector_force enum drm_connector_force { DRM_FORCE_UNSPECIFIED , DRM_FORCE_OFF , DRM_FORCE_ON , DRM_FORCE_ON_DIGITAL , }
e#drm_connector_registration_state enum drm_connector_registration_state { DRM_CONNECTOR_INITIALIZING = 0 , DRM_CONNECTOR_REGISTERED = 1 , DRM_CONNECTOR_UNREGISTERED = 2 , }
e#drm_connector_status enum drm_connector_status { connector_status_connected = 1 , connector_status_disconnected = 2 , connector_status_unknown = 3 , }
e#drm_ioctl_flags enum drm_ioctl_flags { DRM_AUTH = ( ( ( ( 1UL ) ) ) << ( 0 ) ) , DRM_MASTER = ( ( ( ( 1UL ) ) ) << ( 1 ) ) , DRM_ROOT_ONLY = ( ( ( ( 1UL ) ) ) << ( 2 ) ) , DRM_UNLOCKED = ( ( ( ( 1UL ) ) ) << ( 4 ) ) , DRM_RENDER_ALLOW = ( ( ( ( 1UL ) ) ) << ( 5 ) ) , }
e#drm_link_status enum drm_link_status { DRM_LINK_STATUS_GOOD = 0 , DRM_LINK_STATUS_BAD = 1 , }
e#drm_map_flags enum drm_map_flags { _DRM_RESTRICTED = 0x01 , _DRM_READ_ONLY = 0x02 , _DRM_LOCKED = 0x04 , _DRM_KERNEL = 0x08 , _DRM_WRITE_COMBINING = 0x10 , _DRM_CONTAINS_LOCK = 0x20 , _DRM_REMOVABLE = 0x40 , _DRM_DRIVER = 0x80 }
e#drm_map_type enum drm_map_type { _DRM_FRAME_BUFFER = 0 , _DRM_REGISTERS = 1 , _DRM_SHM = 2 , _DRM_AGP = 3 , _DRM_SCATTER_GATHER = 4 , _DRM_CONSISTENT = 5 }
e#drm_mode_status@6248d25c enum drm_mode_status { MODE_OK = 0 , MODE_HSYNC , MODE_VSYNC , MODE_H_ILLEGAL , MODE_V_ILLEGAL , MODE_BAD_WIDTH , MODE_NOMODE , MODE_NO_INTERLACE , MODE_NO_DBLESCAN , MODE_NO_VSCAN , MODE_MEM , MODE_VIRTUAL_X , MODE_VIRTUAL_Y , MODE_MEM_VIRT , MODE_NOCLOCK , MODE_CLOCK_HIGH , MODE_CLOCK_LOW , MODE_CLOCK_RANGE , MODE_BAD_HVALUE , MODE_BAD_VVALUE , MODE_BAD_VSCAN , MODE_HSYNC_NARROW , MODE_HSYNC_WIDE , MODE_HBLANK_NARROW , MODE_HBLANK_WIDE , MODE_VSYNC_NARROW , MODE_VSYNC_WIDE , MODE_VBLANK_NARROW , MODE_VBLANK_WIDE , MODE_PANEL , MODE_INTERLACE_WIDTH , MODE_ONE_WIDTH , MODE_ONE_HEIGHT , MODE_ONE_SIZE , MODE_NO_REDUCED , MODE_NO_STEREO , MODE_NO_420 , MODE_STALE = - 3 , MODE_BAD = - 2 , MODE_ERROR = - 1 }
e#drm_mode_status@79db3277 enum drm_mode_status { UNKNOWN }
e#drm_mode_subconnector enum drm_mode_subconnector { DRM_MODE_SUBCONNECTOR_Automatic = 0 , DRM_MODE_SUBCONNECTOR_Unknown = 0 , DRM_MODE_SUBCONNECTOR_DVID = 3 , DRM_MODE_SUBCONNECTOR_DVIA = 4 , DRM_MODE_SUBCONNECTOR_Composite = 5 , DRM_MODE_SUBCONNECTOR_SVIDEO = 6 , DRM_MODE_SUBCONNECTOR_Component = 8 , DRM_MODE_SUBCONNECTOR_SCART = 9 , }
e#drm_plane_type enum drm_plane_type { DRM_PLANE_TYPE_OVERLAY , DRM_PLANE_TYPE_PRIMARY , DRM_PLANE_TYPE_CURSOR , }
e#dsa_tag_protocol enum dsa_tag_protocol { DSA_TAG_PROTO_NONE = 0 , DSA_TAG_PROTO_BRCM = 1 , DSA_TAG_PROTO_BRCM_PREPEND = 2 , DSA_TAG_PROTO_DSA = 3 , DSA_TAG_PROTO_EDSA = 4 , DSA_TAG_PROTO_GSWIP = 5 , DSA_TAG_PROTO_KSZ9477 = 6 , DSA_TAG_PROTO_KSZ9893 = 7 , DSA_TAG_PROTO_LAN9303 = 8 , DSA_TAG_PROTO_MTK = 9 , DSA_TAG_PROTO_QCA = 10 , DSA_TAG_PROTO_TRAILER = 11 , DSA_TAG_PROTO_8021Q = 12 , DSA_TAG_PROTO_SJA1105 = 13 , DSA_TAG_PROTO_KSZ8795 = 14 , }
e#elv_merge enum elv_merge { ELEVATOR_NO_MERGE = 0 , ELEVATOR_FRONT_MERGE = 1 , ELEVATOR_BACK_MERGE = 2 , ELEVATOR_DISCARD_MERGE = 3 , }
e#environment_cap enum environment_cap { ENVIRON_ANY , ENVIRON_INDOOR , ENVIRON_OUTDOOR , }
e#ethtool_phys_id_state enum ethtool_phys_id_state { ETHTOOL_ID_INACTIVE , ETHTOOL_ID_ACTIVE , ETHTOOL_ID_ON , ETHTOOL_ID_OFF }
e#event_trigger_type enum event_trigger_type { ETT_NONE = ( 0 ) , ETT_TRACE_ONOFF = ( 1 << 0 ) , ETT_SNAPSHOT = ( 1 << 1 ) , ETT_STACKTRACE = ( 1 << 2 ) , ETT_EVENT_ENABLE = ( 1 << 3 ) , ETT_EVENT_HIST = ( 1 << 4 ) , ETT_HIST_ENABLE = ( 1 << 5 ) , }
e#fc_host_event_code enum fc_host_event_code { FCH_EVT_LIP = 0x1 , FCH_EVT_LINKUP = 0x2 , FCH_EVT_LINKDOWN = 0x3 , FCH_EVT_LIPRESET = 0x4 , FCH_EVT_RSCN = 0x5 , FCH_EVT_ADAPTER_CHANGE = 0x103 , FCH_EVT_PORT_UNKNOWN = 0x200 , FCH_EVT_PORT_OFFLINE = 0x201 , FCH_EVT_PORT_ONLINE = 0x202 , FCH_EVT_PORT_FABRIC = 0x204 , FCH_EVT_LINK_UNKNOWN = 0x500 , FCH_EVT_LINK_FPIN = 0x501 , FCH_EVT_VENDOR_UNIQUE = 0xffff , }
e#fc_port_state enum fc_port_state { FC_PORTSTATE_UNKNOWN , FC_PORTSTATE_NOTPRESENT , FC_PORTSTATE_ONLINE , FC_PORTSTATE_OFFLINE , FC_PORTSTATE_BLOCKED , FC_PORTSTATE_BYPASSED , FC_PORTSTATE_DIAGNOSTICS , FC_PORTSTATE_LINKDOWN , FC_PORTSTATE_ERROR , FC_PORTSTATE_LOOPBACK , FC_PORTSTATE_DELETED , FC_PORTSTATE_MARGINAL , }
e#fc_port_type enum fc_port_type { FC_PORTTYPE_UNKNOWN , FC_PORTTYPE_OTHER , FC_PORTTYPE_NOTPRESENT , FC_PORTTYPE_NPORT , FC_PORTTYPE_NLPORT , FC_PORTTYPE_LPORT , FC_PORTTYPE_PTP , FC_PORTTYPE_NPIV , }
e#fc_vport_state enum fc_vport_state { FC_VPORT_UNKNOWN , FC_VPORT_ACTIVE , FC_VPORT_DISABLED , FC_VPORT_LINKDOWN , FC_VPORT_INITIALIZING , FC_VPORT_NO_FABRIC_SUPP , FC_VPORT_NO_FABRIC_RSCS , FC_VPORT_FABRIC_LOGOUT , FC_VPORT_FABRIC_REJ_WWN , FC_VPORT_FAILED , }
e#fs_context_phase enum fs_context_phase { FS_CONTEXT_CREATE_PARAMS , FS_CONTEXT_CREATING , FS_CONTEXT_AWAITING_MOUNT , FS_CONTEXT_AWAITING_RECONF , FS_CONTEXT_RECONF_PARAMS , FS_CONTEXT_RECONFIGURING , FS_CONTEXT_FAILED , }
e#fs_context_purpose enum fs_context_purpose { FS_CONTEXT_FOR_MOUNT , FS_CONTEXT_FOR_SUBMOUNT , FS_CONTEXT_FOR_RECONFIGURE , }
e#fs_parameter_type enum fs_parameter_type { __fs_param_wasnt_defined , fs_param_is_flag , fs_param_is_bool , fs_param_is_u32 , fs_param_is_u32_octal , fs_param_is_u32_hex , fs_param_is_s32 , fs_param_is_u64 , fs_param_is_enum , fs_param_is_string , fs_param_is_blob , fs_param_is_blockdev , fs_param_is_path , fs_param_is_fd , nr__fs_parameter_type , }
e#fs_value_type enum fs_value_type { fs_value_is_undefined , fs_value_is_flag , fs_value_is_string , fs_value_is_blob , fs_value_is_filename , fs_value_is_filename_empty , fs_value_is_file , }
e#fscache_checkaux enum fscache_checkaux { FSCACHE_CHECKAUX_OKAY , FSCACHE_CHECKAUX_NEEDS_UPDATE , FSCACHE_CHECKAUX_OBSOLETE , }
e#fscache_obj_ref_trace enum fscache_obj_ref_trace { fscache_obj_get_add_to_deps , fscache_obj_get_queue , fscache_obj_put_alloc_fail , fscache_obj_put_attach_fail , fscache_obj_put_drop_obj , fscache_obj_put_enq_dep , fscache_obj_put_queue , fscache_obj_put_work , fscache_obj_ref__nr_traces }
e#fscache_operation_state enum fscache_operation_state { FSCACHE_OP_ST_BLANK , FSCACHE_OP_ST_INITIALISED , FSCACHE_OP_ST_PENDING , FSCACHE_OP_ST_IN_PROGRESS , FSCACHE_OP_ST_COMPLETE , FSCACHE_OP_ST_CANCELLED , FSCACHE_OP_ST_DEAD }
e#garp_applications enum garp_applications { GARP_APPLICATION_GVRP , __GARP_APPLICATION_MAX }
e#gro_result enum gro_result { GRO_MERGED , GRO_MERGED_FREE , GRO_HELD , GRO_NORMAL , GRO_DROP , GRO_CONSUMED , }
e#hdmi_picture_aspect enum hdmi_picture_aspect { HDMI_PICTURE_ASPECT_NONE , HDMI_PICTURE_ASPECT_4_3 , HDMI_PICTURE_ASPECT_16_9 , HDMI_PICTURE_ASPECT_64_27 , HDMI_PICTURE_ASPECT_256_135 , HDMI_PICTURE_ASPECT_RESERVED , }
e#hrtimer_mode enum hrtimer_mode { HRTIMER_MODE_ABS = 0x00 , HRTIMER_MODE_REL = 0x01 , HRTIMER_MODE_PINNED = 0x02 , HRTIMER_MODE_SOFT = 0x04 , HRTIMER_MODE_HARD = 0x08 , HRTIMER_MODE_ABS_PINNED = E#HRTIMER_MODE_ABS | E#HRTIMER_MODE_PINNED , HRTIMER_MODE_REL_PINNED = E#HRTIMER_MODE_REL | E#HRTIMER_MODE_PINNED , HRTIMER_MODE_ABS_SOFT = E#HRTIMER_MODE_ABS | E#HRTIMER_MODE_SOFT , HRTIMER_MODE_REL_SOFT = E#HRTIMER_MODE_REL | E#HRTIMER_MODE_SOFT , HRTIMER_MODE_ABS_PINNED_SOFT = E#HRTIMER_MODE_ABS_PINNED | E#HRTIMER_MODE_SOFT , HRTIMER_MODE_REL_PINNED_SOFT = E#HRTIMER_MODE_REL_PINNED | E#HRTIMER_MODE_SOFT , HRTIMER_MODE_ABS_HARD = E#HRTIMER_MODE_ABS | E#HRTIMER_MODE_HARD , HRTIMER_MODE_REL_HARD = E#HRTIMER_MODE_REL | E#HRTIMER_MODE_HARD , HRTIMER_MODE_ABS_PINNED_HARD = E#HRTIMER_MODE_ABS_PINNED | E#HRTIMER_MODE_HARD , HRTIMER_MODE_REL_PINNED_HARD = E#HRTIMER_MODE_REL_PINNED | E#HRTIMER_MODE_HARD , }
e#hrtimer_restart enum hrtimer_restart { HRTIMER_NORESTART , HRTIMER_RESTART , }
e#ieee80211_bss_type enum ieee80211_bss_type { IEEE80211_BSS_TYPE_ESS , IEEE80211_BSS_TYPE_PBSS , IEEE80211_BSS_TYPE_IBSS , IEEE80211_BSS_TYPE_MBSS , IEEE80211_BSS_TYPE_ANY }
e#ieee80211_edmg_bw_config enum ieee80211_edmg_bw_config { IEEE80211_EDMG_BW_CONFIG_4 = 4 , IEEE80211_EDMG_BW_CONFIG_5 = 5 , IEEE80211_EDMG_BW_CONFIG_6 = 6 , IEEE80211_EDMG_BW_CONFIG_7 = 7 , IEEE80211_EDMG_BW_CONFIG_8 = 8 , IEEE80211_EDMG_BW_CONFIG_9 = 9 , IEEE80211_EDMG_BW_CONFIG_10 = 10 , IEEE80211_EDMG_BW_CONFIG_11 = 11 , IEEE80211_EDMG_BW_CONFIG_12 = 12 , IEEE80211_EDMG_BW_CONFIG_13 = 13 , IEEE80211_EDMG_BW_CONFIG_14 = 14 , IEEE80211_EDMG_BW_CONFIG_15 = 15 , }
e#iommu_attr enum iommu_attr { DOMAIN_ATTR_GEOMETRY , DOMAIN_ATTR_PAGING , DOMAIN_ATTR_WINDOWS , DOMAIN_ATTR_FSL_PAMU_STASH , DOMAIN_ATTR_FSL_PAMU_ENABLE , DOMAIN_ATTR_FSL_PAMUV1 , DOMAIN_ATTR_NESTING , DOMAIN_ATTR_DMA_USE_FLUSH_QUEUE , DOMAIN_ATTR_MAX , }
e#iommu_cap enum iommu_cap { IOMMU_CAP_CACHE_COHERENCY , IOMMU_CAP_INTR_REMAP , IOMMU_CAP_NOEXEC , }
e#iommu_dev_features enum iommu_dev_features { IOMMU_DEV_FEAT_AUX , IOMMU_DEV_FEAT_SVA , }
e#iommu_resv_type enum iommu_resv_type { IOMMU_RESV_DIRECT , IOMMU_RESV_DIRECT_RELAXABLE , IOMMU_RESV_RESERVED , IOMMU_RESV_MSI , IOMMU_RESV_SW_MSI , }
e#ip_conntrack_dir enum ip_conntrack_dir { IP_CT_DIR_ORIGINAL , IP_CT_DIR_REPLY , IP_CT_DIR_MAX }
e#ip_conntrack_info enum ip_conntrack_info { IP_CT_ESTABLISHED , IP_CT_RELATED , IP_CT_NEW , IP_CT_IS_REPLY , IP_CT_ESTABLISHED_REPLY = E#IP_CT_ESTABLISHED + E#IP_CT_IS_REPLY , IP_CT_RELATED_REPLY = E#IP_CT_RELATED + E#IP_CT_IS_REPLY , IP_CT_NUMBER , IP_CT_UNTRACKED = 7 , }
e#irq_domain_bus_token enum irq_domain_bus_token { DOMAIN_BUS_ANY = 0 , DOMAIN_BUS_WIRED , DOMAIN_BUS_GENERIC_MSI , DOMAIN_BUS_PCI_MSI , DOMAIN_BUS_PLATFORM_MSI , DOMAIN_BUS_NEXUS , DOMAIN_BUS_IPI , DOMAIN_BUS_FSL_MC_MSI , DOMAIN_BUS_TI_SCI_INTA_MSI , }
e#irq_gc_flags enum irq_gc_flags { IRQ_GC_INIT_MASK_CACHE = 1 << 0 , IRQ_GC_INIT_NESTED_LOCK = 1 << 1 , IRQ_GC_MASK_CACHE_PER_TYPE = 1 << 2 , IRQ_GC_NO_MASK = 1 << 3 , IRQ_GC_BE_IO = 1 << 4 , }
e#irqchip_irq_state@56cb9417 enum irqchip_irq_state { UNKNOWN }
e#irqchip_irq_state@8b3c971d enum irqchip_irq_state { IRQCHIP_STATE_PENDING , IRQCHIP_STATE_ACTIVE , IRQCHIP_STATE_MASKED , IRQCHIP_STATE_LINE_LEVEL , }
e#irqreturn enum irqreturn { IRQ_NONE = ( 0 << 0 ) , IRQ_HANDLED = ( 1 << 0 ) , IRQ_WAKE_THREAD = ( 1 << 1 ) , }
e#kernel_pkey_operation enum kernel_pkey_operation { kernel_pkey_encrypt , kernel_pkey_decrypt , kernel_pkey_sign , kernel_pkey_verify , }
e#kobj_ns_type enum kobj_ns_type { KOBJ_NS_TYPE_NONE = 0 , KOBJ_NS_TYPE_NET , KOBJ_NS_TYPES }
e#led_brightness enum led_brightness { LED_OFF = 0 , LED_ON = 1 , LED_HALF = 127 , LED_FULL = 255 , }
e#libipw_state enum libipw_state { LIBIPW_UNINITIALIZED = 0 , LIBIPW_INITIALIZED , LIBIPW_ASSOCIATING , LIBIPW_ASSOCIATED , LIBIPW_AUTHENTICATING , LIBIPW_AUTHENTICATED , LIBIPW_SHUTDOWN }
e#memcg_kmem_state enum memcg_kmem_state { KMEM_NONE , KMEM_ALLOCATED , KMEM_ONLINE , }
e#memory_type enum memory_type { MEMORY_DEVICE_PRIVATE = 1 , MEMORY_DEVICE_FS_DAX , MEMORY_DEVICE_DEVDAX , MEMORY_DEVICE_PCI_P2PDMA , }
e#migrate_mode enum migrate_mode { MIGRATE_ASYNC , MIGRATE_SYNC_LIGHT , MIGRATE_SYNC , MIGRATE_SYNC_NO_COPY , }
e#mmu_notifier_event enum mmu_notifier_event { MMU_NOTIFY_UNMAP = 0 , MMU_NOTIFY_CLEAR , MMU_NOTIFY_PROTECTION_VMA , MMU_NOTIFY_PROTECTION_PAGE , MMU_NOTIFY_SOFT_DIRTY , }
e#mode_set_atomic@bfe5d106 enum mode_set_atomic { UNKNOWN }
e#mode_set_atomic@f3a8e138 enum mode_set_atomic { LEAVE_ATOMIC_MODE_SET , ENTER_ATOMIC_MODE_SET , }
e#module_state enum module_state { MODULE_STATE_LIVE , MODULE_STATE_COMING , MODULE_STATE_GOING , MODULE_STATE_UNFORMED , }
e#mq_rq_state enum mq_rq_state { MQ_RQ_IDLE = 0 , MQ_RQ_IN_FLIGHT = 1 , MQ_RQ_COMPLETE = 2 , }
e#mrp_applications enum mrp_applications { MRP_APPLICATION_MVRP , __MRP_APPLICATION_MAX }
e#netdev_tx enum netdev_tx { __NETDEV_TX_MIN = ( - ( ( int ) ( ~ 0U >> 1 ) ) - 1 ) , NETDEV_TX_OK = 0x00 , NETDEV_TX_BUSY = 0x10 , }
e#nf_log_type enum nf_log_type { NF_LOG_TYPE_LOG = 0 , NF_LOG_TYPE_ULOG , NF_LOG_TYPE_MAX }
e#nfs3_stable_how enum nfs3_stable_how { NFS_UNSTABLE = 0 , NFS_DATA_SYNC = 1 , NFS_FILE_SYNC = 2 , NFS_INVALID_STABLE_HOW = - 1 }
e#nl80211_auth_type enum nl80211_auth_type { NL80211_AUTHTYPE_OPEN_SYSTEM , NL80211_AUTHTYPE_SHARED_KEY , NL80211_AUTHTYPE_FT , NL80211_AUTHTYPE_NETWORK_EAP , NL80211_AUTHTYPE_SAE , NL80211_AUTHTYPE_FILS_SK , NL80211_AUTHTYPE_FILS_SK_PFS , NL80211_AUTHTYPE_FILS_PK , __NL80211_AUTHTYPE_NUM , NL80211_AUTHTYPE_MAX = E#__NL80211_AUTHTYPE_NUM - 1 , NL80211_AUTHTYPE_AUTOMATIC }
e#nl80211_band enum nl80211_band { NL80211_BAND_2GHZ , NL80211_BAND_5GHZ , NL80211_BAND_60GHZ , NL80211_BAND_6GHZ , NUM_NL80211_BANDS , }
e#nl80211_bss_scan_width enum nl80211_bss_scan_width { NL80211_BSS_CHAN_WIDTH_20 , NL80211_BSS_CHAN_WIDTH_10 , NL80211_BSS_CHAN_WIDTH_5 , }
e#nl80211_bss_select_attr enum nl80211_bss_select_attr { __NL80211_BSS_SELECT_ATTR_INVALID , NL80211_BSS_SELECT_ATTR_RSSI , NL80211_BSS_SELECT_ATTR_BAND_PREF , NL80211_BSS_SELECT_ATTR_RSSI_ADJUST , __NL80211_BSS_SELECT_ATTR_AFTER_LAST , NL80211_BSS_SELECT_ATTR_MAX = E#__NL80211_BSS_SELECT_ATTR_AFTER_LAST - 1 }
e#nl80211_chan_width enum nl80211_chan_width { NL80211_CHAN_WIDTH_20_NOHT , NL80211_CHAN_WIDTH_20 , NL80211_CHAN_WIDTH_40 , NL80211_CHAN_WIDTH_80 , NL80211_CHAN_WIDTH_80P80 , NL80211_CHAN_WIDTH_160 , NL80211_CHAN_WIDTH_5 , NL80211_CHAN_WIDTH_10 , }
e#nl80211_dfs_regions enum nl80211_dfs_regions { NL80211_DFS_UNSET = 0 , NL80211_DFS_FCC = 1 , NL80211_DFS_ETSI = 2 , NL80211_DFS_JP = 3 , }
e#nl80211_dfs_state enum nl80211_dfs_state { NL80211_DFS_USABLE , NL80211_DFS_UNAVAILABLE , NL80211_DFS_AVAILABLE , }
e#nl80211_iftype enum nl80211_iftype { NL80211_IFTYPE_UNSPECIFIED , NL80211_IFTYPE_ADHOC , NL80211_IFTYPE_STATION , NL80211_IFTYPE_AP , NL80211_IFTYPE_AP_VLAN , NL80211_IFTYPE_WDS , NL80211_IFTYPE_MONITOR , NL80211_IFTYPE_MESH_POINT , NL80211_IFTYPE_P2P_CLIENT , NL80211_IFTYPE_P2P_GO , NL80211_IFTYPE_P2P_DEVICE , NL80211_IFTYPE_OCB , NL80211_IFTYPE_NAN , NUM_NL80211_IFTYPES , NL80211_IFTYPE_MAX = E#NUM_NL80211_IFTYPES - 1 }
e#nl80211_key_mode enum nl80211_key_mode { NL80211_KEY_RX_TX , NL80211_KEY_NO_TX , NL80211_KEY_SET_TX }
e#nl80211_mfp enum nl80211_mfp { NL80211_MFP_NO , NL80211_MFP_REQUIRED , NL80211_MFP_OPTIONAL , }
e#nl80211_reg_initiator enum nl80211_reg_initiator { NL80211_REGDOM_SET_BY_CORE , NL80211_REGDOM_SET_BY_USER , NL80211_REGDOM_SET_BY_DRIVER , NL80211_REGDOM_SET_BY_COUNTRY_IE , }
e#nl80211_user_reg_hint_type enum nl80211_user_reg_hint_type { NL80211_USER_REG_HINT_USER = 0 , NL80211_USER_REG_HINT_CELL_BASE = 1 , NL80211_USER_REG_HINT_INDOOR = 2 , }
e#nl802154_cca_modes enum nl802154_cca_modes { __NL802154_CCA_INVALID , NL802154_CCA_ENERGY , NL802154_CCA_CARRIER , NL802154_CCA_ENERGY_CARRIER , NL802154_CCA_ALOHA , NL802154_CCA_UWB_SHR , NL802154_CCA_UWB_MULTIPLEXED , __NL802154_CCA_ATTR_AFTER_LAST , NL802154_CCA_ATTR_MAX = E#__NL802154_CCA_ATTR_AFTER_LAST - 1 }
e#nl802154_cca_opts enum nl802154_cca_opts { NL802154_CCA_OPT_ENERGY_CARRIER_AND , NL802154_CCA_OPT_ENERGY_CARRIER_OR , __NL802154_CCA_OPT_ATTR_AFTER_LAST , NL802154_CCA_OPT_ATTR_MAX = E#__NL802154_CCA_OPT_ATTR_AFTER_LAST - 1 }
e#nl802154_supported_bool_states enum nl802154_supported_bool_states { NL802154_SUPPORTED_BOOL_FALSE , NL802154_SUPPORTED_BOOL_TRUE , __NL802154_SUPPORTED_BOOL_INVALD , NL802154_SUPPORTED_BOOL_BOTH , __NL802154_SUPPORTED_BOOL_AFTER_LAST , NL802154_SUPPORTED_BOOL_MAX = E#__NL802154_SUPPORTED_BOOL_AFTER_LAST - 1 }
e#nvme_fc_obj_state enum nvme_fc_obj_state { FC_OBJSTATE_UNKNOWN , FC_OBJSTATE_NOTPRESENT , FC_OBJSTATE_ONLINE , FC_OBJSTATE_OFFLINE , FC_OBJSTATE_BLOCKED , FC_OBJSTATE_BYPASSED , FC_OBJSTATE_DIAGNOSTICS , FC_OBJSTATE_LINKDOWN , FC_OBJSTATE_ERROR , FC_OBJSTATE_LOOPBACK , FC_OBJSTATE_DELETED , }
e#nvmefc_fcp_datadir enum nvmefc_fcp_datadir { NVMEFC_FCP_NODATA , NVMEFC_FCP_WRITE , NVMEFC_FCP_READ , }
e#nvmem_type enum nvmem_type { NVMEM_TYPE_UNKNOWN = 0 , NVMEM_TYPE_EEPROM , NVMEM_TYPE_OTP , NVMEM_TYPE_BATTERY_BACKED , }
e#page_entry_size enum page_entry_size { PE_SIZE_PTE = 0 , PE_SIZE_PMD , PE_SIZE_PUD , }
e#pci_channel_state enum pci_channel_state { pci_channel_io_normal = ( pci_channel_state_t ) 1 , pci_channel_io_frozen = ( pci_channel_state_t ) 2 , pci_channel_io_perm_failure = ( pci_channel_state_t ) 3 , }
e#perf_event_state enum perf_event_state { PERF_EVENT_STATE_DEAD = - 4 , PERF_EVENT_STATE_EXIT = - 3 , PERF_EVENT_STATE_ERROR = - 2 , PERF_EVENT_STATE_OFF = - 1 , PERF_EVENT_STATE_INACTIVE = 0 , PERF_EVENT_STATE_ACTIVE = 1 , }
e#phy_state enum phy_state { PHY_DOWN = 0 , PHY_READY , PHY_HALTED , PHY_UP , PHY_RUNNING , PHY_NOLINK , }
e#phylink_op_type enum phylink_op_type { PHYLINK_NETDEV = 0 , PHYLINK_DEV , }
e#pid_type enum pid_type { PIDTYPE_PID , PIDTYPE_TGID , PIDTYPE_PGID , PIDTYPE_SID , PIDTYPE_MAX , }
e#pm_qos_type enum pm_qos_type { PM_QOS_UNITIALIZED , PM_QOS_MAX , PM_QOS_MIN , PM_QOS_SUM }
e#pnfs_iomode enum pnfs_iomode { IOMODE_READ = 1 , IOMODE_RW = 2 , IOMODE_ANY = 3 , }
e#pnfs_try_status enum pnfs_try_status { PNFS_ATTEMPTED = 0 , PNFS_NOT_ATTEMPTED = 1 , PNFS_TRY_AGAIN = 2 , }
e#pr_type enum pr_type { PR_WRITE_EXCLUSIVE = 1 , PR_EXCLUSIVE_ACCESS = 2 , PR_WRITE_EXCLUSIVE_REG_ONLY = 3 , PR_EXCLUSIVE_ACCESS_REG_ONLY = 4 , PR_WRITE_EXCLUSIVE_ALL_REGS = 5 , PR_EXCLUSIVE_ACCESS_ALL_REGS = 6 , }
e#print_line_t enum print_line_t { TRACE_TYPE_PARTIAL_LINE = 0 , TRACE_TYPE_HANDLED = 1 , TRACE_TYPE_UNHANDLED = 2 , TRACE_TYPE_NO_CONSUME = 3 }
e#probe_type enum probe_type { PROBE_DEFAULT_STRATEGY , PROBE_PREFER_ASYNCHRONOUS , PROBE_FORCE_SYNCHRONOUS , }
e#quota_type enum quota_type { USRQUOTA = 0 , GRPQUOTA = 1 , PRJQUOTA = 2 , }
e#rpm_request enum rpm_request { RPM_REQ_NONE = 0 , RPM_REQ_IDLE , RPM_REQ_SUSPEND , RPM_REQ_AUTOSUSPEND , RPM_REQ_RESUME , }
e#rpm_status enum rpm_status { RPM_ACTIVE = 0 , RPM_RESUMING , RPM_SUSPENDED , RPM_SUSPENDING , }
e#rq_qos_id enum rq_qos_id { RQ_QOS_WBT , RQ_QOS_LATENCY , RQ_QOS_COST , }
e#rw_hint enum rw_hint { WRITE_LIFE_NOT_SET = 0 , WRITE_LIFE_NONE = 1 , WRITE_LIFE_SHORT = 2 , WRITE_LIFE_MEDIUM = 3 , WRITE_LIFE_LONG = 4 , WRITE_LIFE_EXTREME = 5 , }
e#rx_handler_result enum rx_handler_result { RX_HANDLER_CONSUMED , RX_HANDLER_ANOTHER , RX_HANDLER_EXACT , RX_HANDLER_PASS , }
e#sas_device_type enum sas_device_type { SAS_PHY_UNUSED = 0 , SAS_END_DEVICE = 1 , SAS_EDGE_EXPANDER_DEVICE = 2 , SAS_FANOUT_EXPANDER_DEVICE = 3 , SAS_HA = 4 , SAS_SATA_DEV = 5 , SAS_SATA_PM = 7 , SAS_SATA_PM_PORT = 8 , SAS_SATA_PENDING = 9 , }
e#sas_linkrate enum sas_linkrate { SAS_LINK_RATE_UNKNOWN = 0 , SAS_PHY_DISABLED = 1 , SAS_PHY_RESET_PROBLEM = 2 , SAS_SATA_SPINUP_HOLD = 3 , SAS_SATA_PORT_SELECTOR = 4 , SAS_PHY_RESET_IN_PROGRESS = 5 , SAS_LINK_RATE_1_5_GBPS = 8 , SAS_LINK_RATE_G1 = E#SAS_LINK_RATE_1_5_GBPS , SAS_LINK_RATE_3_0_GBPS = 9 , SAS_LINK_RATE_G2 = E#SAS_LINK_RATE_3_0_GBPS , SAS_LINK_RATE_6_0_GBPS = 10 , SAS_LINK_RATE_12_0_GBPS = 11 , SAS_LINK_RATE_FAILED = 0x10 , SAS_PHY_VIRTUAL = 0x11 , }
e#sas_protocol enum sas_protocol { SAS_PROTOCOL_NONE = 0 , SAS_PROTOCOL_SATA = 0x01 , SAS_PROTOCOL_SMP = 0x02 , SAS_PROTOCOL_STP = 0x04 , SAS_PROTOCOL_SSP = 0x08 , SAS_PROTOCOL_ALL = 0x0E , SAS_PROTOCOL_STP_ALL = E#SAS_PROTOCOL_STP | E#SAS_PROTOCOL_SATA , }
e#scsi_device_state enum scsi_device_state { SDEV_CREATED = 1 , SDEV_RUNNING , SDEV_CANCEL , SDEV_DEL , SDEV_QUIESCE , SDEV_OFFLINE , SDEV_TRANSPORT_OFFLINE , SDEV_BLOCK , SDEV_CREATED_BLOCK , }
e#scsi_host_state enum scsi_host_state { SHOST_CREATED = 1 , SHOST_RUNNING , SHOST_CANCEL , SHOST_DEL , SHOST_RECOVERY , SHOST_CANCEL_RECOVERY , SHOST_DEL_RECOVERY , }
e#scsi_target_state enum scsi_target_state { STARGET_CREATED = 1 , STARGET_RUNNING , STARGET_REMOVE , STARGET_CREATED_REMOVE , STARGET_DEL , }
e#sctp_conntrack enum sctp_conntrack { SCTP_CONNTRACK_NONE , SCTP_CONNTRACK_CLOSED , SCTP_CONNTRACK_COOKIE_WAIT , SCTP_CONNTRACK_COOKIE_ECHOED , SCTP_CONNTRACK_ESTABLISHED , SCTP_CONNTRACK_SHUTDOWN_SENT , SCTP_CONNTRACK_SHUTDOWN_RECD , SCTP_CONNTRACK_SHUTDOWN_ACK_SENT , SCTP_CONNTRACK_HEARTBEAT_SENT , SCTP_CONNTRACK_HEARTBEAT_ACKED , SCTP_CONNTRACK_MAX }
e#skb_free_reason enum skb_free_reason { SKB_REASON_CONSUMED , SKB_REASON_DROPPED , }
e#subpixel_order enum subpixel_order { SubPixelUnknown = 0 , SubPixelHorizontalRGB , SubPixelHorizontalBGR , SubPixelVerticalRGB , SubPixelVerticalBGR , SubPixelNone , }
e#switch_power_state enum switch_power_state { DRM_SWITCH_POWER_ON = 0 , DRM_SWITCH_POWER_OFF = 1 , DRM_SWITCH_POWER_CHANGING = 2 , DRM_SWITCH_POWER_DYNAMIC_OFF = 3 , }
e#switchdev_obj_id enum switchdev_obj_id { SWITCHDEV_OBJ_ID_UNDEFINED , SWITCHDEV_OBJ_ID_PORT_VLAN , SWITCHDEV_OBJ_ID_PORT_MDB , SWITCHDEV_OBJ_ID_HOST_MDB , }
e#tc_setup_type enum tc_setup_type { TC_SETUP_QDISC_MQPRIO , TC_SETUP_CLSU32 , TC_SETUP_CLSFLOWER , TC_SETUP_CLSMATCHALL , TC_SETUP_CLSBPF , TC_SETUP_BLOCK , TC_SETUP_QDISC_CBS , TC_SETUP_QDISC_RED , TC_SETUP_QDISC_PRIO , TC_SETUP_QDISC_MQ , TC_SETUP_QDISC_ETF , TC_SETUP_ROOT_QDISC , TC_SETUP_QDISC_GRED , TC_SETUP_QDISC_TAPRIO , }
e#tcp_ca_event enum tcp_ca_event { CA_EVENT_TX_START , CA_EVENT_CWND_RESTART , CA_EVENT_COMPLETE_CWR , CA_EVENT_LOSS , CA_EVENT_ECN_NO_CE , CA_EVENT_ECN_IS_CE , }
e#timespec_type enum timespec_type { TT_NONE = 0 , TT_NATIVE = 1 , TT_COMPAT = 2 , }
e#tls_offload_ctx_dir enum tls_offload_ctx_dir { TLS_OFFLOAD_CTX_DIR_RX , TLS_OFFLOAD_CTX_DIR_TX , }
e#trace_reg enum trace_reg { TRACE_REG_REGISTER , TRACE_REG_UNREGISTER , TRACE_REG_PERF_REGISTER , TRACE_REG_PERF_UNREGISTER , TRACE_REG_PERF_OPEN , TRACE_REG_PERF_CLOSE , TRACE_REG_PERF_ADD , TRACE_REG_PERF_DEL , }
e#ttm_bo_type enum ttm_bo_type { ttm_bo_type_device , ttm_bo_type_kernel , ttm_bo_type_sg }
e#ttm_caching_state enum ttm_caching_state { tt_uncached , tt_wc , tt_cached }
e#uprobe_task_state enum uprobe_task_state { UTASK_RUNNING , UTASK_SSTEP , UTASK_SSTEP_ACK , UTASK_SSTEP_TRAPPED , }
e#uv_bios_cmd enum uv_bios_cmd { UV_BIOS_COMMON , UV_BIOS_GET_SN_INFO , UV_BIOS_FREQ_BASE , UV_BIOS_WATCHLIST_ALLOC , UV_BIOS_WATCHLIST_FREE , UV_BIOS_MEMPROTECT , UV_BIOS_GET_PARTITION_ADDR , UV_BIOS_SET_LEGACY_VGA_TARGET }
e#vtime_state enum vtime_state { VTIME_INACTIVE = 0 , VTIME_USER , VTIME_SYS , }
e#wb_reason enum wb_reason { WB_REASON_BACKGROUND , WB_REASON_VMSCAN , WB_REASON_SYNC , WB_REASON_PERIODIC , WB_REASON_LAPTOP_TIMER , WB_REASON_FREE_MORE_MEM , WB_REASON_FS_FREE_SPACE , WB_REASON_FORKER_THREAD , WB_REASON_FOREIGN_FLUSH , WB_REASON_MAX , }
e#writeback_sync_modes enum writeback_sync_modes { WB_SYNC_NONE , WB_SYNC_ALL , }
e#zone_type enum zone_type { ZONE_DMA , ZONE_DMA32 , ZONE_NORMAL , ZONE_MOVABLE , ZONE_DEVICE , __MAX_NR_ZONES }
elfcorehdr_addr extern unsigned long long elfcorehdr_addr
emergency_restart extern void emergency_restart ( void )
empty_zero_page extern unsigned long empty_zero_page [ ( ( 1UL ) << 12 ) / sizeof ( unsigned long ) ]
end_page_writeback extern void end_page_writeback ( s#page * )
eth_type_trans t#__be16 eth_type_trans ( s#sk_buff * , s#net_device * )
eth_validate_addr int eth_validate_addr ( s#net_device * )
ether_setup void ether_setup ( s#net_device * )
ethtool_op_get_link t#u32 ethtool_op_get_link ( s#net_device * )
event_triggers_call extern e#event_trigger_type event_triggers_call ( s#trace_event_file * , void * , s#ring_buffer_event * )
ex_handler_default __attribute__ ( ( __externally_visible__ ) ) t#bool ex_handler_default ( const s#exception_table_entry * , s#pt_regs * , int , unsigned long , unsigned long )
fasync_helper extern int fasync_helper ( int , s#file * , int , s#fasync_struct * * )
fb_deferred_io_cleanup extern void fb_deferred_io_cleanup ( s#fb_info * )
fb_deferred_io_init extern void fb_deferred_io_init ( s#fb_info * )
fc_attach_transport s#scsi_transport_template * fc_attach_transport ( s#fc_function_template * )
fc_block_scsi_eh int fc_block_scsi_eh ( s#scsi_cmnd * )
fc_eh_timed_out e#blk_eh_timer_return fc_eh_timed_out ( s#scsi_cmnd * )
fc_get_event_number t#u32 fc_get_event_number ( void )
fc_host_post_event void fc_host_post_event ( s#Scsi_Host * , t#u32 , e#fc_host_event_code , t#u32 )
fc_release_transport void fc_release_transport ( s#scsi_transport_template * )
fc_remote_port_add s#fc_rport * fc_remote_port_add ( s#Scsi_Host * , int , s#fc_rport_identifiers * )
fc_remote_port_delete void fc_remote_port_delete ( s#fc_rport * )
fc_remove_host void fc_remove_host ( s#Scsi_Host * )
fget extern s#file * fget ( unsigned int )
fiemap_check_flags int fiemap_check_flags ( s#fiemap_extent_info * , t#u32 )
fiemap_fill_next_extent int fiemap_fill_next_extent ( s#fiemap_extent_info * , t#u64 , t#u64 , t#u64 , t#u32 )
filemap_fault extern t#vm_fault_t filemap_fault ( s#vm_fault * )
filemap_fdatawait_range extern int filemap_fdatawait_range ( s#address_space * , t#loff_t , t#loff_t )
filemap_fdatawrite extern int filemap_fdatawrite ( s#address_space * )
filemap_fdatawrite_range extern int filemap_fdatawrite_range ( s#address_space * , t#loff_t , t#loff_t )
filemap_flush extern int filemap_flush ( s#address_space * )
filemap_write_and_wait extern int filemap_write_and_wait ( s#address_space * )
filemap_write_and_wait_range extern int filemap_write_and_wait_range ( s#address_space * , t#loff_t , t#loff_t )
filp_close extern int filp_close ( s#file * , t#fl_owner_t )
filp_open extern s#file * filp_open ( const char * , int , t#umode_t )
find_first_bit extern unsigned long find_first_bit ( const unsigned long * , unsigned long )
find_first_zero_bit extern unsigned long find_first_zero_bit ( const unsigned long * , unsigned long )
find_get_pid extern s#pid * find_get_pid ( int )
find_next_bit extern unsigned long find_next_bit ( const unsigned long * , unsigned long , unsigned long )
find_pid_ns extern s#pid * find_pid_ns ( int , s#pid_namespace * )
find_vma extern s#vm_area_struct * find_vma ( s#mm_struct * , unsigned long )
find_vpid extern s#pid * find_vpid ( int )
finish_no_open extern int finish_no_open ( s#file * , s#dentry * )
finish_open extern int finish_open ( s#file * , s#dentry * , int ( * ) ( s#inode * , s#file * ) )
finish_wait void finish_wait ( s#wait_queue_head * , s#wait_queue_entry * )
fixed_size_llseek extern t#loff_t fixed_size_llseek ( s#file * , t#loff_t , int , t#loff_t )
flow_get_u32_dst t#__be32 flow_get_u32_dst ( const s#flow_keys * )
flow_get_u32_src t#__be32 flow_get_u32_src ( const s#flow_keys * )
flow_keys_dissector extern s#flow_dissector flow_keys_dissector
flush_signals extern void flush_signals ( s#task_struct * )
flush_work extern t#bool flush_work ( s#work_struct * )
flush_workqueue extern void flush_workqueue ( s#workqueue_struct * )
follow_down_one extern int follow_down_one ( s#path * )
fortify_panic void fortify_panic ( const char * )
fput extern void fput ( s#file * )
free_buffer_head void free_buffer_head ( s#buffer_head * )
free_cpumask_var void free_cpumask_var ( t#cpumask_var_t )
free_irq extern const void * free_irq ( unsigned int , void * )
free_irq_cpu_rmap extern void free_irq_cpu_rmap ( s#cpu_rmap * )
free_netdev void free_netdev ( s#net_device * )
free_pages extern void free_pages ( unsigned long , unsigned int )
freeze_bdev extern s#super_block * freeze_bdev ( s#block_device * )
from_kgid extern t#gid_t from_kgid ( s#user_namespace * , t#kgid_t )
from_kuid extern t#uid_t from_kuid ( s#user_namespace * , t#kuid_t )
fs_bio_set extern s#bio_set fs_bio_set
full_name_hash extern unsigned int __attribute__ ( ( __pure__ ) ) full_name_hash ( const void * , const char * , unsigned int )
gdt_page extern __attribute__ ( ( section ( ".data..percpu" "..page_aligned" ) ) ) __typeof__ ( s#gdt_page ) gdt_page
gen_pool_add_owner extern int gen_pool_add_owner ( s#gen_pool * , unsigned long , t#phys_addr_t , t#size_t , int , void * )
gen_pool_create extern s#gen_pool * gen_pool_create ( int , int )
gen_pool_destroy extern void gen_pool_destroy ( s#gen_pool * )
gen_pool_dma_alloc extern void * gen_pool_dma_alloc ( s#gen_pool * , t#size_t , t#dma_addr_t * )
gen_pool_free_owner extern void gen_pool_free_owner ( s#gen_pool * , unsigned long , t#size_t , void * * )
gen_pool_virt_to_phys extern t#phys_addr_t gen_pool_virt_to_phys ( s#gen_pool * , unsigned long )
generic_block_fiemap extern int generic_block_fiemap ( s#inode * , s#fiemap_extent_info * , t#u64 , t#u64 , t#get_block_t * )
generic_file_direct_write extern t#ssize_t generic_file_direct_write ( s#kiocb * , s#iov_iter * )
generic_file_llseek extern t#loff_t generic_file_llseek ( s#file * , t#loff_t , int )
generic_file_mmap extern int generic_file_mmap ( s#file * , s#vm_area_struct * )
generic_file_open extern int generic_file_open ( s#inode * , s#file * )
generic_file_read_iter extern t#ssize_t generic_file_read_iter ( s#kiocb * , s#iov_iter * )
generic_file_splice_read extern t#ssize_t generic_file_splice_read ( s#file * , t#loff_t * , s#pipe_inode_info * , t#size_t , unsigned int )
generic_file_write_iter extern t#ssize_t generic_file_write_iter ( s#kiocb * , s#iov_iter * )
generic_fillattr extern void generic_fillattr ( s#inode * , s#kstat * )
generic_permission extern int generic_permission ( s#inode * , int )
generic_read_dir extern t#ssize_t generic_read_dir ( s#file * , char * , t#size_t , t#loff_t * )
generic_write_checks extern t#ssize_t generic_write_checks ( s#kiocb * , s#iov_iter * )
get_current_tty extern s#tty_struct * get_current_tty ( void )
get_device extern s#device * get_device ( s#device * )
get_gendisk extern s#gendisk * get_gendisk ( t#dev_t , int * )
get_random_bytes void get_random_bytes ( void * , int )
get_super extern s#super_block * get_super ( s#block_device * )
get_task_mm extern s#mm_struct * get_task_mm ( s#task_struct * )
get_user_pages long get_user_pages ( unsigned long , unsigned long , unsigned int , s#page * * , s#vm_area_struct * * )
get_user_pages_remote long get_user_pages_remote ( s#task_struct * , s#mm_struct * , unsigned long , unsigned long , unsigned int , s#page * * , s#vm_area_struct * * , int * )
get_user_pages_unlocked long get_user_pages_unlocked ( unsigned long , unsigned long , s#page * * , unsigned int )
grab_cache_page_write_begin s#page * grab_cache_page_write_begin ( s#address_space * , unsigned long , unsigned )
high_memory extern void * high_memory
hrtimer_cancel extern int hrtimer_cancel ( s#hrtimer * )
hrtimer_init extern void hrtimer_init ( s#hrtimer * , t#clockid_t , e#hrtimer_mode )
hrtimer_start_range_ns extern void hrtimer_start_range_ns ( s#hrtimer * , t#ktime_t , t#u64 , const e#hrtimer_mode )
hrtimer_try_to_cancel extern int hrtimer_try_to_cancel ( s#hrtimer * )
iget5_locked extern s#inode * iget5_locked ( s#super_block * , unsigned long , int ( * ) ( s#inode * , void * ) , int ( * ) ( s#inode * , void * ) , void * )
iget_locked extern s#inode * iget_locked ( s#super_block * , unsigned long )
igrab extern s#inode * igrab ( s#inode * )
ilookup extern s#inode * ilookup ( s#super_block * , unsigned long )
in4_pton extern int in4_pton ( const char * , int , t#u8 * , int , const char * * )
in_aton extern t#__be32 in_aton ( const char * )
in_egroup_p extern int in_egroup_p ( t#kgid_t )
in_group_p extern int in_group_p ( t#kgid_t )
inc_nlink extern void inc_nlink ( s#inode * )
inet_csk_delete_keepalive_timer void inet_csk_delete_keepalive_timer ( s#sock * )
inet_csk_reset_keepalive_timer void inet_csk_reset_keepalive_timer ( s#sock * , unsigned long )
init_net extern s#net init_net
init_special_inode extern void init_special_inode ( s#inode * , t#umode_t , t#dev_t )
init_task extern s#task_struct init_task
init_timer_key void init_timer_key ( s#timer_list * , void ( * ) ( s#timer_list * ) , unsigned int , const char * , s#lock_class_key * )
init_wait_entry extern void init_wait_entry ( s#wait_queue_entry * , int )
inode_init_once extern void inode_init_once ( s#inode * )
inode_newsize_ok extern int inode_newsize_ok ( const s#inode * , t#loff_t )
inode_permission extern int inode_permission ( s#inode * , int )
input_allocate_device s#input_dev __attribute__ ( ( __warn_unused_result__ ) ) * input_allocate_device ( void )
input_event void input_event ( s#input_dev * , unsigned int , unsigned int , int )
input_free_device void input_free_device ( s#input_dev * )
input_register_device int __attribute__ ( ( __warn_unused_result__ ) ) input_register_device ( s#input_dev * )
input_set_abs_params void input_set_abs_params ( s#input_dev * , unsigned int , int , int , int , int )
input_unregister_device void input_unregister_device ( s#input_dev * )
int_to_scsilun extern void int_to_scsilun ( t#u64 , s#scsi_lun * )
invalidate_bdev extern void invalidate_bdev ( s#block_device * )
invalidate_inode_buffers void invalidate_inode_buffers ( s#inode * )
invalidate_mapping_pages unsigned long invalidate_mapping_pages ( s#address_space * , unsigned long , unsigned long )
invalidate_partition extern int invalidate_partition ( s#gendisk * , int )
io_schedule extern void io_schedule ( void )
ioctl_by_bdev extern int ioctl_by_bdev ( s#block_device * , unsigned , unsigned long )
iomem_resource extern s#resource iomem_resource
ioread32 extern unsigned int ioread32 ( void * )
ioread8 extern unsigned int ioread8 ( void * )
ioremap_nocache extern void * ioremap_nocache ( t#resource_size_t , unsigned long )
iounmap extern void iounmap ( volatile void * )
iov_iter_advance void iov_iter_advance ( s#iov_iter * , t#size_t )
iov_iter_bvec void iov_iter_bvec ( s#iov_iter * , unsigned int , const s#bio_vec * , unsigned long , t#size_t )
iov_iter_get_pages t#ssize_t iov_iter_get_pages ( s#iov_iter * , s#page * * , t#size_t , unsigned , t#size_t * )
iov_iter_init void iov_iter_init ( s#iov_iter * , unsigned int , const s#iovec * , unsigned long , t#size_t )
iov_iter_npages int iov_iter_npages ( const s#iov_iter * , int )
iov_iter_revert void iov_iter_revert ( s#iov_iter * , t#size_t )
iov_iter_single_seg_count t#size_t iov_iter_single_seg_count ( const s#iov_iter * )
iowrite32 extern void iowrite32 ( t#u32 , void * )
iput extern void iput ( s#inode * )
irq_cpu_rmap_add extern int irq_cpu_rmap_add ( s#cpu_rmap * , int )
irq_set_affinity_hint extern int irq_set_affinity_hint ( unsigned int , const s#cpumask * )
irq_to_desc extern s#irq_desc * irq_to_desc ( unsigned int )
is_bad_inode extern t#bool is_bad_inode ( s#inode * )
is_uv_system extern int is_uv_system ( void )
iter_file_splice_write extern t#ssize_t iter_file_splice_write ( s#pipe_inode_info * , s#file * , t#loff_t * , t#size_t , unsigned int )
iterate_dir extern int iterate_dir ( s#file * , s#dir_context * )
iunique extern t#ino_t iunique ( s#super_block * , t#ino_t )
jiffies extern unsigned long volatile __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) , __section__ ( ".data..cacheline_aligned" ) ) ) jiffies
jiffies_to_msecs extern unsigned int jiffies_to_msecs ( const unsigned long )
jiffies_to_timespec64 extern void jiffies_to_timespec64 ( const unsigned long , s#timespec64 * )
jiffies_to_timeval extern void jiffies_to_timeval ( const unsigned long , s#timeval * )
kallsyms_lookup_name unsigned long kallsyms_lookup_name ( const char * )
kallsyms_on_each_symbol int kallsyms_on_each_symbol ( int ( * ) ( void * , const char * , s#module * , unsigned long ) , void * )
kblockd_mod_delayed_work_on int kblockd_mod_delayed_work_on ( int , s#delayed_work * , unsigned long )
kern_path extern int kern_path ( const char * , unsigned , s#path * )
kern_path_create extern s#dentry * kern_path_create ( int , const char * , s#path * , unsigned int )
kernel_accept int kernel_accept ( s#socket * , s#socket * * , int )
kernel_read extern t#ssize_t kernel_read ( s#file * , void * , t#size_t , t#loff_t * )
kernel_recvmsg int kernel_recvmsg ( s#socket * , s#msghdr * , s#kvec * , t#size_t , t#size_t , int )
kernel_sendmsg int kernel_sendmsg ( s#socket * , s#msghdr * , s#kvec * , t#size_t , t#size_t )
kernel_setsockopt int kernel_setsockopt ( s#socket * , int , int , char * , unsigned int )
kernel_sigaction extern void kernel_sigaction ( int , t#__sighandler_t )
kernel_write extern t#ssize_t kernel_write ( s#file * , const void * , t#size_t , t#loff_t * )
kfree void kfree ( const void * )
kfree_link extern void kfree_link ( void * )
kfree_skb void kfree_skb ( s#sk_buff * )
kill_anon_super void kill_anon_super ( s#super_block * )
kill_block_super void kill_block_super ( s#super_block * )
kill_fasync extern void kill_fasync ( s#fasync_struct * * , int , int )
kill_pid extern int kill_pid ( s#pid * , int , int )
kmalloc_caches extern s#kmem_cache * kmalloc_caches [ E#NR_KMALLOC_TYPES ] [ ( 12 + 1 ) + 1 ]
kmalloc_order_trace extern void * kmalloc_order_trace ( t#size_t , t#gfp_t , unsigned int )
kmem_cache_alloc void * kmem_cache_alloc ( s#kmem_cache * , t#gfp_t )
kmem_cache_alloc_node_trace extern void * kmem_cache_alloc_node_trace ( s#kmem_cache * , t#gfp_t , int , t#size_t )
kmem_cache_alloc_trace extern void * kmem_cache_alloc_trace ( s#kmem_cache * , t#gfp_t , t#size_t )
kmem_cache_create s#kmem_cache * kmem_cache_create ( const char * , unsigned int , unsigned int , t#slab_flags_t , void ( * ) ( void * ) )
kmem_cache_create_usercopy s#kmem_cache * kmem_cache_create_usercopy ( const char * , unsigned int , unsigned int , t#slab_flags_t , unsigned int , unsigned , void ( * ) ( void * ) )
kmem_cache_destroy void kmem_cache_destroy ( s#kmem_cache * )
kmem_cache_free void kmem_cache_free ( s#kmem_cache * , void * )
kobject_put extern void kobject_put ( s#kobject * )
kstrtoull int __attribute__ ( ( __warn_unused_result__ ) ) kstrtoull ( const char * , unsigned int , unsigned long long * )
kthread_create_on_node __attribute__ ( ( __format__ ( printf , 4 , 5 ) ) ) s#task_struct * kthread_create_on_node ( int ( * ) ( void * ) , void * , int , const char [ ] , ... )
kthread_should_stop t#bool kthread_should_stop ( void )
kthread_stop int kthread_stop ( s#task_struct * )
ktime_get_coarse_real_ts64 extern void ktime_get_coarse_real_ts64 ( s#timespec64 * )
ktime_get_coarse_ts64 extern void ktime_get_coarse_ts64 ( s#timespec64 * )
ktime_get_raw_ts64 extern void ktime_get_raw_ts64 ( s#timespec64 * )
ktime_get_real_seconds extern t#time64_t ktime_get_real_seconds ( void )
ktime_get_real_ts64 extern void ktime_get_real_ts64 ( s#timespec64 * )
ktime_get_ts64 extern void ktime_get_ts64 ( s#timespec64 * )
load_nls extern s#nls_table * load_nls ( char * )
lock_rename extern s#dentry * lock_rename ( s#dentry * , s#dentry * )
lock_sock_nested void lock_sock_nested ( s#sock * , int )
lockref_get extern void lockref_get ( s#lockref * )
locks_init_lock extern void locks_init_lock ( s#file_lock * )
locks_lock_inode_wait extern int locks_lock_inode_wait ( s#inode * , s#file_lock * )
lookup_address extern t#pte_t * lookup_address ( unsigned long , unsigned int * )
lookup_bdev extern s#block_device * lookup_bdev ( const char * )
lookup_one_len extern s#dentry * lookup_one_len ( const char * , s#dentry * , int )
make_kgid extern t#kgid_t make_kgid ( s#user_namespace * , t#gid_t )
make_kuid extern t#kuid_t make_kuid ( s#user_namespace * , t#uid_t )
map_vm_area extern int map_vm_area ( s#vm_struct * , t#pgprot_t , s#page * * )
mark_page_accessed extern void mark_page_accessed ( s#page * )
match_token int match_token ( char * , const t#match_table_t , t#substring_t [ ] )
mds_idle_clear extern s#static_key_false mds_idle_clear
mem_section extern s#mem_section * * mem_section
memchr extern void * memchr ( const void * , int , t#__kernel_size_t )
memcmp int memcmp ( const void * , const void * , t#size_t )
memcpy extern void * memcpy ( void * , const void * , t#size_t )
memcpy_fromio void memcpy_fromio ( void * , const volatile void * , t#size_t )
memcpy_toio void memcpy_toio ( volatile void * , const void * , t#size_t )
memmove void * memmove ( void * , const void * , t#size_t )
memory_read_from_buffer extern t#ssize_t memory_read_from_buffer ( void * , t#size_t , t#loff_t * , const void * , t#size_t )
mempool_alloc extern void * mempool_alloc ( t#mempool_t * , t#gfp_t )
mempool_alloc_slab void * mempool_alloc_slab ( t#gfp_t , void * )
mempool_create extern t#mempool_t * mempool_create ( int , t#mempool_alloc_t * , t#mempool_free_t * , void * )
mempool_create_node extern t#mempool_t * mempool_create_node ( int , t#mempool_alloc_t * , t#mempool_free_t * , void * , t#gfp_t , int )
mempool_destroy extern void mempool_destroy ( t#mempool_t * )
mempool_free extern void mempool_free ( void * , t#mempool_t * )
mempool_free_slab void mempool_free_slab ( void * , void * )
mempool_resize extern int mempool_resize ( t#mempool_t * , int )
memset void * memset ( void * , int , t#size_t )
misc_deregister extern void misc_deregister ( s#miscdevice * )
misc_register extern int misc_register ( s#miscdevice * )
mmput extern void mmput ( s#mm_struct * )
mmu_notifier_unregister extern void mmu_notifier_unregister ( s#mmu_notifier * , s#mm_struct * )
mntget extern s#vfsmount * mntget ( s#vfsmount * )
mntput extern void mntput ( s#vfsmount * )
mod_timer extern int mod_timer ( s#timer_list * , unsigned long )
module_put extern void module_put ( s#module * )
mount_bdev extern s#dentry * mount_bdev ( s#file_system_type * , int , const char * , void * , int ( * ) ( s#super_block * , void * , int ) )
mount_nodev extern s#dentry * mount_nodev ( s#file_system_type * , int , void * , int ( * ) ( s#super_block * , void * , int ) )
mpage_readpage int mpage_readpage ( s#page * , t#get_block_t )
mpage_readpages int mpage_readpages ( s#address_space * , s#list_head * , unsigned , t#get_block_t )
mpage_writepages int mpage_writepages ( s#address_space * , s#writeback_control * , t#get_block_t )
msleep void msleep ( unsigned int )
msleep_interruptible unsigned long msleep_interruptible ( unsigned int )
mutex_is_locked extern t#bool mutex_is_locked ( s#mutex * )
mutex_trylock extern int mutex_trylock ( s#mutex * )
mutex_unlock extern void mutex_unlock ( s#mutex * )
names_cachep extern s#kmem_cache * names_cachep
napi_complete_done t#bool napi_complete_done ( s#napi_struct * , int )
napi_consume_skb void napi_consume_skb ( s#sk_buff * , int )
napi_disable void napi_disable ( s#napi_struct * )
napi_gro_receive t#gro_result_t napi_gro_receive ( s#napi_struct * , s#sk_buff * )
napi_schedule_prep t#bool napi_schedule_prep ( s#napi_struct * )
net_namespace_list extern s#list_head net_namespace_list
net_ratelimit int net_ratelimit ( void )
netdev_err __attribute__ ( ( __format__ ( printf , 2 , 3 ) ) ) __attribute__ ( ( __cold__ ) ) void netdev_err ( const s#net_device * , const char * , ... )
netdev_info __attribute__ ( ( __format__ ( printf , 2 , 3 ) ) ) __attribute__ ( ( __cold__ ) ) void netdev_info ( const s#net_device * , const char * , ... )
netdev_refcnt_read int netdev_refcnt_read ( const s#net_device * )
netdev_rss_key_fill void netdev_rss_key_fill ( void * , t#size_t )
netdev_warn __attribute__ ( ( __format__ ( printf , 2 , 3 ) ) ) __attribute__ ( ( __cold__ ) ) void netdev_warn ( const s#net_device * , const char * , ... )
netif_carrier_off void netif_carrier_off ( s#net_device * )
netif_carrier_on void netif_carrier_on ( s#net_device * )
netif_napi_add void netif_napi_add ( s#net_device * , s#napi_struct * , int ( * ) ( s#napi_struct * , int ) , int )
netif_napi_del void netif_napi_del ( s#napi_struct * )
netif_receive_skb int netif_receive_skb ( s#sk_buff * )
netif_rx_ni int netif_rx_ni ( s#sk_buff * )
netif_schedule_queue void netif_schedule_queue ( s#netdev_queue * )
netif_set_real_num_rx_queues int netif_set_real_num_rx_queues ( s#net_device * , unsigned int )
netif_set_real_num_tx_queues int netif_set_real_num_tx_queues ( s#net_device * , unsigned int )
netif_set_xps_queue int netif_set_xps_queue ( s#net_device * , const s#cpumask * , t#u16 )
netif_tx_wake_queue void netif_tx_wake_queue ( s#netdev_queue * )
netlink_kernel_release void netlink_kernel_release ( s#sock * )
netlink_unicast int netlink_unicast ( s#sock * , s#sk_buff * , t#__u32 , int )
new_inode extern s#inode * new_inode ( s#super_block * )
nf_register_net_hook int nf_register_net_hook ( s#net * , const s#nf_hook_ops * )
nf_unregister_net_hook void nf_unregister_net_hook ( s#net * , const s#nf_hook_ops * )
nla_put int nla_put ( s#sk_buff * , int , int , const void * )
no_llseek extern t#loff_t no_llseek ( s#file * , t#loff_t , int )
nobh_truncate_page int nobh_truncate_page ( s#address_space * , t#loff_t , t#get_block_t * )
nobh_write_begin int nobh_write_begin ( s#address_space * , t#loff_t , unsigned , unsigned , s#page * * , void * * , t#get_block_t * )
nobh_write_end int nobh_write_end ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * , void * )
nobh_writepage int nobh_writepage ( s#page * , t#get_block_t * , s#writeback_control * )
node_states extern t#nodemask_t node_states [ E#NR_NODE_STATES ]
node_to_cpumask_map extern t#cpumask_var_t node_to_cpumask_map [ ( 1 << 10 ) ]
noop_llseek extern t#loff_t noop_llseek ( s#file * , t#loff_t , int )
notify_change extern int notify_change ( s#dentry * , s#iattr * , s#inode * * )
nr_cpu_ids extern unsigned int nr_cpu_ids
numa_node extern __attribute__ ( ( section ( ".data..percpu" "" ) ) ) __typeof__ ( int ) numa_node
nvme_fc_register_localport int nvme_fc_register_localport ( s#nvme_fc_port_info * , s#nvme_fc_port_template * , s#device * , s#nvme_fc_local_port * * )
nvme_fc_register_remoteport int nvme_fc_register_remoteport ( s#nvme_fc_local_port * , s#nvme_fc_port_info * , s#nvme_fc_remote_port * * )
nvme_fc_set_remoteport_devloss int nvme_fc_set_remoteport_devloss ( s#nvme_fc_remote_port * , t#u32 )
nvme_fc_unregister_localport int nvme_fc_unregister_localport ( s#nvme_fc_local_port * )
nvme_fc_unregister_remoteport int nvme_fc_unregister_remoteport ( s#nvme_fc_remote_port * )
override_creds extern const s#cred * override_creds ( const s#cred * )
page_offset_base extern unsigned long page_offset_base
pagecache_get_page s#page * pagecache_get_page ( s#address_space * , unsigned long , int , t#gfp_t )
pagevec_lookup_range_tag unsigned pagevec_lookup_range_tag ( s#pagevec * , s#address_space * , unsigned long * , unsigned long , t#xa_mark_t )
panic __attribute__ ( ( __format__ ( printf , 1 , 2 ) ) ) void panic ( const char * , ... )
param_array_ops extern const s#kernel_param_ops param_array_ops
param_ops_charp extern const s#kernel_param_ops param_ops_charp
param_ops_int extern const s#kernel_param_ops param_ops_int
param_ops_long extern const s#kernel_param_ops param_ops_long
param_ops_string extern const s#kernel_param_ops param_ops_string
param_ops_uint extern const s#kernel_param_ops param_ops_uint
param_ops_ulong extern const s#kernel_param_ops param_ops_ulong
path_get extern void path_get ( const s#path * )
path_put extern void path_put ( const s#path * )
pci_alloc_irq_vectors_affinity int pci_alloc_irq_vectors_affinity ( s#pci_dev * , unsigned int , unsigned int , unsigned int , s#irq_affinity * )
pci_choose_state t#pci_power_t pci_choose_state ( s#pci_dev * , t#pm_message_t )
pci_disable_device void pci_disable_device ( s#pci_dev * )
pci_disable_msix void pci_disable_msix ( s#pci_dev * )
pci_disable_sriov void pci_disable_sriov ( s#pci_dev * )
pci_enable_device int __attribute__ ( ( __warn_unused_result__ ) ) pci_enable_device ( s#pci_dev * )
pci_enable_device_mem int __attribute__ ( ( __warn_unused_result__ ) ) pci_enable_device_mem ( s#pci_dev * )
pci_enable_msix_range int pci_enable_msix_range ( s#pci_dev * , s#msix_entry * , int , int )
pci_enable_sriov int pci_enable_sriov ( s#pci_dev * , int )
pci_find_ext_capability int pci_find_ext_capability ( s#pci_dev * , int )
pci_free_irq_vectors void pci_free_irq_vectors ( s#pci_dev * )
pci_iomap_range extern void * pci_iomap_range ( s#pci_dev * , int , unsigned long , unsigned long )
pci_iounmap extern void pci_iounmap ( s#pci_dev * , void * )
pci_irq_vector int pci_irq_vector ( s#pci_dev * , unsigned int )
pci_read_config_word int pci_read_config_word ( const s#pci_dev * , int , t#u16 * )
pci_release_regions void pci_release_regions ( s#pci_dev * )
pci_request_regions int __attribute__ ( ( __warn_unused_result__ ) ) pci_request_regions ( s#pci_dev * , const char * )
pci_restore_state void pci_restore_state ( s#pci_dev * )
pci_save_state int pci_save_state ( s#pci_dev * )
pci_set_master void pci_set_master ( s#pci_dev * )
pci_set_power_state int pci_set_power_state ( s#pci_dev * , t#pci_power_t )
pci_unregister_driver void pci_unregister_driver ( s#pci_driver * )
pcie_capability_clear_and_set_word int pcie_capability_clear_and_set_word ( s#pci_dev * , int , t#u16 , t#u16 )
perf_trace_buf_alloc void * perf_trace_buf_alloc ( int , s#pt_regs * * , int * )
perf_trace_run_bpf_submit void perf_trace_run_bpf_submit ( void * , int , int , s#trace_event_call * , t#u64 , s#pt_regs * , s#hlist_head * , s#task_struct * )
pgdir_shift extern unsigned int pgdir_shift
phys_base extern unsigned long phys_base
physical_mask extern t#phys_addr_t physical_mask
pid_task extern s#task_struct * pid_task ( s#pid * , e#pid_type )
platform_device_register extern int platform_device_register ( s#platform_device * )
platform_device_unregister extern void platform_device_unregister ( s#platform_device * )
platform_driver_unregister extern void platform_driver_unregister ( s#platform_driver * )
posix_lock_file extern int posix_lock_file ( s#file * , s#file_lock * , s#file_lock * )
posix_test_lock extern void posix_test_lock ( s#file * , s#file_lock * )
preempt_notifier_dec void preempt_notifier_dec ( void )
preempt_notifier_inc void preempt_notifier_inc ( void )
preempt_notifier_register void preempt_notifier_register ( s#preempt_notifier * )
preempt_notifier_unregister void preempt_notifier_unregister ( s#preempt_notifier * )
prepare_creds extern s#cred * prepare_creds ( void )
prepare_to_wait void prepare_to_wait ( s#wait_queue_head * , s#wait_queue_entry * , int )
prepare_to_wait_event long prepare_to_wait_event ( s#wait_queue_head * , s#wait_queue_entry * , int )
prepare_to_wait_exclusive void prepare_to_wait_exclusive ( s#wait_queue_head * , s#wait_queue_entry * , int )
print_hex_dump extern void print_hex_dump ( const char * , const char * , int , int , int , const void * , t#size_t , t#bool )
printk __attribute__ ( ( __format__ ( printf , 1 , 2 ) ) ) __attribute__ ( ( __cold__ ) ) int printk ( const char * , ... )
proc_create s#proc_dir_entry * proc_create ( const char * , t#umode_t , s#proc_dir_entry * , const s#file_operations * )
proc_create_data extern s#proc_dir_entry * proc_create_data ( const char * , t#umode_t , s#proc_dir_entry * , const s#file_operations * , void * )
proc_mkdir extern s#proc_dir_entry * proc_mkdir ( const char * , s#proc_dir_entry * )
proc_remove extern void proc_remove ( s#proc_dir_entry * )
ptrs_per_p4d extern unsigned int ptrs_per_p4d
put_device extern void put_device ( s#device * )
put_disk extern void put_disk ( s#gendisk * )
put_pid extern void put_pid ( s#pid * )
pv_ops extern s#paravirt_patch_template pv_ops
queue_delayed_work_on extern t#bool queue_delayed_work_on ( int , s#workqueue_struct * , s#delayed_work * , unsigned long )
queue_rcu_work extern t#bool queue_rcu_work ( s#workqueue_struct * , s#rcu_work * )
queue_work_on extern t#bool queue_work_on ( int , s#workqueue_struct * , s#work_struct * )
rb_erase extern void rb_erase ( s#rb_node * , s#rb_root * )
rb_first extern s#rb_node * rb_first ( const s#rb_root * )
rb_insert_color extern void rb_insert_color ( s#rb_node * , s#rb_root * )
rb_next extern s#rb_node * rb_next ( const s#rb_node * )
rb_replace_node extern void rb_replace_node ( s#rb_node * , s#rb_node * , s#rb_root * )
rdmsr_safe_on_cpu int rdmsr_safe_on_cpu ( unsigned int , t#u32 , t#u32 * , t#u32 * )
read_cache_page extern s#page * read_cache_page ( s#address_space * , unsigned long , t#filler_t * , void * )
recalc_sigpending extern void recalc_sigpending ( void )
redirty_page_for_writepage int redirty_page_for_writepage ( s#writeback_control * , s#page * )
register_blkdev extern int register_blkdev ( unsigned int , const char * )
register_chrdev_region extern int register_chrdev_region ( t#dev_t , unsigned , const char * )
register_filesystem extern int register_filesystem ( s#file_system_type * )
register_inet6addr_notifier int register_inet6addr_notifier ( s#notifier_block * )
register_inetaddr_notifier int register_inetaddr_notifier ( s#notifier_block * )
register_netdev int register_netdev ( s#net_device * )
register_netdevice_notifier int register_netdevice_notifier ( s#notifier_block * )
register_reboot_notifier extern int register_reboot_notifier ( s#notifier_block * )
release_pages void release_pages ( s#page * * , int )
release_sock void release_sock ( s#sock * )
remap_pfn_range int remap_pfn_range ( s#vm_area_struct * , unsigned long , unsigned long , unsigned long , t#pgprot_t )
remove_proc_entry extern void remove_proc_entry ( const char * , s#proc_dir_entry * )
remove_wait_queue extern void remove_wait_queue ( s#wait_queue_head * , s#wait_queue_entry * )
request_threaded_irq extern int __attribute__ ( ( __warn_unused_result__ ) ) request_threaded_irq ( unsigned int , t#irq_handler_t , t#irq_handler_t , unsigned long , const char * , void * )
reset_devices extern unsigned int reset_devices
revalidate_disk extern int revalidate_disk ( s#gendisk * )
revert_creds extern void revert_creds ( const s#cred * )
root_device_unregister extern void root_device_unregister ( s#device * )
round_jiffies unsigned long round_jiffies ( unsigned long )
rps_may_expire_flow t#bool rps_may_expire_flow ( s#net_device * , t#u16 , t#u32 , t#u16 )
rtnl_is_locked extern int rtnl_is_locked ( void )
rtnl_lock extern void rtnl_lock ( void )
rtnl_unlock extern void rtnl_unlock ( void )
s#Qdisc@a8f71573 struct Qdisc { int ( * enqueue ) ( s#sk_buff * , s#Qdisc * , s#sk_buff * * ) ; s#sk_buff * ( * dequeue ) ( s#Qdisc * ) ; unsigned int flags ; t#u32 limit ; const s#Qdisc_ops * ops ; s#qdisc_size_table * stab ; s#hlist_node hash ; t#u32 handle ; t#u32 parent ; s#netdev_queue * dev_queue ; s#net_rate_estimator * rate_est ; s#gnet_stats_basic_cpu * cpu_bstats ; s#gnet_stats_queue * cpu_qstats ; int padded ; t#refcount_t refcnt ; s#sk_buff_head gso_skb __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; s#qdisc_skb_head q ; s#gnet_stats_basic_packed bstats ; t#seqcount_t running ; s#gnet_stats_queue qstats ; unsigned long state ; s#Qdisc * next_sched ; s#sk_buff_head skb_bad_txq ; t#spinlock_t busylock __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; t#spinlock_t seqlock ; t#bool empty ; s#callback_head rcu ; }
s#Qdisc@ccf40764 struct Qdisc { UNKNOWN }
s#Qdisc_class_ops struct Qdisc_class_ops { unsigned int flags ; s#netdev_queue * ( * select_queue ) ( s#Qdisc * , s#tcmsg * ) ; int ( * graft ) ( s#Qdisc * , unsigned long , s#Qdisc * , s#Qdisc * * , s#netlink_ext_ack * ) ; s#Qdisc * ( * leaf ) ( s#Qdisc * , unsigned long ) ; void ( * qlen_notify ) ( s#Qdisc * , unsigned long ) ; unsigned long ( * find ) ( s#Qdisc * , t#u32 ) ; int ( * change ) ( s#Qdisc * , t#u32 , t#u32 , s#nlattr * * , unsigned long * , s#netlink_ext_ack * ) ; int ( * delete ) ( s#Qdisc * , unsigned long ) ; void ( * walk ) ( s#Qdisc * , s#qdisc_walker * ) ; s#tcf_block * ( * tcf_block ) ( s#Qdisc * , unsigned long , s#netlink_ext_ack * ) ; unsigned long ( * bind_tcf ) ( s#Qdisc * , unsigned long , t#u32 ) ; void ( * unbind_tcf ) ( s#Qdisc * , unsigned long ) ; int ( * dump ) ( s#Qdisc * , unsigned long , s#sk_buff * , s#tcmsg * ) ; int ( * dump_stats ) ( s#Qdisc * , unsigned long , s#gnet_dump * ) ; }
s#Qdisc_ops struct Qdisc_ops { s#Qdisc_ops * next ; const s#Qdisc_class_ops * cl_ops ; char id [ 16 ] ; int priv_size ; unsigned int static_flags ; int ( * enqueue ) ( s#sk_buff * , s#Qdisc * , s#sk_buff * * ) ; s#sk_buff * ( * dequeue ) ( s#Qdisc * ) ; s#sk_buff * ( * peek ) ( s#Qdisc * ) ; int ( * init ) ( s#Qdisc * , s#nlattr * , s#netlink_ext_ack * ) ; void ( * reset ) ( s#Qdisc * ) ; void ( * destroy ) ( s#Qdisc * ) ; int ( * change ) ( s#Qdisc * , s#nlattr * , s#netlink_ext_ack * ) ; void ( * attach ) ( s#Qdisc * ) ; int ( * change_tx_queue_len ) ( s#Qdisc * , unsigned int ) ; int ( * dump ) ( s#Qdisc * , s#sk_buff * ) ; int ( * dump_stats ) ( s#Qdisc * , s#gnet_dump * ) ; void ( * ingress_block_set ) ( s#Qdisc * , t#u32 ) ; void ( * egress_block_set ) ( s#Qdisc * , t#u32 ) ; t#u32 ( * ingress_block_get ) ( s#Qdisc * ) ; t#u32 ( * egress_block_get ) ( s#Qdisc * ) ; s#module * owner ; }
s#Scsi_Host@4576714a struct Scsi_Host { UNKNOWN }
s#Scsi_Host@87e10e66 struct Scsi_Host { s#list_head __devices ; s#list_head __targets ; s#list_head starved_list ; t#spinlock_t default_lock ; t#spinlock_t * host_lock ; s#mutex scan_mutex ; s#list_head eh_cmd_q ; s#task_struct * ehandler ; s#completion * eh_action ; t#wait_queue_head_t host_wait ; s#scsi_host_template * hostt ; s#scsi_transport_template * transportt ; s#blk_mq_tag_set tag_set ; t#atomic_t host_busy ; t#atomic_t host_blocked ; unsigned int host_failed ; unsigned int host_eh_scheduled ; unsigned int host_no ; int eh_deadline ; unsigned long last_reset ; unsigned int max_channel ; unsigned int max_id ; t#u64 max_lun ; unsigned int unique_id ; unsigned short max_cmd_len ; int this_id ; int can_queue ; short cmd_per_lun ; short unsigned int sg_tablesize ; short unsigned int sg_prot_tablesize ; unsigned int max_sectors ; unsigned int max_segment_size ; unsigned long dma_boundary ; unsigned long virt_boundary_mask ; unsigned nr_hw_queues ; unsigned active_mode : 2 ; unsigned unchecked_isa_dma : 1 ; unsigned host_self_blocked : 1 ; unsigned reverse_ordering : 1 ; unsigned tmf_in_progress : 1 ; unsigned async_scan : 1 ; unsigned eh_noresume : 1 ; unsigned no_write_same : 1 ; unsigned use_cmd_list : 1 ; unsigned short_inquiry : 1 ; unsigned no_scsi2_lun_in_cdb : 1 ; char work_q_name [ 20 ] ; s#workqueue_struct * work_q ; s#workqueue_struct * tmf_work_q ; unsigned int max_host_blocked ; unsigned int prot_capabilities ; unsigned char prot_guard_type ; unsigned long base ; unsigned long io_port ; unsigned char n_io_port ; unsigned char dma_channel ; unsigned int irq ; e#scsi_host_state shost_state ; s#device shost_gendev , shost_dev ; void * shost_data ; s#device * dma_dev ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long hostdata [ 0 ] __attribute__ ( ( aligned ( sizeof ( unsigned long ) ) ) ) ; }
s#__call_single_data struct __call_single_data { s#llist_node llist ; t#smp_call_func_t func ; void * info ; unsigned int flags ; }
s#__drm_connnectors_state struct __drm_connnectors_state { s#drm_connector * ptr ; s#drm_connector_state * state , * old_state , * new_state ; t#s32 * out_fence_ptr ; }
s#__drm_crtcs_state struct __drm_crtcs_state { s#drm_crtc * ptr ; s#drm_crtc_state * state , * old_state , * new_state ; s#drm_crtc_commit * commit ; t#s32 * out_fence_ptr ; t#u64 last_vblank_count ; }
s#__drm_planes_state struct __drm_planes_state { s#drm_plane * ptr ; s#drm_plane_state * state , * old_state , * new_state ; }
s#__drm_private_objs_state struct __drm_private_objs_state { s#drm_private_obj * ptr ; s#drm_private_state * state , * old_state , * new_state ; }
s#__kernel_sockaddr_storage struct __kernel_sockaddr_storage { union { struct { t#__kernel_sa_family_t ss_family ; char __data [ 128 - sizeof ( unsigned short ) ] ; } ; void * __align ; } ; }
s#__kernel_timespec struct __kernel_timespec { t#__kernel_time64_t tv_sec ; long long tv_nsec ; }
s#ablkcipher_alg struct ablkcipher_alg { int ( * setkey ) ( s#crypto_ablkcipher * , const t#u8 * , unsigned int ) ; int ( * encrypt ) ( s#ablkcipher_request * ) ; int ( * decrypt ) ( s#ablkcipher_request * ) ; unsigned int min_keysize ; unsigned int max_keysize ; unsigned int ivsize ; }
s#ablkcipher_request struct ablkcipher_request { s#crypto_async_request base ; unsigned int nbytes ; void * info ; s#scatterlist * src ; s#scatterlist * dst ; void * __ctx [ ] __attribute__ ( ( __aligned__ ( __alignof__ ( unsigned long long ) ) ) ) ; }
s#ablkcipher_tfm struct ablkcipher_tfm { int ( * setkey ) ( s#crypto_ablkcipher * , const t#u8 * , unsigned int ) ; int ( * encrypt ) ( s#ablkcipher_request * ) ; int ( * decrypt ) ( s#ablkcipher_request * ) ; s#crypto_ablkcipher * base ; unsigned int ivsize ; unsigned int reqsize ; }
s#ack_sample struct ack_sample { t#u32 pkts_acked ; t#s32 rtt_us ; t#u32 in_flight ; }
s#acpi_device_id@9537f188 struct acpi_device_id { t#__u8 id [ 9 ] ; t#kernel_ulong_t driver_data ; t#__u32 cls ; t#__u32 cls_msk ; }
s#acpi_device_id@e58a0b4f struct acpi_device_id { UNKNOWN }
s#acpi_generic_address struct acpi_generic_address { t#u8 space_id ; t#u8 bit_width ; t#u8 bit_offset ; t#u8 access_width ; t#u64 address ; }
s#acpi_table_fadt struct acpi_table_fadt { s#acpi_table_header header ; t#u32 facs ; t#u32 dsdt ; t#u8 model ; t#u8 preferred_profile ; t#u16 sci_interrupt ; t#u32 smi_command ; t#u8 acpi_enable ; t#u8 acpi_disable ; t#u8 s4_bios_request ; t#u8 pstate_control ; t#u32 pm1a_event_block ; t#u32 pm1b_event_block ; t#u32 pm1a_control_block ; t#u32 pm1b_control_block ; t#u32 pm2_control_block ; t#u32 pm_timer_block ; t#u32 gpe0_block ; t#u32 gpe1_block ; t#u8 pm1_event_length ; t#u8 pm1_control_length ; t#u8 pm2_control_length ; t#u8 pm_timer_length ; t#u8 gpe0_block_length ; t#u8 gpe1_block_length ; t#u8 gpe1_base ; t#u8 cst_control ; t#u16 c2_latency ; t#u16 c3_latency ; t#u16 flush_size ; t#u16 flush_stride ; t#u8 duty_offset ; t#u8 duty_width ; t#u8 day_alarm ; t#u8 month_alarm ; t#u8 century ; t#u16 boot_flags ; t#u8 reserved ; t#u32 flags ; s#acpi_generic_address reset_register ; t#u8 reset_value ; t#u16 arm_boot_flags ; t#u8 minor_revision ; t#u64 Xfacs ; t#u64 Xdsdt ; s#acpi_generic_address xpm1a_event_block ; s#acpi_generic_address xpm1b_event_block ; s#acpi_generic_address xpm1a_control_block ; s#acpi_generic_address xpm1b_control_block ; s#acpi_generic_address xpm2_control_block ; s#acpi_generic_address xpm_timer_block ; s#acpi_generic_address xgpe0_block ; s#acpi_generic_address xgpe1_block ; s#acpi_generic_address sleep_control ; s#acpi_generic_address sleep_status ; t#u64 hypervisor_id ; }
s#acpi_table_header struct acpi_table_header { char signature [ 4 ] ; t#u32 length ; t#u8 revision ; t#u8 checksum ; char oem_id [ 6 ] ; char oem_table_id [ 8 ] ; t#u32 oem_revision ; char asl_compiler_id [ 4 ] ; t#u32 asl_compiler_revision ; }
s#address_space@349a6ef4 struct address_space { UNKNOWN }
s#address_space@7671788d struct address_space { s#inode * host ; s#xarray i_pages ; t#gfp_t gfp_mask ; t#atomic_t i_mmap_writable ; s#rb_root_cached i_mmap ; s#rw_semaphore i_mmap_rwsem ; unsigned long nrpages ; unsigned long nrexceptional ; unsigned long writeback_index ; const s#address_space_operations * a_ops ; unsigned long flags ; t#errseq_t wb_err ; t#spinlock_t private_lock ; s#list_head private_list ; void * private_data ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#address_space_operations struct address_space_operations { int ( * writepage ) ( s#page * , s#writeback_control * ) ; int ( * readpage ) ( s#file * , s#page * ) ; int ( * writepages ) ( s#address_space * , s#writeback_control * ) ; int ( * set_page_dirty ) ( s#page * ) ; int ( * readpages ) ( s#file * , s#address_space * , s#list_head * , unsigned ) ; int ( * write_begin ) ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * * , void * * ) ; int ( * write_end ) ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * , void * ) ; t#sector_t ( * bmap ) ( s#address_space * , t#sector_t ) ; void ( * invalidatepage ) ( s#page * , unsigned int , unsigned int ) ; int ( * releasepage ) ( s#page * , t#gfp_t ) ; void ( * freepage ) ( s#page * ) ; t#ssize_t ( * direct_IO ) ( s#kiocb * , s#iov_iter * ) ; int ( * migratepage ) ( s#address_space * , s#page * , s#page * , e#migrate_mode ) ; t#bool ( * isolate_page ) ( s#page * , t#isolate_mode_t ) ; void ( * putback_page ) ( s#page * ) ; int ( * launder_page ) ( s#page * ) ; int ( * is_partially_uptodate ) ( s#page * , unsigned long , unsigned long ) ; void ( * is_dirty_writeback ) ( s#page * , t#bool * , t#bool * ) ; int ( * error_remove_page ) ( s#address_space * , s#page * ) ; int ( * swap_activate ) ( s#swap_info_struct * , s#file * , t#sector_t * ) ; void ( * swap_deactivate ) ( s#file * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#aer_stats struct aer_stats { UNKNOWN }
s#agp_bridge_data@9a6c7802 struct agp_bridge_data { const s#agp_version * version ; const s#agp_bridge_driver * driver ; const s#vm_operations_struct * vm_ops ; void * previous_size ; void * current_size ; void * dev_private_data ; s#pci_dev * dev ; t#u32 * gatt_table ; t#u32 * gatt_table_real ; unsigned long scratch_page ; s#page * scratch_page_page ; t#dma_addr_t scratch_page_dma ; unsigned long gart_bus_addr ; unsigned long gatt_bus_addr ; t#u32 mode ; e#chipset_type type ; unsigned long * key_list ; t#atomic_t current_memory_agp ; t#atomic_t agp_in_use ; int max_memory_agp ; int aperture_size_idx ; int capndx ; int flags ; char major_version ; char minor_version ; s#list_head list ; t#u32 apbase_config ; s#list_head mapped_list ; t#spinlock_t mapped_lock ; }
s#agp_bridge_data@d6b34e56 struct agp_bridge_data { UNKNOWN }
s#agp_bridge_driver struct agp_bridge_driver { s#module * owner ; const void * aperture_sizes ; int num_aperture_sizes ; e#aper_size_type size_type ; t#bool cant_use_aperture ; t#bool needs_scratch_page ; const s#gatt_mask * masks ; int ( * fetch_size ) ( void ) ; int ( * configure ) ( void ) ; void ( * agp_enable ) ( s#agp_bridge_data * , t#u32 ) ; void ( * cleanup ) ( void ) ; void ( * tlb_flush ) ( s#agp_memory * ) ; unsigned long ( * mask_memory ) ( s#agp_bridge_data * , t#dma_addr_t , int ) ; void ( * cache_flush ) ( void ) ; int ( * create_gatt_table ) ( s#agp_bridge_data * ) ; int ( * free_gatt_table ) ( s#agp_bridge_data * ) ; int ( * insert_memory ) ( s#agp_memory * , t#off_t , int ) ; int ( * remove_memory ) ( s#agp_memory * , t#off_t , int ) ; s#agp_memory * ( * alloc_by_type ) ( t#size_t , int ) ; void ( * free_by_type ) ( s#agp_memory * ) ; s#page * ( * agp_alloc_page ) ( s#agp_bridge_data * ) ; int ( * agp_alloc_pages ) ( s#agp_bridge_data * , s#agp_memory * , t#size_t ) ; void ( * agp_destroy_page ) ( s#page * , int ) ; void ( * agp_destroy_pages ) ( s#agp_memory * ) ; int ( * agp_type_to_mask_type ) ( s#agp_bridge_data * , int ) ; }
s#agp_kern_info struct agp_kern_info { s#agp_version version ; s#pci_dev * device ; e#chipset_type chipset ; unsigned long mode ; unsigned long aper_base ; t#size_t aper_size ; int max_memory ; int current_memory ; t#bool cant_use_aperture ; unsigned long page_mask ; const s#vm_operations_struct * vm_ops ; }
s#agp_memory struct agp_memory { s#agp_memory * next ; s#agp_memory * prev ; s#agp_bridge_data * bridge ; s#page * * pages ; t#size_t page_count ; int key ; int num_scratch_pages ; t#off_t pg_start ; t#u32 type ; t#u32 physical ; t#bool is_bound ; t#bool is_flushed ; s#list_head mapped_list ; s#scatterlist * sg_list ; int num_sg ; }
s#agp_version struct agp_version { t#u16 major ; t#u16 minor ; }
s#anon_vma@84d343d7 struct anon_vma { s#anon_vma * root ; s#rw_semaphore rwsem ; t#atomic_t refcount ; unsigned degree ; s#anon_vma * parent ; s#rb_root_cached rb_root ; }
s#anon_vma@ca7d7321 struct anon_vma { UNKNOWN }
s#aperture struct aperture { t#resource_size_t base ; t#resource_size_t size ; }
s#apertures_struct struct apertures_struct { unsigned int count ; s#aperture ranges [ 0 ] ; }
s#arch_hw_breakpoint struct arch_hw_breakpoint { unsigned long address ; unsigned long mask ; t#u8 len ; t#u8 type ; }
s#arch_tlbflush_unmap_batch struct arch_tlbflush_unmap_batch { s#cpumask cpumask ; }
s#arch_uprobe_task struct arch_uprobe_task { unsigned long saved_scratch_register ; unsigned int saved_trap_nr ; unsigned int saved_tf ; }
s#assoc_array struct assoc_array { s#assoc_array_ptr * root ; unsigned long nr_leaves_on_tree ; }
s#assoc_array_ptr struct assoc_array_ptr { UNKNOWN }
s#attribute struct attribute { const char * name ; t#umode_t mode ; t#bool ignore_lockdep : 1 ; s#lock_class_key * key ; s#lock_class_key skey ; }
s#attribute_container struct attribute_container { s#list_head node ; s#klist containers ; s#class * class ; const s#attribute_group * grp ; s#device_attribute * * attrs ; int ( * match ) ( s#attribute_container * , s#device * ) ; unsigned long flags ; }
s#attribute_group struct attribute_group { const char * name ; t#umode_t ( * is_visible ) ( s#kobject * , s#attribute * , int ) ; t#umode_t ( * is_bin_visible ) ( s#kobject * , s#bin_attribute * , int ) ; s#attribute * * attrs ; s#bin_attribute * * bin_attrs ; }
s#audit_aux_data struct audit_aux_data { UNKNOWN }
s#audit_cap_data struct audit_cap_data { t#kernel_cap_t permitted ; t#kernel_cap_t inheritable ; union { unsigned int fE ; t#kernel_cap_t effective ; } ; t#kernel_cap_t ambient ; t#kuid_t rootid ; }
s#audit_context@382c83ee struct audit_context { UNKNOWN }
s#audit_context@8c79b08f struct audit_context { int dummy ; int in_syscall ; e#audit_state state , current_state ; unsigned int serial ; int major ; s#timespec64 ctime ; unsigned long argv [ 4 ] ; long return_code ; t#u64 prio ; int return_valid ; s#audit_names preallocated_names [ 5 ] ; int name_count ; s#list_head names_list ; char * filterkey ; s#path pwd ; s#audit_aux_data * aux ; s#audit_aux_data * aux_pids ; s#__kernel_sockaddr_storage * sockaddr ; t#size_t sockaddr_len ; t#pid_t pid , ppid ; t#kuid_t uid , euid , suid , fsuid ; t#kgid_t gid , egid , sgid , fsgid ; unsigned long personality ; int arch ; t#pid_t target_pid ; t#kuid_t target_auid ; t#kuid_t target_uid ; unsigned int target_sessionid ; t#u32 target_sid ; char target_comm [ 16 ] ; s#audit_tree_refs * trees , * first_trees ; s#list_head killed_trees ; int tree_count ; int type ; union { struct { int nargs ; long args [ 6 ] ; } socketcall ; struct { t#kuid_t uid ; t#kgid_t gid ; t#umode_t mode ; t#u32 osid ; int has_perm ; t#uid_t perm_uid ; t#gid_t perm_gid ; t#umode_t perm_mode ; unsigned long qbytes ; } ipc ; struct { t#mqd_t mqdes ; s#mq_attr mqstat ; } mq_getsetattr ; struct { t#mqd_t mqdes ; int sigev_signo ; } mq_notify ; struct { t#mqd_t mqdes ; t#size_t msg_len ; unsigned int msg_prio ; s#timespec64 abs_timeout ; } mq_sendrecv ; struct { int oflag ; t#umode_t mode ; s#mq_attr attr ; } mq_open ; struct { t#pid_t pid ; s#audit_cap_data cap ; } capset ; struct { int fd ; int flags ; } mmap ; struct { int argc ; } execve ; struct { char * name ; } module ; struct { s#audit_ntp_data ntp_data ; s#timespec64 tk_injoffset ; } time ; } ; int fds [ 2 ] ; s#audit_proctitle proctitle ; }
s#audit_names@7d86a629 struct audit_names { UNKNOWN }
s#audit_names@aeaa93f5 struct audit_names { s#list_head list ; s#filename * name ; int name_len ; t#bool hidden ; unsigned long ino ; t#dev_t dev ; t#umode_t mode ; t#kuid_t uid ; t#kgid_t gid ; t#dev_t rdev ; t#u32 osid ; s#audit_cap_data fcap ; unsigned int fcap_ver ; unsigned char type ; t#bool should_free ; }
s#audit_ntp_data struct audit_ntp_data { s#audit_ntp_val vals [ E#AUDIT_NTP_NVALS ] ; }
s#audit_ntp_val struct audit_ntp_val { long long oldval , newval ; }
s#audit_proctitle struct audit_proctitle { int len ; char * value ; }
s#audit_tree_refs struct audit_tree_refs { UNKNOWN }
s#auth_cred struct auth_cred { const s#cred * cred ; const char * principal ; }
s#auth_domain struct auth_domain { s#kref ref ; s#hlist_node hash ; char * name ; s#auth_ops * flavour ; s#callback_head callback_head ; }
s#auth_ops struct auth_ops { char * name ; s#module * owner ; int flavour ; int ( * accept ) ( s#svc_rqst * , t#__be32 * ) ; int ( * release ) ( s#svc_rqst * ) ; void ( * domain_release ) ( s#auth_domain * ) ; int ( * set_client ) ( s#svc_rqst * ) ; }
s#backing_dev_info@338fca9c struct backing_dev_info { UNKNOWN }
s#backing_dev_info@455abe82 struct backing_dev_info { t#u64 id ; s#rb_node rb_node ; s#list_head bdi_list ; unsigned long ra_pages ; unsigned long io_pages ; t#congested_fn * congested_fn ; void * congested_data ; const char * name ; s#kref refcnt ; unsigned int capabilities ; unsigned int min_ratio ; unsigned int max_ratio , max_prop_frac ; t#atomic_long_t tot_write_bandwidth ; s#bdi_writeback wb ; s#list_head wb_list ; s#xarray cgwb_tree ; s#rb_root cgwb_congested_tree ; s#mutex cgwb_release_mutex ; s#rw_semaphore wb_switch_rwsem ; t#wait_queue_head_t wb_waitq ; s#device * dev ; s#device * owner ; s#timer_list laptop_mode_wb_timer ; s#dentry * debug_dir ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#backlight_device struct backlight_device { s#backlight_properties props ; s#mutex update_lock ; s#mutex ops_lock ; const s#backlight_ops * ops ; s#notifier_block fb_notif ; s#list_head entry ; s#device dev ; t#bool fb_bl_on [ 32 ] ; int use_count ; }
s#backlight_ops struct backlight_ops { unsigned int options ; int ( * update_status ) ( s#backlight_device * ) ; int ( * get_brightness ) ( s#backlight_device * ) ; int ( * check_fb ) ( s#backlight_device * , s#fb_info * ) ; }
s#backlight_properties struct backlight_properties { int brightness ; int max_brightness ; int power ; int fb_blank ; e#backlight_type type ; unsigned int state ; e#backlight_scale scale ; }
s#badblocks@7e65f071 struct badblocks { UNKNOWN }
s#badblocks@e8137038 struct badblocks { s#device * dev ; int count ; int unacked_exist ; int shift ; t#u64 * page ; int changed ; t#seqlock_t lock ; t#sector_t sector ; t#sector_t size ; }
s#bdi_writeback@6b721080 struct bdi_writeback { UNKNOWN }
s#bdi_writeback@ee17abf1 struct bdi_writeback { s#backing_dev_info * bdi ; unsigned long state ; unsigned long last_old_flush ; s#list_head b_dirty ; s#list_head b_io ; s#list_head b_more_io ; s#list_head b_dirty_time ; t#spinlock_t list_lock ; s#percpu_counter stat [ E#NR_WB_STAT_ITEMS ] ; s#bdi_writeback_congested * congested ; unsigned long bw_time_stamp ; unsigned long dirtied_stamp ; unsigned long written_stamp ; unsigned long write_bandwidth ; unsigned long avg_write_bandwidth ; unsigned long dirty_ratelimit ; unsigned long balanced_dirty_ratelimit ; s#fprop_local_percpu completions ; int dirty_exceeded ; e#wb_reason start_all_reason ; t#spinlock_t work_lock ; s#list_head work_list ; s#delayed_work dwork ; unsigned long dirty_sleep ; s#list_head bdi_node ; s#percpu_ref refcnt ; s#fprop_local_percpu memcg_completions ; s#cgroup_subsys_state * memcg_css ; s#cgroup_subsys_state * blkcg_css ; s#list_head memcg_node ; s#list_head blkcg_node ; union { s#work_struct release_work ; s#callback_head rcu ; } ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#bdi_writeback_congested struct bdi_writeback_congested { unsigned long state ; t#refcount_t refcnt ; s#backing_dev_info * __bdi ; int blkcg_id ; s#rb_node rb_node ; }
s#bin_attribute struct bin_attribute { s#attribute attr ; t#size_t size ; void * private ; t#ssize_t ( * read ) ( s#file * , s#kobject * , s#bin_attribute * , char * , t#loff_t , t#size_t ) ; t#ssize_t ( * write ) ( s#file * , s#kobject * , s#bin_attribute * , char * , t#loff_t , t#size_t ) ; int ( * mmap ) ( s#file * , s#kobject * , s#bin_attribute * , s#vm_area_struct * ) ; }
s#bio@df82b024 struct bio { UNKNOWN }
s#bio@e54780c0 struct bio { s#bio * bi_next ; s#gendisk * bi_disk ; unsigned int bi_opf ; unsigned short bi_flags ; unsigned short bi_ioprio ; unsigned short bi_write_hint ; t#blk_status_t bi_status ; t#u8 bi_partno ; s#bvec_iter bi_iter ; t#atomic_t __bi_remaining ; t#bio_end_io_t * bi_end_io ; void * bi_private ; s#blkcg_gq * bi_blkg ; s#bio_issue bi_issue ; union { s#bio_integrity_payload * bi_integrity ; } ; unsigned short bi_vcnt ; unsigned short bi_max_vecs ; t#atomic_t __bi_cnt ; s#bio_vec * bi_io_vec ; s#bio_set * bi_pool ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; s#bio_vec bi_inline_vecs [ 0 ] ; }
s#bio_integrity_payload struct bio_integrity_payload { s#bio * bip_bio ; s#bvec_iter bip_iter ; unsigned short bip_slab ; unsigned short bip_vcnt ; unsigned short bip_max_vcnt ; unsigned short bip_flags ; s#bvec_iter bio_iter ; s#work_struct bip_work ; s#bio_vec * bip_vec ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; s#bio_vec bip_inline_vecs [ 0 ] ; }
s#bio_issue struct bio_issue { t#u64 value ; }
s#bio_list@9189344b struct bio_list { UNKNOWN }
s#bio_list@d0a28660 struct bio_list { s#bio * head ; s#bio * tail ; }
s#bio_set struct bio_set { s#kmem_cache * bio_slab ; unsigned int front_pad ; t#mempool_t bio_pool ; t#mempool_t bvec_pool ; t#mempool_t bio_integrity_pool ; t#mempool_t bvec_integrity_pool ; t#spinlock_t rescue_lock ; s#bio_list rescue_list ; s#work_struct rescue_work ; s#workqueue_struct * rescue_workqueue ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#bio_vec@a2ebfa8f struct bio_vec { UNKNOWN }
s#bio_vec@e60777b1 struct bio_vec { s#page * bv_page ; unsigned int bv_len ; unsigned int bv_offset ; }
s#blk_flush_queue@3ad62766 struct blk_flush_queue { unsigned int flush_queue_delayed : 1 ; unsigned int flush_pending_idx : 1 ; unsigned int flush_running_idx : 1 ; t#blk_status_t rq_status ; unsigned long flush_pending_since ; s#list_head flush_queue [ 2 ] ; s#list_head flush_data_in_flight ; s#request * flush_rq ; s#request * orig_rq ; s#lock_class_key key ; t#spinlock_t mq_flush_lock ; }
s#blk_flush_queue@4aaf6b7c struct blk_flush_queue { UNKNOWN }
s#blk_integrity struct blk_integrity { const s#blk_integrity_profile * profile ; unsigned char flags ; unsigned char tuple_size ; unsigned char interval_exp ; unsigned char tag_size ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#blk_integrity_iter struct blk_integrity_iter { void * prot_buf ; void * data_buf ; t#sector_t seed ; unsigned int data_size ; unsigned short interval ; const char * disk_name ; }
s#blk_integrity_profile struct blk_integrity_profile { t#integrity_processing_fn * generate_fn ; t#integrity_processing_fn * verify_fn ; t#integrity_prepare_fn * prepare_fn ; t#integrity_complete_fn * complete_fn ; const char * name ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#blk_mq_alloc_data@d4c09bd3 struct blk_mq_alloc_data { s#request_queue * q ; t#blk_mq_req_flags_t flags ; unsigned int shallow_depth ; unsigned int cmd_flags ; s#blk_mq_ctx * ctx ; s#blk_mq_hw_ctx * hctx ; }
s#blk_mq_alloc_data@f0c73be0 struct blk_mq_alloc_data { UNKNOWN }
s#blk_mq_ctx@1fedf6a6 struct blk_mq_ctx { struct { t#spinlock_t lock ; s#list_head rq_lists [ E#HCTX_MAX_TYPES ] ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; unsigned int cpu ; unsigned short index_hw [ E#HCTX_MAX_TYPES ] ; s#blk_mq_hw_ctx * hctxs [ E#HCTX_MAX_TYPES ] ; unsigned long rq_dispatched [ 2 ] ; unsigned long rq_merged ; unsigned long __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) rq_completed [ 2 ] ; s#request_queue * queue ; s#blk_mq_ctxs * ctxs ; s#kobject kobj ; }
s#blk_mq_ctx@a9e7a7e1 struct blk_mq_ctx { UNKNOWN }
s#blk_mq_ctxs struct blk_mq_ctxs { s#kobject kobj ; s#blk_mq_ctx * queue_ctx ; }
s#blk_mq_debugfs_attr@26a35b37 struct blk_mq_debugfs_attr { UNKNOWN }
s#blk_mq_debugfs_attr@9913c52c struct blk_mq_debugfs_attr { const char * name ; t#umode_t mode ; int ( * show ) ( void * , s#seq_file * ) ; t#ssize_t ( * write ) ( void * , const char * , t#size_t , t#loff_t * ) ; const s#seq_operations * seq_ops ; }
s#blk_mq_hw_ctx@161034f1 struct blk_mq_hw_ctx { UNKNOWN }
s#blk_mq_hw_ctx@c9d2e390 struct blk_mq_hw_ctx { struct { t#spinlock_t lock ; s#list_head dispatch ; unsigned long state ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; s#delayed_work run_work ; t#cpumask_var_t cpumask ; int next_cpu ; int next_cpu_batch ; unsigned long flags ; void * sched_data ; s#request_queue * queue ; s#blk_flush_queue * fq ; void * driver_data ; s#sbitmap ctx_map ; s#blk_mq_ctx * dispatch_from ; unsigned int dispatch_busy ; unsigned short type ; unsigned short nr_ctx ; s#blk_mq_ctx * * ctxs ; t#spinlock_t dispatch_wait_lock ; t#wait_queue_entry_t dispatch_wait ; t#atomic_t wait_index ; s#blk_mq_tags * tags ; s#blk_mq_tags * sched_tags ; unsigned long queued ; unsigned long run ; unsigned long dispatched [ 7 ] ; unsigned int numa_node ; unsigned int queue_num ; t#atomic_t nr_active ; s#hlist_node cpuhp_dead ; s#kobject kobj ; unsigned long poll_considered ; unsigned long poll_invoked ; unsigned long poll_success ; s#dentry * debugfs_dir ; s#dentry * sched_debugfs_dir ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; s#list_head hctx_list ; s#srcu_struct srcu [ 0 ] ; }
s#blk_mq_ops@af0c83e7 struct blk_mq_ops { t#queue_rq_fn * queue_rq ; t#commit_rqs_fn * commit_rqs ; t#get_budget_fn * get_budget ; t#put_budget_fn * put_budget ; t#timeout_fn * timeout ; t#poll_fn * poll ; t#complete_fn * complete ; t#init_hctx_fn * init_hctx ; t#exit_hctx_fn * exit_hctx ; t#init_request_fn * init_request ; t#exit_request_fn * exit_request ; void ( * initialize_rq_fn ) ( s#request * ) ; t#cleanup_rq_fn * cleanup_rq ; t#busy_fn * busy ; t#map_queues_fn * map_queues ; void ( * show_rq ) ( s#seq_file * , s#request * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#blk_mq_ops@b0c59979 struct blk_mq_ops { UNKNOWN }
s#blk_mq_queue_data struct blk_mq_queue_data { s#request * rq ; t#bool last ; unsigned long uek_reserved1 ; }
s#blk_mq_queue_map struct blk_mq_queue_map { unsigned int * mq_map ; unsigned int nr_queues ; unsigned int queue_offset ; }
s#blk_mq_tag_set@1cc4433c struct blk_mq_tag_set { UNKNOWN }
s#blk_mq_tag_set@7fcc4b92 struct blk_mq_tag_set { s#blk_mq_queue_map map [ E#HCTX_MAX_TYPES ] ; unsigned int nr_maps ; const s#blk_mq_ops * ops ; unsigned int nr_hw_queues ; unsigned int queue_depth ; unsigned int reserved_tags ; unsigned int cmd_size ; int numa_node ; unsigned int timeout ; unsigned int flags ; void * driver_data ; s#blk_mq_tags * * tags ; s#mutex tag_list_lock ; s#list_head tag_list ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#blk_mq_tags@78ab9fcb struct blk_mq_tags { UNKNOWN }
s#blk_mq_tags@94882faa struct blk_mq_tags { unsigned int nr_tags ; unsigned int nr_reserved_tags ; t#atomic_t active_queues ; s#sbitmap_queue bitmap_tags ; s#sbitmap_queue breserved_tags ; s#request * * rqs ; s#request * * static_rqs ; s#list_head page_list ; }
s#blk_plug@804d8ff3 struct blk_plug { s#list_head mq_list ; s#list_head cb_list ; unsigned short rq_count ; t#bool multiple_queues ; }
s#blk_plug@e2161b61 struct blk_plug { UNKNOWN }
s#blk_queue_stats struct blk_queue_stats { UNKNOWN }
s#blk_rq_stat struct blk_rq_stat { t#u64 mean ; t#u64 min ; t#u64 max ; t#u32 nr_samples ; t#u64 batch ; }
s#blk_stat_callback@153642c5 struct blk_stat_callback { s#list_head list ; s#timer_list timer ; s#blk_rq_stat * cpu_stat ; int ( * bucket_fn ) ( const s#request * ) ; unsigned int buckets ; s#blk_rq_stat * stat ; void ( * timer_fn ) ( s#blk_stat_callback * ) ; void * data ; s#callback_head rcu ; }
s#blk_stat_callback@4f234dfa struct blk_stat_callback { UNKNOWN }
s#blk_trace@cc1dd338 struct blk_trace { int trace_state ; s#rchan * rchan ; unsigned long * sequence ; unsigned char * msg_data ; t#u16 act_mask ; t#u64 start_lba ; t#u64 end_lba ; t#u32 pid ; t#u32 dev ; s#dentry * dir ; s#dentry * dropped_file ; s#dentry * msg_file ; s#list_head running_list ; t#atomic_t dropped ; }
s#blk_trace@ed399ad7 struct blk_trace { UNKNOWN }
s#blk_zone struct blk_zone { t#__u64 start ; t#__u64 len ; t#__u64 wp ; t#__u8 type ; t#__u8 cond ; t#__u8 non_seq ; t#__u8 reset ; t#__u8 reserved [ 36 ] ; }
s#blkcg struct blkcg { s#cgroup_subsys_state css ; t#spinlock_t lock ; s#xarray blkg_tree ; s#blkcg_gq * blkg_hint ; s#hlist_head blkg_list ; s#blkcg_policy_data * cpd [ 5 ] ; s#list_head all_blkcgs_node ; s#list_head cgwb_list ; t#refcount_t cgwb_refcnt ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#blkcg_gq@5d57e740 struct blkcg_gq { UNKNOWN }
s#blkcg_gq@5d8f5c98 struct blkcg_gq { s#request_queue * q ; s#list_head q_node ; s#hlist_node blkcg_node ; s#blkcg * blkcg ; s#bdi_writeback_congested * wb_congested ; s#blkcg_gq * parent ; s#percpu_ref refcnt ; t#bool online ; s#blkg_rwstat stat_bytes ; s#blkg_rwstat stat_ios ; s#blkg_policy_data * pd [ 5 ] ; t#spinlock_t async_bio_lock ; s#bio_list async_bios ; s#work_struct async_bio_work ; t#atomic_t use_delay ; t#atomic64_t delay_nsec ; t#atomic64_t delay_start ; t#u64 last_delay ; int last_use ; s#callback_head callback_head ; }
s#blkcg_policy_data struct blkcg_policy_data { s#blkcg * blkcg ; int plid ; }
s#blkcipher_alg struct blkcipher_alg { int ( * setkey ) ( s#crypto_tfm * , const t#u8 * , unsigned int ) ; int ( * encrypt ) ( s#blkcipher_desc * , s#scatterlist * , s#scatterlist * , unsigned int ) ; int ( * decrypt ) ( s#blkcipher_desc * , s#scatterlist * , s#scatterlist * , unsigned int ) ; unsigned int min_keysize ; unsigned int max_keysize ; unsigned int ivsize ; }
s#blkcipher_desc struct blkcipher_desc { s#crypto_blkcipher * tfm ; void * info ; t#u32 flags ; }
s#blkcipher_tfm struct blkcipher_tfm { void * iv ; int ( * setkey ) ( s#crypto_tfm * , const t#u8 * , unsigned int ) ; int ( * encrypt ) ( s#blkcipher_desc * , s#scatterlist * , s#scatterlist * , unsigned int ) ; int ( * decrypt ) ( s#blkcipher_desc * , s#scatterlist * , s#scatterlist * , unsigned int ) ; }
s#blkg_policy_data struct blkg_policy_data { s#blkcg_gq * blkg ; int plid ; }
s#blkg_rwstat struct blkg_rwstat { s#percpu_counter cpu_cnt [ E#BLKG_RWSTAT_NR ] ; t#atomic64_t aux_cnt [ E#BLKG_RWSTAT_NR ] ; }
s#block_device struct block_device { t#dev_t bd_dev ; int bd_openers ; s#inode * bd_inode ; s#super_block * bd_super ; s#mutex bd_mutex ; void * bd_claiming ; void * bd_holder ; int bd_holders ; t#bool bd_write_holder ; s#list_head bd_holder_disks ; s#block_device * bd_contains ; unsigned bd_block_size ; t#u8 bd_partno ; s#hd_struct * bd_part ; unsigned bd_part_count ; int bd_invalidated ; s#gendisk * bd_disk ; s#request_queue * bd_queue ; s#backing_dev_info * bd_bdi ; s#list_head bd_list ; unsigned long bd_private ; int bd_fsfreeze_count ; s#mutex bd_fsfreeze_mutex ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#block_device_operations@08e6d986 struct block_device_operations { int ( * open ) ( s#block_device * , t#fmode_t ) ; void ( * release ) ( s#gendisk * , t#fmode_t ) ; int ( * rw_page ) ( s#block_device * , t#sector_t , s#page * , unsigned int ) ; int ( * ioctl ) ( s#block_device * , t#fmode_t , unsigned , unsigned long ) ; int ( * compat_ioctl ) ( s#block_device * , t#fmode_t , unsigned , unsigned long ) ; unsigned int ( * check_events ) ( s#gendisk * , unsigned int ) ; int ( * media_changed ) ( s#gendisk * ) ; void ( * unlock_native_capacity ) ( s#gendisk * ) ; int ( * revalidate_disk ) ( s#gendisk * ) ; int ( * getgeo ) ( s#block_device * , s#hd_geometry * ) ; void ( * swap_slot_free_notify ) ( s#block_device * , unsigned long ) ; int ( * report_zones ) ( s#gendisk * , t#sector_t , s#blk_zone * , unsigned int * ) ; s#module * owner ; const s#pr_ops * pr_ops ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#block_device_operations@e76b186a struct block_device_operations { UNKNOWN }
s#blocking_notifier_head struct blocking_notifier_head { s#rw_semaphore rwsem ; s#notifier_block * head ; }
s#bpf_cgroup_storage struct bpf_cgroup_storage { union { s#bpf_storage_buffer * buf ; void * percpu_buf ; } ; s#bpf_cgroup_storage_map * map ; s#bpf_cgroup_storage_key key ; s#list_head list ; s#rb_node node ; s#callback_head rcu ; }
s#bpf_cgroup_storage_key struct bpf_cgroup_storage_key { t#__u64 cgroup_inode_id ; t#__u32 attach_type ; }
s#bpf_cgroup_storage_map struct bpf_cgroup_storage_map { UNKNOWN }
s#bpf_func_info struct bpf_func_info { t#__u32 insn_off ; t#__u32 type_id ; }
s#bpf_insn struct bpf_insn { t#__u8 code ; t#__u8 dst_reg : 4 ; t#__u8 src_reg : 4 ; t#__s16 off ; t#__s32 imm ; }
s#bpf_line_info struct bpf_line_info { t#__u32 insn_off ; t#__u32 file_name_off ; t#__u32 line_off ; t#__u32 line_col ; }
s#bpf_map struct bpf_map { const s#bpf_map_ops * ops __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; s#bpf_map * inner_map_meta ; void * security ; e#bpf_map_type map_type ; t#u32 key_size ; t#u32 value_size ; t#u32 max_entries ; t#u32 map_flags ; int spin_lock_off ; t#u32 id ; int numa_node ; t#u32 btf_key_type_id ; t#u32 btf_value_type_id ; s#btf * btf ; s#bpf_map_memory memory ; t#bool unpriv_array ; t#bool frozen ; t#atomic_t refcnt __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; t#atomic_t usercnt ; s#work_struct work ; char name [ 16U ] ; }
s#bpf_map_dev_ops struct bpf_map_dev_ops { int ( * map_get_next_key ) ( s#bpf_offloaded_map * , void * , void * ) ; int ( * map_lookup_elem ) ( s#bpf_offloaded_map * , void * , void * ) ; int ( * map_update_elem ) ( s#bpf_offloaded_map * , void * , void * , t#u64 ) ; int ( * map_delete_elem ) ( s#bpf_offloaded_map * , void * ) ; }
s#bpf_map_memory struct bpf_map_memory { t#u32 pages ; s#user_struct * user ; }
s#bpf_map_ops struct bpf_map_ops { int ( * map_alloc_check ) ( u#bpf_attr * ) ; s#bpf_map * ( * map_alloc ) ( u#bpf_attr * ) ; void ( * map_release ) ( s#bpf_map * , s#file * ) ; void ( * map_free ) ( s#bpf_map * ) ; int ( * map_get_next_key ) ( s#bpf_map * , void * , void * ) ; void ( * map_release_uref ) ( s#bpf_map * ) ; void * ( * map_lookup_elem_sys_only ) ( s#bpf_map * , void * ) ; void * ( * map_lookup_elem ) ( s#bpf_map * , void * ) ; int ( * map_update_elem ) ( s#bpf_map * , void * , void * , t#u64 ) ; int ( * map_delete_elem ) ( s#bpf_map * , void * ) ; int ( * map_push_elem ) ( s#bpf_map * , void * , t#u64 ) ; int ( * map_pop_elem ) ( s#bpf_map * , void * ) ; int ( * map_peek_elem ) ( s#bpf_map * , void * ) ; void * ( * map_fd_get_ptr ) ( s#bpf_map * , s#file * , int ) ; void ( * map_fd_put_ptr ) ( void * ) ; t#u32 ( * map_gen_lookup ) ( s#bpf_map * , s#bpf_insn * ) ; t#u32 ( * map_fd_sys_lookup_elem ) ( void * ) ; void ( * map_seq_show_elem ) ( s#bpf_map * , void * , s#seq_file * ) ; int ( * map_check_btf ) ( const s#bpf_map * , const s#btf * , const s#btf_type * , const s#btf_type * ) ; int ( * map_direct_value_addr ) ( const s#bpf_map * , t#u64 * , t#u32 ) ; int ( * map_direct_value_meta ) ( const s#bpf_map * , t#u64 , t#u32 * ) ; }
s#bpf_offload_dev struct bpf_offload_dev { UNKNOWN }
s#bpf_offloaded_map struct bpf_offloaded_map { s#bpf_map map ; s#net_device * netdev ; const s#bpf_map_dev_ops * dev_ops ; void * dev_priv ; s#list_head offloads ; }
s#bpf_prog@3425efb4 struct bpf_prog { UNKNOWN }
s#bpf_prog@a43ba637 struct bpf_prog { t#u16 pages ; t#u16 jited : 1 , jit_requested : 1 , gpl_compatible : 1 , cb_access : 1 , dst_needed : 1 , blinded : 1 , is_func : 1 , kprobe_override : 1 , has_callchain_buf : 1 , enforce_expected_attach_type : 1 ; e#bpf_prog_type type ; e#bpf_attach_type expected_attach_type ; t#u32 len ; t#u32 jited_len ; t#u8 tag [ 8 ] ; s#bpf_prog_aux * aux ; s#sock_fprog_kern * orig_prog ; unsigned int ( * bpf_func ) ( const void * , const s#bpf_insn * ) ; union { s#sock_filter insns [ 0 ] ; s#bpf_insn insnsi [ 0 ] ; } ; }
s#bpf_prog_array struct bpf_prog_array { s#callback_head rcu ; s#bpf_prog_array_item items [ 0 ] ; }
s#bpf_prog_array_item struct bpf_prog_array_item { s#bpf_prog * prog ; s#bpf_cgroup_storage * cgroup_storage [ E#__BPF_CGROUP_STORAGE_MAX ] ; }
s#bpf_prog_aux struct bpf_prog_aux { t#atomic_t refcnt ; t#u32 used_map_cnt ; t#u32 max_ctx_offset ; t#u32 max_pkt_offset ; t#u32 max_tp_access ; t#u32 stack_depth ; t#u32 id ; t#u32 func_cnt ; t#u32 func_idx ; t#bool verifier_zext ; t#bool offload_requested ; s#bpf_prog * * func ; void * jit_data ; s#latch_tree_node ksym_tnode ; s#list_head ksym_lnode ; const s#bpf_prog_ops * ops ; s#bpf_map * * used_maps ; s#bpf_prog * prog ; s#user_struct * user ; t#u64 load_time ; s#bpf_map * cgroup_storage [ E#__BPF_CGROUP_STORAGE_MAX ] ; char name [ 16U ] ; void * security ; s#bpf_prog_offload * offload ; s#btf * btf ; s#bpf_func_info * func_info ; s#bpf_line_info * linfo ; void * * jited_linfo ; t#u32 func_info_cnt ; t#u32 nr_linfo ; t#u32 linfo_idx ; s#bpf_prog_stats * stats ; union { s#work_struct work ; s#callback_head rcu ; } ; }
s#bpf_prog_offload struct bpf_prog_offload { s#bpf_prog * prog ; s#net_device * netdev ; s#bpf_offload_dev * offdev ; void * dev_priv ; s#list_head offloads ; t#bool dev_state ; t#bool opt_failed ; void * jited_image ; t#u32 jited_len ; }
s#bpf_prog_ops struct bpf_prog_ops { int ( * test_run ) ( s#bpf_prog * , const u#bpf_attr * , u#bpf_attr * ) ; }
s#bpf_prog_stats struct bpf_prog_stats { t#u64 cnt ; t#u64 nsecs ; s#u64_stats_sync syncp ; }
s#bpf_raw_event_map struct bpf_raw_event_map { s#tracepoint * tp ; void * bpf_func ; t#u32 num_args ; t#u32 writable_size ; }
s#bpf_sk_storage struct bpf_sk_storage { UNKNOWN }
s#bpf_storage_buffer struct bpf_storage_buffer { s#callback_head rcu ; char data [ 0 ] ; }
s#bsg_buffer struct bsg_buffer { unsigned int payload_len ; int sg_cnt ; s#scatterlist * sg_list ; }
s#bsg_class_device struct bsg_class_device { s#device * class_dev ; int minor ; s#request_queue * queue ; const s#bsg_ops * ops ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#bsg_job@20bb26f8 struct bsg_job { s#device * dev ; s#kref kref ; unsigned int timeout ; void * request ; void * reply ; unsigned int request_len ; unsigned int reply_len ; s#bsg_buffer request_payload ; s#bsg_buffer reply_payload ; int result ; unsigned int reply_payload_rcv_len ; s#request * bidi_rq ; s#bio * bidi_bio ; void * dd_data ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#bsg_job@9d4baa3e struct bsg_job { UNKNOWN }
s#bsg_ops struct bsg_ops { int ( * check_proto ) ( s#sg_io_v4 * ) ; int ( * fill_hdr ) ( s#request * , s#sg_io_v4 * , t#fmode_t ) ; int ( * complete_rq ) ( s#request * , s#sg_io_v4 * ) ; void ( * free_rq ) ( s#request * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#btf struct btf { UNKNOWN }
s#btf_type@21423afe struct btf_type { UNKNOWN }
s#btf_type@61b0218c struct btf_type { t#__u32 name_off ; t#__u32 info ; union { t#__u32 size ; t#__u32 type ; } ; }
s#bucket_table@6a272079 struct bucket_table { UNKNOWN }
s#bucket_table@c560ef84 struct bucket_table { unsigned int size ; unsigned int nest ; t#u32 hash_rnd ; s#list_head walkers ; s#callback_head rcu ; s#bucket_table * future_tbl ; s#lockdep_map dep_map ; s#rhash_lock_head * buckets [ ] __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; }
s#buffer_head struct buffer_head { unsigned long b_state ; s#buffer_head * b_this_page ; s#page * b_page ; t#sector_t b_blocknr ; t#size_t b_size ; char * b_data ; s#block_device * b_bdev ; t#bh_end_io_t * b_end_io ; void * b_private ; s#list_head b_assoc_buffers ; s#address_space * b_assoc_map ; t#atomic_t b_count ; }
s#bug_entry struct bug_entry { signed int bug_addr_disp ; signed int file_disp ; unsigned short line ; unsigned short flags ; }
s#bus_type struct bus_type { const char * name ; const char * dev_name ; s#device * dev_root ; const s#attribute_group * * bus_groups ; const s#attribute_group * * dev_groups ; const s#attribute_group * * drv_groups ; int ( * match ) ( s#device * , s#device_driver * ) ; int ( * uevent ) ( s#device * , s#kobj_uevent_env * ) ; int ( * probe ) ( s#device * ) ; int ( * remove ) ( s#device * ) ; void ( * shutdown ) ( s#device * ) ; int ( * online ) ( s#device * ) ; int ( * offline ) ( s#device * ) ; int ( * suspend ) ( s#device * , t#pm_message_t ) ; int ( * resume ) ( s#device * ) ; int ( * num_vf ) ( s#device * ) ; int ( * dma_configure ) ( s#device * ) ; const s#dev_pm_ops * pm ; const s#iommu_ops * iommu_ops ; s#subsys_private * p ; s#lock_class_key lock_key ; t#bool need_parent_lock ; }
s#bvec_iter struct bvec_iter { t#sector_t bi_sector ; unsigned int bi_size ; unsigned int bi_idx ; unsigned int bi_bvec_done ; }
s#cache_deferred_req struct cache_deferred_req { s#hlist_node hash ; s#list_head recent ; s#cache_head * item ; void * owner ; void ( * revisit ) ( s#cache_deferred_req * , int ) ; }
s#cache_head struct cache_head { s#hlist_node cache_list ; t#time_t expiry_time ; t#time_t last_refresh ; s#kref ref ; unsigned long flags ; }
s#cache_req struct cache_req { s#cache_deferred_req * ( * defer ) ( s#cache_req * ) ; int thread_wait ; }
s#callback_head struct callback_head { s#callback_head * next ; void ( * func ) ( s#callback_head * ) ; }
s#can_dev_rcv_lists@3263b8e3 struct can_dev_rcv_lists { s#hlist_head rx [ E#RX_MAX ] ; s#hlist_head rx_sff [ ( 1 << 11 ) ] ; s#hlist_head rx_eff [ ( 1 << 10 ) ] ; int entries ; }
s#can_dev_rcv_lists@f9a3495b struct can_dev_rcv_lists { UNKNOWN }
s#can_pkg_stats@88f99a3e struct can_pkg_stats { unsigned long jiffies_init ; unsigned long rx_frames ; unsigned long tx_frames ; unsigned long matches ; unsigned long total_rx_rate ; unsigned long total_tx_rate ; unsigned long total_rx_match_ratio ; unsigned long current_rx_rate ; unsigned long current_tx_rate ; unsigned long current_rx_match_ratio ; unsigned long max_rx_rate ; unsigned long max_tx_rate ; unsigned long max_rx_match_ratio ; unsigned long rx_frames_delta ; unsigned long tx_frames_delta ; unsigned long matches_delta ; }
s#can_pkg_stats@b6fbe87d struct can_pkg_stats { UNKNOWN }
s#can_rcv_lists_stats@666de8e2 struct can_rcv_lists_stats { unsigned long stats_reset ; unsigned long user_reset ; unsigned long rcv_entries ; unsigned long rcv_entries_max ; }
s#can_rcv_lists_stats@7dc788d5 struct can_rcv_lists_stats { UNKNOWN }
s#capture_control@6270f693 struct capture_control { s#compact_control * cc ; s#page * page ; }
s#capture_control@e8ae89d1 struct capture_control { UNKNOWN }
s#cdev@581f6d64 struct cdev { s#kobject kobj ; s#module * owner ; const s#file_operations * ops ; s#list_head list ; t#dev_t dev ; unsigned int count ; }
s#cdev@69ffcaf2 struct cdev { UNKNOWN }
s#cee_pfc struct cee_pfc { t#__u8 willing ; t#__u8 error ; t#__u8 pfc_en ; t#__u8 tcs_supported ; }
s#cee_pg struct cee_pg { t#__u8 willing ; t#__u8 error ; t#__u8 pg_en ; t#__u8 tcs_supported ; t#__u8 pg_bw [ 8 ] ; t#__u8 prio_pg [ 8 ] ; }
s#cfg80211_bss struct cfg80211_bss { s#ieee80211_channel * channel ; e#nl80211_bss_scan_width scan_width ; const s#cfg80211_bss_ies * ies ; const s#cfg80211_bss_ies * beacon_ies ; const s#cfg80211_bss_ies * proberesp_ies ; s#cfg80211_bss * hidden_beacon_bss ; s#cfg80211_bss * transmitted_bss ; s#list_head nontrans_list ; t#s32 signal ; t#u16 beacon_interval ; t#u16 capability ; t#u8 bssid [ 6 ] ; t#u8 chains ; t#s8 chain_signal [ 4 ] ; t#u8 bssid_index ; t#u8 max_bssid_indicator ; t#u8 priv [ 0 ] __attribute__ ( ( __aligned__ ( sizeof ( void * ) ) ) ) ; }
s#cfg80211_bss_ies struct cfg80211_bss_ies { t#u64 tsf ; s#callback_head callback_head ; int len ; t#bool from_beacon ; t#u8 data [ ] ; }
s#cfg80211_bss_select_adjust struct cfg80211_bss_select_adjust { e#nl80211_band band ; t#s8 delta ; }
s#cfg80211_bss_selection struct cfg80211_bss_selection { e#nl80211_bss_select_attr behaviour ; union { e#nl80211_band band_pref ; s#cfg80211_bss_select_adjust adjust ; } param ; }
s#cfg80211_cached_keys@8d6b3ce0 struct cfg80211_cached_keys { UNKNOWN }
s#cfg80211_cached_keys@dc6ed8ac struct cfg80211_cached_keys { s#key_params params [ 4 ] ; t#u8 data [ 4 ] [ E#WLAN_KEY_LEN_WEP104 ] ; int def ; }
s#cfg80211_chan_def struct cfg80211_chan_def { s#ieee80211_channel * chan ; e#nl80211_chan_width width ; t#u32 center_freq1 ; t#u32 center_freq2 ; s#ieee80211_edmg edmg ; }
s#cfg80211_conn struct cfg80211_conn { UNKNOWN }
s#cfg80211_connect_params struct cfg80211_connect_params { s#ieee80211_channel * channel ; s#ieee80211_channel * channel_hint ; const t#u8 * bssid ; const t#u8 * bssid_hint ; const t#u8 * ssid ; t#size_t ssid_len ; e#nl80211_auth_type auth_type ; const t#u8 * ie ; t#size_t ie_len ; t#bool privacy ; e#nl80211_mfp mfp ; s#cfg80211_crypto_settings crypto ; const t#u8 * key ; t#u8 key_len , key_idx ; t#u32 flags ; int bg_scan_period ; s#ieee80211_ht_cap ht_capa ; s#ieee80211_ht_cap ht_capa_mask ; s#ieee80211_vht_cap vht_capa ; s#ieee80211_vht_cap vht_capa_mask ; t#bool pbss ; s#cfg80211_bss_selection bss_select ; const t#u8 * prev_bssid ; const t#u8 * fils_erp_username ; t#size_t fils_erp_username_len ; const t#u8 * fils_erp_realm ; t#size_t fils_erp_realm_len ; t#u16 fils_erp_next_seq_num ; const t#u8 * fils_erp_rrk ; t#size_t fils_erp_rrk_len ; t#bool want_1x ; s#ieee80211_edmg edmg ; }
s#cfg80211_cqm_config@87a84d51 struct cfg80211_cqm_config { t#u32 rssi_hyst ; t#s32 last_rssi_event_value ; int n_rssi_thresholds ; t#s32 rssi_thresholds [ 0 ] ; }
s#cfg80211_cqm_config@cac5e26f struct cfg80211_cqm_config { UNKNOWN }
s#cfg80211_crypto_settings struct cfg80211_crypto_settings { t#u32 wpa_versions ; t#u32 cipher_group ; int n_ciphers_pairwise ; t#u32 ciphers_pairwise [ 5 ] ; int n_akm_suites ; t#u32 akm_suites [ 2 ] ; t#bool control_port ; t#__be16 control_port_ethertype ; t#bool control_port_no_encrypt ; t#bool control_port_over_nl80211 ; s#key_params * wep_keys ; int wep_tx_key ; const t#u8 * psk ; const t#u8 * sae_pwd ; t#u8 sae_pwd_len ; }
s#cfg80211_ibss_params struct cfg80211_ibss_params { const t#u8 * ssid ; const t#u8 * bssid ; s#cfg80211_chan_def chandef ; const t#u8 * ie ; t#u8 ssid_len , ie_len ; t#u16 beacon_interval ; t#u32 basic_rates ; t#bool channel_fixed ; t#bool privacy ; t#bool control_port ; t#bool control_port_over_nl80211 ; t#bool userspace_handles_dfs ; int mcast_rate [ E#NUM_NL80211_BANDS ] ; s#ieee80211_ht_cap ht_capa ; s#ieee80211_ht_cap ht_capa_mask ; s#key_params * wep_keys ; int wep_tx_key ; }
s#cfg80211_internal_bss@3cf81328 struct cfg80211_internal_bss { s#list_head list ; s#list_head hidden_list ; s#rb_node rbn ; t#u64 ts_boottime ; unsigned long ts ; unsigned long refcount ; t#atomic_t hold ; t#u64 parent_tsf ; t#u8 parent_bssid [ 6 ] __attribute__ ( ( __aligned__ ( 2 ) ) ) ; s#cfg80211_bss pub ; }
s#cfg80211_internal_bss@aa6240ed struct cfg80211_internal_bss { UNKNOWN }
s#cfg80211_match_set struct cfg80211_match_set { s#cfg80211_ssid ssid ; t#u8 bssid [ 6 ] ; t#s32 rssi_thold ; t#s32 per_band_rssi_thold [ E#NUM_NL80211_BANDS ] ; }
s#cfg80211_pkt_pattern struct cfg80211_pkt_pattern { const t#u8 * mask , * pattern ; int pattern_len ; int pkt_offset ; }
s#cfg80211_pmsr_capabilities struct cfg80211_pmsr_capabilities { unsigned int max_peers ; t#u8 report_ap_tsf : 1 , randomize_mac_addr : 1 ; struct { t#u32 preambles ; t#u32 bandwidths ; t#s8 max_bursts_exponent ; t#u8 max_ftms_per_burst ; t#u8 supported : 1 , asap : 1 , non_asap : 1 , request_lci : 1 , request_civicloc : 1 ; } ftm ; }
s#cfg80211_sched_scan_plan struct cfg80211_sched_scan_plan { t#u32 interval ; t#u32 iterations ; }
s#cfg80211_sched_scan_request struct cfg80211_sched_scan_request { t#u64 reqid ; s#cfg80211_ssid * ssids ; int n_ssids ; t#u32 n_channels ; e#nl80211_bss_scan_width scan_width ; const t#u8 * ie ; t#size_t ie_len ; t#u32 flags ; s#cfg80211_match_set * match_sets ; int n_match_sets ; t#s32 min_rssi_thold ; t#u32 delay ; s#cfg80211_sched_scan_plan * scan_plans ; int n_scan_plans ; t#u8 mac_addr [ 6 ] __attribute__ ( ( __aligned__ ( 2 ) ) ) ; t#u8 mac_addr_mask [ 6 ] __attribute__ ( ( __aligned__ ( 2 ) ) ) ; t#bool relative_rssi_set ; t#s8 relative_rssi ; s#cfg80211_bss_select_adjust rssi_adjust ; s#wiphy * wiphy ; s#net_device * dev ; unsigned long scan_start ; t#bool report_results ; s#callback_head callback_head ; t#u32 owner_nlportid ; t#bool nl_owner_dead ; s#list_head list ; s#ieee80211_channel * channels [ 0 ] ; }
s#cfg80211_ssid struct cfg80211_ssid { t#u8 ssid [ 32 ] ; t#u8 ssid_len ; }
s#cfg80211_wowlan struct cfg80211_wowlan { t#bool any , disconnect , magic_pkt , gtk_rekey_failure , eap_identity_req , four_way_handshake , rfkill_release ; s#cfg80211_pkt_pattern * patterns ; s#cfg80211_wowlan_tcp * tcp ; int n_patterns ; s#cfg80211_sched_scan_request * nd_config ; }
s#cfg80211_wowlan_tcp struct cfg80211_wowlan_tcp { s#socket * sock ; t#__be32 src , dst ; t#u16 src_port , dst_port ; t#u8 dst_mac [ 6 ] ; int payload_len ; const t#u8 * payload ; s#nl80211_wowlan_tcp_data_seq payload_seq ; t#u32 data_interval ; t#u32 wake_len ; const t#u8 * wake_data , * wake_mask ; t#u32 tokens_size ; s#nl80211_wowlan_tcp_data_token payload_tok ; }
s#cfs_bandwidth struct cfs_bandwidth { t#raw_spinlock_t lock ; t#ktime_t period ; t#u64 quota ; t#u64 runtime ; t#s64 hierarchical_quota ; t#u8 idle ; t#u8 period_active ; t#u8 distribute_running ; t#u8 slack_started ; s#hrtimer period_timer ; s#hrtimer slack_timer ; s#list_head throttled_cfs_rq ; int nr_periods ; int nr_throttled ; t#u64 throttled_time ; }
s#cfs_rq@517e95b8 struct cfs_rq { s#load_weight load ; unsigned long runnable_weight ; unsigned int nr_running ; unsigned int h_nr_running ; unsigned int idle_h_nr_running ; t#u64 exec_clock ; t#u64 min_vruntime ; s#rb_root_cached tasks_timeline ; s#sched_entity * curr ; s#sched_entity * next ; s#sched_entity * last ; s#sched_entity * skip ; unsigned int nr_spread_over ; s#sched_avg avg ; struct { t#raw_spinlock_t lock __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; int nr ; unsigned long load_avg ; unsigned long util_avg ; unsigned long runnable_sum ; } removed ; unsigned long tg_load_avg_contrib ; long propagate ; long prop_runnable_sum ; unsigned long h_load ; t#u64 last_h_load_update ; s#sched_entity * h_load_next ; s#rq * rq ; int on_list ; s#list_head leaf_cfs_rq_list ; s#task_group * tg ; int runtime_enabled ; t#s64 runtime_remaining ; t#u64 throttled_clock ; t#u64 throttled_clock_task ; t#u64 throttled_clock_task_time ; int throttled ; int throttle_count ; s#list_head throttled_list ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#cfs_rq@b985a5b8 struct cfs_rq { UNKNOWN }
s#cftype struct cftype { char name [ 64 ] ; unsigned long private ; t#size_t max_write_len ; unsigned int flags ; unsigned int file_offset ; s#cgroup_subsys * ss ; s#list_head node ; s#kernfs_ops * kf_ops ; int ( * open ) ( s#kernfs_open_file * ) ; void ( * release ) ( s#kernfs_open_file * ) ; t#u64 ( * read_u64 ) ( s#cgroup_subsys_state * , s#cftype * ) ; t#s64 ( * read_s64 ) ( s#cgroup_subsys_state * , s#cftype * ) ; int ( * seq_show ) ( s#seq_file * , void * ) ; void * ( * seq_start ) ( s#seq_file * , t#loff_t * ) ; void * ( * seq_next ) ( s#seq_file * , void * , t#loff_t * ) ; void ( * seq_stop ) ( s#seq_file * , void * ) ; int ( * write_u64 ) ( s#cgroup_subsys_state * , s#cftype * , t#u64 ) ; int ( * write_s64 ) ( s#cgroup_subsys_state * , s#cftype * , t#s64 ) ; t#ssize_t ( * write ) ( s#kernfs_open_file * , char * , t#size_t , t#loff_t ) ; t#__poll_t ( * poll ) ( s#kernfs_open_file * , s#poll_table_struct * ) ; s#lock_class_key lockdep_key ; }
s#cgroup struct cgroup { s#cgroup_subsys_state self ; unsigned long flags ; int id ; int level ; int max_depth ; int nr_descendants ; int nr_dying_descendants ; int max_descendants ; int nr_populated_csets ; int nr_populated_domain_children ; int nr_populated_threaded_children ; int nr_threaded_children ; s#kernfs_node * kn ; s#cgroup_file procs_file ; s#cgroup_file events_file ; t#u16 subtree_control ; t#u16 subtree_ss_mask ; t#u16 old_subtree_control ; t#u16 old_subtree_ss_mask ; s#cgroup_subsys_state * subsys [ E#CGROUP_SUBSYS_COUNT ] ; s#cgroup_root * root ; s#list_head cset_links ; s#list_head e_csets [ E#CGROUP_SUBSYS_COUNT ] ; s#cgroup * dom_cgrp ; s#cgroup * old_dom_cgrp ; s#cgroup_rstat_cpu * rstat_cpu ; s#list_head rstat_css_list ; s#cgroup_base_stat pending_bstat ; s#cgroup_base_stat bstat ; s#prev_cputime prev_cputime ; s#list_head pidlists ; s#mutex pidlist_mutex ; t#wait_queue_head_t offline_waitq ; s#work_struct release_agent_work ; s#psi_group psi ; s#cgroup_bpf bpf ; t#atomic_t congestion_count ; s#cgroup_freezer_state freezer ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; int ancestor_ids [ ] ; }
s#cgroup_base_stat struct cgroup_base_stat { s#task_cputime cputime ; }
s#cgroup_bpf struct cgroup_bpf { s#bpf_prog_array * effective [ E#__MAX_BPF_ATTACH_TYPE ] ; s#list_head progs [ E#__MAX_BPF_ATTACH_TYPE ] ; t#u32 flags [ E#__MAX_BPF_ATTACH_TYPE ] ; s#bpf_prog_array * inactive ; s#percpu_ref refcnt ; s#work_struct release_work ; }
s#cgroup_file struct cgroup_file { s#kernfs_node * kn ; unsigned long notified_at ; s#timer_list notify_timer ; }
s#cgroup_freezer_state struct cgroup_freezer_state { t#bool freeze ; int e_freeze ; int nr_frozen_descendants ; int nr_frozen_tasks ; }
s#cgroup_namespace@64e94de2 struct cgroup_namespace { t#refcount_t count ; s#ns_common ns ; s#user_namespace * user_ns ; s#ucounts * ucounts ; s#css_set * root_cset ; }
s#cgroup_namespace@b9b52aeb struct cgroup_namespace { UNKNOWN }
s#cgroup_root struct cgroup_root { s#kernfs_root * kf_root ; unsigned int subsys_mask ; int hierarchy_id ; s#cgroup cgrp ; int cgrp_ancestor_id_storage ; t#atomic_t nr_cgrps ; s#list_head root_list ; unsigned int flags ; s#idr cgroup_idr ; char release_agent_path [ 4096 ] ; char name [ 64 ] ; }
s#cgroup_rstat_cpu struct cgroup_rstat_cpu { s#u64_stats_sync bsync ; s#cgroup_base_stat bstat ; s#cgroup_base_stat last_bstat ; s#cgroup * updated_children ; s#cgroup * updated_next ; }
s#cgroup_subsys struct cgroup_subsys { s#cgroup_subsys_state * ( * css_alloc ) ( s#cgroup_subsys_state * ) ; int ( * css_online ) ( s#cgroup_subsys_state * ) ; void ( * css_offline ) ( s#cgroup_subsys_state * ) ; void ( * css_released ) ( s#cgroup_subsys_state * ) ; void ( * css_free ) ( s#cgroup_subsys_state * ) ; void ( * css_reset ) ( s#cgroup_subsys_state * ) ; void ( * css_rstat_flush ) ( s#cgroup_subsys_state * , int ) ; int ( * css_extra_stat_show ) ( s#seq_file * , s#cgroup_subsys_state * ) ; int ( * can_attach ) ( s#cgroup_taskset * ) ; void ( * cancel_attach ) ( s#cgroup_taskset * ) ; void ( * attach ) ( s#cgroup_taskset * ) ; void ( * post_attach ) ( void ) ; int ( * can_fork ) ( s#task_struct * ) ; void ( * cancel_fork ) ( s#task_struct * ) ; void ( * fork ) ( s#task_struct * ) ; void ( * exit ) ( s#task_struct * ) ; void ( * release ) ( s#task_struct * ) ; void ( * bind ) ( s#cgroup_subsys_state * ) ; t#bool early_init : 1 ; t#bool implicit_on_dfl : 1 ; t#bool threaded : 1 ; t#bool broken_hierarchy : 1 ; t#bool warned_broken_hierarchy : 1 ; int id ; const char * name ; const char * legacy_name ; s#cgroup_root * root ; s#idr css_idr ; s#list_head cfts ; s#cftype * dfl_cftypes ; s#cftype * legacy_cftypes ; unsigned int depends_on ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#cgroup_subsys_state@9592e946 struct cgroup_subsys_state { UNKNOWN }
s#cgroup_subsys_state@afae38ff struct cgroup_subsys_state { s#cgroup * cgroup ; s#cgroup_subsys * ss ; s#percpu_ref refcnt ; s#list_head sibling ; s#list_head children ; s#list_head rstat_css_node ; int id ; unsigned int flags ; t#u64 serial_nr ; t#atomic_t online_cnt ; s#work_struct destroy_work ; s#rcu_work destroy_rwork ; s#cgroup_subsys_state * parent ; }
s#cgroup_taskset@1a4c4a87 struct cgroup_taskset { UNKNOWN }
s#cgroup_taskset@290e8e31 struct cgroup_taskset { s#list_head src_csets ; s#list_head dst_csets ; int nr_tasks ; int ssid ; s#list_head * csets ; s#css_set * cur_cset ; s#task_struct * cur_task ; }
s#ch_sched_params struct ch_sched_params { t#s8 type ; union { struct { t#s8 level ; t#s8 mode ; t#s8 rateunit ; t#s8 ratemode ; t#s8 channel ; t#s8 class ; t#s32 minrate ; t#s32 maxrate ; t#s16 weight ; t#s16 pktsize ; } params ; } u ; }
s#cipher_alg struct cipher_alg { unsigned int cia_min_keysize ; unsigned int cia_max_keysize ; int ( * cia_setkey ) ( s#crypto_tfm * , const t#u8 * , unsigned int ) ; void ( * cia_encrypt ) ( s#crypto_tfm * , t#u8 * , const t#u8 * ) ; void ( * cia_decrypt ) ( s#crypto_tfm * , t#u8 * , const t#u8 * ) ; }
s#cipher_context struct cipher_context { char * iv ; char * rec_seq ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#cipher_tfm struct cipher_tfm { int ( * cit_setkey ) ( s#crypto_tfm * , const t#u8 * , unsigned int ) ; void ( * cit_encrypt_one ) ( s#crypto_tfm * , t#u8 * , const t#u8 * ) ; void ( * cit_decrypt_one ) ( s#crypto_tfm * , t#u8 * , const t#u8 * ) ; }
s#class struct class { const char * name ; s#module * owner ; const s#attribute_group * * class_groups ; const s#attribute_group * * dev_groups ; s#kobject * dev_kobj ; int ( * dev_uevent ) ( s#device * , s#kobj_uevent_env * ) ; char * ( * devnode ) ( s#device * , t#umode_t * ) ; void ( * class_release ) ( s#class * ) ; void ( * dev_release ) ( s#device * ) ; int ( * shutdown_pre ) ( s#device * ) ; const s#kobj_ns_type_operations * ns_type ; const void * ( * namespace ) ( s#device * ) ; void ( * get_ownership ) ( s#device * , t#kuid_t * , t#kgid_t * ) ; const s#dev_pm_ops * pm ; s#subsys_private * p ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#cma struct cma { UNKNOWN }
s#compact_control struct compact_control { s#list_head freepages ; s#list_head migratepages ; unsigned int nr_freepages ; unsigned int nr_migratepages ; unsigned long free_pfn ; unsigned long migrate_pfn ; unsigned long fast_start_pfn ; s#zone * zone ; unsigned long total_migrate_scanned ; unsigned long total_free_scanned ; unsigned short fast_search_fail ; short search_order ; const t#gfp_t gfp_mask ; int order ; int migratetype ; const unsigned int alloc_flags ; const int classzone_idx ; e#migrate_mode mode ; t#bool ignore_skip_hint ; t#bool no_set_skip_hint ; t#bool ignore_block_suitable ; t#bool direct_compaction ; t#bool whole_zone ; t#bool contended ; t#bool rescan ; }
s#compat_robust_list struct compat_robust_list { t#compat_uptr_t next ; }
s#compat_robust_list_head@320188e6 struct compat_robust_list_head { s#compat_robust_list list ; t#compat_long_t futex_offset ; t#compat_uptr_t list_op_pending ; }
s#compat_robust_list_head@d2202b4f struct compat_robust_list_head { UNKNOWN }
s#completion struct completion { unsigned int done ; t#wait_queue_head_t wait ; }
s#compress_alg struct compress_alg { int ( * coa_compress ) ( s#crypto_tfm * , const t#u8 * , unsigned int , t#u8 * , unsigned int * ) ; int ( * coa_decompress ) ( s#crypto_tfm * , const t#u8 * , unsigned int , t#u8 * , unsigned int * ) ; }
s#compress_tfm struct compress_tfm { int ( * cot_compress ) ( s#crypto_tfm * , const t#u8 * , unsigned int , t#u8 * , unsigned int * ) ; int ( * cot_decompress ) ( s#crypto_tfm * , const t#u8 * , unsigned int , t#u8 * , unsigned int * ) ; }
s#cond_snapshot struct cond_snapshot { void * cond_data ; t#cond_update_fn_t update ; }
s#core_state struct core_state { t#atomic_t nr_threads ; s#core_thread dumper ; s#completion startup ; }
s#core_thread struct core_thread { s#task_struct * task ; s#core_thread * next ; }
s#coredump_params struct coredump_params { const t#kernel_siginfo_t * siginfo ; s#pt_regs * regs ; s#file * file ; unsigned long limit ; unsigned long mm_flags ; t#loff_t written ; t#loff_t pos ; }
s#cpu_itimer struct cpu_itimer { t#u64 expires ; t#u64 incr ; }
s#cpu_rmap@161123fe struct cpu_rmap { s#kref refcount ; t#u16 size , used ; void * * obj ; struct { t#u16 index ; t#u16 dist ; } near [ 0 ] ; }
s#cpu_rmap@912b6b64 struct cpu_rmap { UNKNOWN }
s#cpu_stop_done struct cpu_stop_done { UNKNOWN }
s#cpu_stop_work struct cpu_stop_work { s#list_head list ; t#cpu_stop_fn_t fn ; void * arg ; s#cpu_stop_done * done ; }
s#cpudl struct cpudl { t#raw_spinlock_t lock ; int size ; t#cpumask_var_t free_cpus ; s#cpudl_item * elements ; }
s#cpudl_item struct cpudl_item { t#u64 dl ; int cpu ; int idx ; }
s#cpuidle_device struct cpuidle_device { unsigned int registered : 1 ; unsigned int enabled : 1 ; unsigned int use_deepest_state : 1 ; unsigned int poll_time_limit : 1 ; unsigned int cpu ; t#ktime_t next_hrtimer ; int last_state_idx ; int last_residency ; t#u64 poll_limit_ns ; s#cpuidle_state_usage states_usage [ 10 ] ; s#cpuidle_state_kobj * kobjs [ 10 ] ; s#cpuidle_driver_kobj * kobj_driver ; s#cpuidle_device_kobj * kobj_dev ; s#list_head device_list ; }
s#cpuidle_device_kobj struct cpuidle_device_kobj { UNKNOWN }
s#cpuidle_driver struct cpuidle_driver { const char * name ; s#module * owner ; int refcnt ; unsigned int bctimer : 1 ; s#cpuidle_state states [ 10 ] ; int state_count ; int safe_state_index ; s#cpumask * cpumask ; const char * governor ; }
s#cpuidle_driver_kobj struct cpuidle_driver_kobj { UNKNOWN }
s#cpuidle_state struct cpuidle_state { char name [ 16 ] ; char desc [ 32 ] ; unsigned int flags ; unsigned int exit_latency ; int power_usage ; unsigned int target_residency ; t#bool disabled ; int ( * enter ) ( s#cpuidle_device * , s#cpuidle_driver * , int ) ; int ( * enter_dead ) ( s#cpuidle_device * , int ) ; void ( * enter_s2idle ) ( s#cpuidle_device * , s#cpuidle_driver * , int ) ; }
s#cpuidle_state_kobj struct cpuidle_state_kobj { UNKNOWN }
s#cpuidle_state_usage struct cpuidle_state_usage { unsigned long long disable ; unsigned long long usage ; unsigned long long time ; unsigned long long above ; unsigned long long below ; unsigned long long s2idle_usage ; unsigned long long s2idle_time ; }
s#cpuinfo_x86 struct cpuinfo_x86 { t#__u8 x86 ; t#__u8 x86_vendor ; t#__u8 x86_model ; t#__u8 x86_stepping ; int x86_tlbsize ; t#__u8 x86_virt_bits ; t#__u8 x86_phys_bits ; t#__u8 x86_coreid_bits ; t#__u8 cu_id ; t#__u32 extended_cpuid_level ; int cpuid_level ; t#__u32 x86_capability [ 22 + 1 ] ; char x86_vendor_id [ 16 ] ; char x86_model_id [ 64 ] ; unsigned int x86_cache_size ; int x86_cache_alignment ; int x86_cache_max_rmid ; int x86_cache_occ_scale ; int x86_power ; unsigned long loops_per_jiffy ; t#u16 x86_max_cores ; t#u16 apicid ; t#u16 initial_apicid ; t#u16 x86_clflush_size ; t#u16 booted_cores ; t#u16 phys_proc_id ; t#u16 logical_proc_id ; t#u16 cpu_core_id ; t#u16 cpu_die_id ; t#u16 logical_die_id ; t#u16 cpu_index ; t#u32 microcode ; t#u8 x86_cache_bits ; unsigned initialized : 1 ; }
s#cpumask struct cpumask { unsigned long bits [ ( ( ( 8192 ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; }
s#cpupri struct cpupri { s#cpupri_vec pri_to_cpu [ ( 100 + 2 ) ] ; int * cpu_to_pri ; }
s#cpupri_vec struct cpupri_vec { t#atomic_t count ; t#cpumask_var_t mask ; }
s#cred@87f3888e struct cred { t#atomic_t usage ; t#atomic_t subscribers ; void * put_addr ; unsigned magic ; t#kuid_t uid ; t#kgid_t gid ; t#kuid_t suid ; t#kgid_t sgid ; t#kuid_t euid ; t#kgid_t egid ; t#kuid_t fsuid ; t#kgid_t fsgid ; unsigned securebits ; t#kernel_cap_t cap_inheritable ; t#kernel_cap_t cap_permitted ; t#kernel_cap_t cap_effective ; t#kernel_cap_t cap_bset ; t#kernel_cap_t cap_ambient ; unsigned char jit_keyring ; s#key * session_keyring ; s#key * process_keyring ; s#key * thread_keyring ; s#key * request_key_auth ; void * security ; s#user_struct * user ; s#user_namespace * user_ns ; s#group_info * group_info ; union { int non_rcu ; s#callback_head rcu ; } ; }
s#cred@f160657f struct cred { UNKNOWN }
s#crypto_ablkcipher struct crypto_ablkcipher { s#crypto_tfm base ; }
s#crypto_alg struct crypto_alg { s#list_head cra_list ; s#list_head cra_users ; t#u32 cra_flags ; unsigned int cra_blocksize ; unsigned int cra_ctxsize ; unsigned int cra_alignmask ; int cra_priority ; t#refcount_t cra_refcnt ; char cra_name [ 128 ] ; char cra_driver_name [ 128 ] ; const s#crypto_type * cra_type ; union { s#ablkcipher_alg ablkcipher ; s#blkcipher_alg blkcipher ; s#cipher_alg cipher ; s#compress_alg compress ; } cra_u ; int ( * cra_init ) ( s#crypto_tfm * ) ; void ( * cra_exit ) ( s#crypto_tfm * ) ; void ( * cra_destroy ) ( s#crypto_alg * ) ; s#module * cra_module ; }
s#crypto_async_request struct crypto_async_request { s#list_head list ; t#crypto_completion_t complete ; void * data ; s#crypto_tfm * tfm ; t#u32 flags ; }
s#crypto_blkcipher struct crypto_blkcipher { s#crypto_tfm base ; }
s#crypto_cipher struct crypto_cipher { s#crypto_tfm base ; }
s#crypto_instance struct crypto_instance { s#crypto_alg alg ; s#crypto_template * tmpl ; s#hlist_node list ; void * __ctx [ ] __attribute__ ( ( __aligned__ ( __alignof__ ( unsigned long long ) ) ) ) ; }
s#crypto_skcipher@2e8d5c72 struct crypto_skcipher { int ( * setkey ) ( s#crypto_skcipher * , const t#u8 * , unsigned int ) ; int ( * encrypt ) ( s#skcipher_request * ) ; int ( * decrypt ) ( s#skcipher_request * ) ; unsigned int ivsize ; unsigned int reqsize ; unsigned int keysize ; s#crypto_tfm base ; }
s#crypto_skcipher@5b727d26 struct crypto_skcipher { UNKNOWN }
s#crypto_template struct crypto_template { s#list_head list ; s#hlist_head instances ; s#module * module ; s#crypto_instance * ( * alloc ) ( s#rtattr * * ) ; void ( * free ) ( s#crypto_instance * ) ; int ( * create ) ( s#crypto_template * , s#rtattr * * ) ; char name [ 128 ] ; }
s#crypto_tfm struct crypto_tfm { t#u32 crt_flags ; union { s#ablkcipher_tfm ablkcipher ; s#blkcipher_tfm blkcipher ; s#cipher_tfm cipher ; s#compress_tfm compress ; } crt_u ; void ( * exit ) ( s#crypto_tfm * ) ; s#crypto_alg * __crt_alg ; void * __crt_ctx [ ] __attribute__ ( ( __aligned__ ( __alignof__ ( unsigned long long ) ) ) ) ; }
s#crypto_type@8ac414c2 struct crypto_type { UNKNOWN }
s#crypto_type@c7599aa4 struct crypto_type { unsigned int ( * ctxsize ) ( s#crypto_alg * , t#u32 , t#u32 ) ; unsigned int ( * extsize ) ( s#crypto_alg * ) ; int ( * init ) ( s#crypto_tfm * , t#u32 , t#u32 ) ; int ( * init_tfm ) ( s#crypto_tfm * ) ; void ( * show ) ( s#seq_file * , s#crypto_alg * ) ; int ( * report ) ( s#sk_buff * , s#crypto_alg * ) ; void ( * free ) ( s#crypto_instance * ) ; unsigned int type ; unsigned int maskclear ; unsigned int maskset ; unsigned int tfmsize ; }
s#css_set@1dc87d2d struct css_set { s#cgroup_subsys_state * subsys [ E#CGROUP_SUBSYS_COUNT ] ; t#refcount_t refcount ; s#css_set * dom_cset ; s#cgroup * dfl_cgrp ; int nr_tasks ; s#list_head tasks ; s#list_head mg_tasks ; s#list_head dying_tasks ; s#list_head task_iters ; s#list_head e_cset_node [ E#CGROUP_SUBSYS_COUNT ] ; s#list_head threaded_csets ; s#list_head threaded_csets_node ; s#hlist_node hlist ; s#list_head cgrp_links ; s#list_head mg_preload_node ; s#list_head mg_node ; s#cgroup * mg_src_cgrp ; s#cgroup * mg_dst_cgrp ; s#css_set * mg_dst_cset ; t#bool dead ; s#callback_head callback_head ; }
s#css_set@90aef3e2 struct css_set { UNKNOWN }
s#ct_pcpu struct ct_pcpu { t#spinlock_t lock ; s#hlist_nulls_head unconfirmed ; s#hlist_nulls_head dying ; }
s#ctl_dir struct ctl_dir { s#ctl_table_header header ; s#rb_root root ; }
s#ctl_node struct ctl_node { s#rb_node node ; s#ctl_table_header * header ; }
s#ctl_table struct ctl_table { const char * procname ; void * data ; int maxlen ; t#umode_t mode ; s#ctl_table * child ; t#proc_handler * proc_handler ; s#ctl_table_poll * poll ; void * extra1 ; void * extra2 ; }
s#ctl_table_header struct ctl_table_header { union { struct { s#ctl_table * ctl_table ; int used ; int count ; int nreg ; } ; s#callback_head rcu ; } ; s#completion * unregistering ; s#ctl_table * ctl_table_arg ; s#ctl_table_root * root ; s#ctl_table_set * set ; s#ctl_dir * parent ; s#ctl_node * node ; s#hlist_head inodes ; }
s#ctl_table_poll struct ctl_table_poll { t#atomic_t event ; t#wait_queue_head_t wait ; }
s#ctl_table_root struct ctl_table_root { s#ctl_table_set default_set ; s#ctl_table_set * ( * lookup ) ( s#ctl_table_root * ) ; void ( * set_ownership ) ( s#ctl_table_header * , s#ctl_table * , t#kuid_t * , t#kgid_t * ) ; int ( * permissions ) ( s#ctl_table_header * , s#ctl_table * ) ; }
s#ctl_table_set struct ctl_table_set { int ( * is_seen ) ( s#ctl_table_set * ) ; s#ctl_dir dir ; }
s#cvt_timing struct cvt_timing { t#u8 code [ 3 ] ; }
s#dax_device struct dax_device { UNKNOWN }
s#dcb_app struct dcb_app { t#__u8 selector ; t#__u8 priority ; t#__u16 protocol ; }
s#dcb_peer_app_info struct dcb_peer_app_info { t#__u8 willing ; t#__u8 error ; }
s#dcbnl_buffer struct dcbnl_buffer { t#__u8 prio2buffer [ 8 ] ; t#__u32 buffer_size [ 8 ] ; t#__u32 total_size ; }
s#dcbnl_rtnl_ops struct dcbnl_rtnl_ops { int ( * ieee_getets ) ( s#net_device * , s#ieee_ets * ) ; int ( * ieee_setets ) ( s#net_device * , s#ieee_ets * ) ; int ( * ieee_getmaxrate ) ( s#net_device * , s#ieee_maxrate * ) ; int ( * ieee_setmaxrate ) ( s#net_device * , s#ieee_maxrate * ) ; int ( * ieee_getqcn ) ( s#net_device * , s#ieee_qcn * ) ; int ( * ieee_setqcn ) ( s#net_device * , s#ieee_qcn * ) ; int ( * ieee_getqcnstats ) ( s#net_device * , s#ieee_qcn_stats * ) ; int ( * ieee_getpfc ) ( s#net_device * , s#ieee_pfc * ) ; int ( * ieee_setpfc ) ( s#net_device * , s#ieee_pfc * ) ; int ( * ieee_getapp ) ( s#net_device * , s#dcb_app * ) ; int ( * ieee_setapp ) ( s#net_device * , s#dcb_app * ) ; int ( * ieee_delapp ) ( s#net_device * , s#dcb_app * ) ; int ( * ieee_peer_getets ) ( s#net_device * , s#ieee_ets * ) ; int ( * ieee_peer_getpfc ) ( s#net_device * , s#ieee_pfc * ) ; t#u8 ( * getstate ) ( s#net_device * ) ; t#u8 ( * setstate ) ( s#net_device * , t#u8 ) ; void ( * getpermhwaddr ) ( s#net_device * , t#u8 * ) ; void ( * setpgtccfgtx ) ( s#net_device * , int , t#u8 , t#u8 , t#u8 , t#u8 ) ; void ( * setpgbwgcfgtx ) ( s#net_device * , int , t#u8 ) ; void ( * setpgtccfgrx ) ( s#net_device * , int , t#u8 , t#u8 , t#u8 , t#u8 ) ; void ( * setpgbwgcfgrx ) ( s#net_device * , int , t#u8 ) ; void ( * getpgtccfgtx ) ( s#net_device * , int , t#u8 * , t#u8 * , t#u8 * , t#u8 * ) ; void ( * getpgbwgcfgtx ) ( s#net_device * , int , t#u8 * ) ; void ( * getpgtccfgrx ) ( s#net_device * , int , t#u8 * , t#u8 * , t#u8 * , t#u8 * ) ; void ( * getpgbwgcfgrx ) ( s#net_device * , int , t#u8 * ) ; void ( * setpfccfg ) ( s#net_device * , int , t#u8 ) ; void ( * getpfccfg ) ( s#net_device * , int , t#u8 * ) ; t#u8 ( * setall ) ( s#net_device * ) ; t#u8 ( * getcap ) ( s#net_device * , int , t#u8 * ) ; int ( * getnumtcs ) ( s#net_device * , int , t#u8 * ) ; int ( * setnumtcs ) ( s#net_device * , int , t#u8 ) ; t#u8 ( * getpfcstate ) ( s#net_device * ) ; void ( * setpfcstate ) ( s#net_device * , t#u8 ) ; void ( * getbcncfg ) ( s#net_device * , int , t#u32 * ) ; void ( * setbcncfg ) ( s#net_device * , int , t#u32 ) ; void ( * getbcnrp ) ( s#net_device * , int , t#u8 * ) ; void ( * setbcnrp ) ( s#net_device * , int , t#u8 ) ; int ( * setapp ) ( s#net_device * , t#u8 , t#u16 , t#u8 ) ; int ( * getapp ) ( s#net_device * , t#u8 , t#u16 ) ; t#u8 ( * getfeatcfg ) ( s#net_device * , int , t#u8 * ) ; t#u8 ( * setfeatcfg ) ( s#net_device * , int , t#u8 ) ; t#u8 ( * getdcbx ) ( s#net_device * ) ; t#u8 ( * setdcbx ) ( s#net_device * , t#u8 ) ; int ( * peer_getappinfo ) ( s#net_device * , s#dcb_peer_app_info * , t#u16 * ) ; int ( * peer_getapptable ) ( s#net_device * , s#dcb_app * ) ; int ( * cee_peer_getpg ) ( s#net_device * , s#cee_pg * ) ; int ( * cee_peer_getpfc ) ( s#net_device * , s#cee_pfc * ) ; int ( * dcbnl_getbuffer ) ( s#net_device * , s#dcbnl_buffer * ) ; int ( * dcbnl_setbuffer ) ( s#net_device * , s#dcbnl_buffer * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#deferred_split struct deferred_split { t#spinlock_t split_queue_lock ; s#list_head split_queue ; unsigned long split_queue_len ; }
s#delayed_call struct delayed_call { void ( * fn ) ( void * ) ; void * arg ; }
s#delayed_work struct delayed_work { s#work_struct work ; s#timer_list timer ; s#workqueue_struct * wq ; int cpu ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#dentry@89754a82 struct dentry { unsigned int d_flags ; t#seqcount_t d_seq ; s#hlist_bl_node d_hash ; s#dentry * d_parent ; s#qstr d_name ; s#inode * d_inode ; unsigned char d_iname [ 32 ] ; s#lockref d_lockref ; const s#dentry_operations * d_op ; s#super_block * d_sb ; unsigned long d_time ; void * d_fsdata ; union { s#list_head d_lru ; t#wait_queue_head_t * d_wait ; } ; s#list_head d_child ; s#list_head d_subdirs ; union { s#hlist_node d_alias ; s#hlist_bl_node d_in_lookup_hash ; s#callback_head d_rcu ; } d_u ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#dentry@d91cc150 struct dentry { UNKNOWN }
s#dentry_operations struct dentry_operations { int ( * d_revalidate ) ( s#dentry * , unsigned int ) ; int ( * d_weak_revalidate ) ( s#dentry * , unsigned int ) ; int ( * d_hash ) ( const s#dentry * , s#qstr * ) ; int ( * d_compare ) ( const s#dentry * , unsigned int , const char * , const s#qstr * ) ; int ( * d_delete ) ( const s#dentry * ) ; int ( * d_init ) ( s#dentry * ) ; void ( * d_release ) ( s#dentry * ) ; void ( * d_prune ) ( s#dentry * ) ; void ( * d_iput ) ( s#dentry * , s#inode * ) ; char * ( * d_dname ) ( s#dentry * , char * , int ) ; s#vfsmount * ( * d_automount ) ( s#path * ) ; int ( * d_manage ) ( const s#path * , t#bool ) ; s#dentry * ( * d_real ) ( s#dentry * , const s#inode * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#desc_ptr struct desc_ptr { unsigned short size ; unsigned long address ; }
s#desc_struct struct desc_struct { t#u16 limit0 ; t#u16 base0 ; t#u16 base1 : 8 , type : 4 , s : 1 , dpl : 2 , p : 1 ; t#u16 limit1 : 4 , avl : 1 , l : 1 , d : 1 , g : 1 , base2 : 8 ; }
s#detailed_data_monitor_range struct detailed_data_monitor_range { t#u8 min_vfreq ; t#u8 max_vfreq ; t#u8 min_hfreq_khz ; t#u8 max_hfreq_khz ; t#u8 pixel_clock_mhz ; t#u8 flags ; union { struct { t#u8 reserved ; t#u8 hfreq_start_khz ; t#u8 c ; t#__le16 m ; t#u8 k ; t#u8 j ; } __attribute__ ( ( packed ) ) gtf2 ; struct { t#u8 version ; t#u8 data1 ; t#u8 data2 ; t#u8 supported_aspects ; t#u8 flags ; t#u8 supported_scalings ; t#u8 preferred_refresh ; } __attribute__ ( ( packed ) ) cvt ; } formula ; }
s#detailed_data_string struct detailed_data_string { t#u8 str [ 13 ] ; }
s#detailed_data_wpindex struct detailed_data_wpindex { t#u8 white_yx_lo ; t#u8 white_x_hi ; t#u8 white_y_hi ; t#u8 gamma ; }
s#detailed_non_pixel struct detailed_non_pixel { t#u8 pad1 ; t#u8 type ; t#u8 pad2 ; union { s#detailed_data_string str ; s#detailed_data_monitor_range range ; s#detailed_data_wpindex color ; s#std_timing timings [ 6 ] ; s#cvt_timing cvt [ 4 ] ; } data ; }
s#detailed_pixel_timing struct detailed_pixel_timing { t#u8 hactive_lo ; t#u8 hblank_lo ; t#u8 hactive_hblank_hi ; t#u8 vactive_lo ; t#u8 vblank_lo ; t#u8 vactive_vblank_hi ; t#u8 hsync_offset_lo ; t#u8 hsync_pulse_width_lo ; t#u8 vsync_offset_pulse_width_lo ; t#u8 hsync_vsync_offset_pulse_width_hi ; t#u8 width_mm_lo ; t#u8 height_mm_lo ; t#u8 width_height_mm_hi ; t#u8 hborder ; t#u8 vborder ; t#u8 misc ; }
s#detailed_timing struct detailed_timing { t#__le16 pixel_clock ; union { s#detailed_pixel_timing pixel_data ; s#detailed_non_pixel other_data ; } data ; }
s#dev_archdata struct dev_archdata { void * iommu ; }
s#dev_ifalias struct dev_ifalias { s#callback_head rcuhead ; char ifalias [ ] ; }
s#dev_links_info struct dev_links_info { s#list_head suppliers ; s#list_head consumers ; e#dl_dev_state status ; }
s#dev_pagemap@ad17fee0 struct dev_pagemap { UNKNOWN }
s#dev_pagemap@f818805d struct dev_pagemap { s#vmem_altmap altmap ; s#resource res ; s#percpu_ref * ref ; s#percpu_ref internal_ref ; s#completion done ; e#memory_type type ; unsigned int flags ; const s#dev_pagemap_ops * ops ; }
s#dev_pagemap_ops struct dev_pagemap_ops { void ( * page_free ) ( s#page * ) ; void ( * kill ) ( s#dev_pagemap * ) ; void ( * cleanup ) ( s#dev_pagemap * ) ; t#vm_fault_t ( * migrate_to_ram ) ( s#vm_fault * ) ; }
s#dev_pin_info@5aaeca8c struct dev_pin_info { s#pinctrl * p ; s#pinctrl_state * default_state ; s#pinctrl_state * init_state ; s#pinctrl_state * sleep_state ; s#pinctrl_state * idle_state ; }
s#dev_pin_info@74d04f18 struct dev_pin_info { UNKNOWN }
s#dev_pm_domain struct dev_pm_domain { s#dev_pm_ops ops ; void ( * detach ) ( s#device * , t#bool ) ; int ( * activate ) ( s#device * ) ; void ( * sync ) ( s#device * ) ; void ( * dismiss ) ( s#device * ) ; }
s#dev_pm_info struct dev_pm_info { t#pm_message_t power_state ; unsigned int can_wakeup : 1 ; unsigned int async_suspend : 1 ; t#bool in_dpm_list : 1 ; t#bool is_prepared : 1 ; t#bool is_suspended : 1 ; t#bool is_noirq_suspended : 1 ; t#bool is_late_suspended : 1 ; t#bool no_pm : 1 ; t#bool early_init : 1 ; t#bool direct_complete : 1 ; t#u32 driver_flags ; t#spinlock_t lock ; s#list_head entry ; s#completion completion ; s#wakeup_source * wakeup ; t#bool wakeup_path : 1 ; t#bool syscore : 1 ; t#bool no_pm_callbacks : 1 ; unsigned int must_resume : 1 ; unsigned int may_skip_resume : 1 ; s#hrtimer suspend_timer ; unsigned long timer_expires ; s#work_struct work ; t#wait_queue_head_t wait_queue ; s#wake_irq * wakeirq ; t#atomic_t usage_count ; t#atomic_t child_count ; unsigned int disable_depth : 3 ; unsigned int idle_notification : 1 ; unsigned int request_pending : 1 ; unsigned int deferred_resume : 1 ; unsigned int runtime_auto : 1 ; t#bool ignore_children : 1 ; unsigned int no_callbacks : 1 ; unsigned int irq_safe : 1 ; unsigned int use_autosuspend : 1 ; unsigned int timer_autosuspends : 1 ; unsigned int memalloc_noio : 1 ; unsigned int links_count ; e#rpm_request request ; e#rpm_status runtime_status ; int runtime_error ; int autosuspend_delay ; t#u64 last_busy ; t#u64 active_time ; t#u64 suspended_time ; t#u64 accounting_timestamp ; s#pm_subsys_data * subsys_data ; void ( * set_latency_tolerance ) ( s#device * , t#s32 ) ; s#dev_pm_qos * qos ; }
s#dev_pm_ops struct dev_pm_ops { int ( * prepare ) ( s#device * ) ; void ( * complete ) ( s#device * ) ; int ( * suspend ) ( s#device * ) ; int ( * resume ) ( s#device * ) ; int ( * freeze ) ( s#device * ) ; int ( * thaw ) ( s#device * ) ; int ( * poweroff ) ( s#device * ) ; int ( * restore ) ( s#device * ) ; int ( * suspend_late ) ( s#device * ) ; int ( * resume_early ) ( s#device * ) ; int ( * freeze_late ) ( s#device * ) ; int ( * thaw_early ) ( s#device * ) ; int ( * poweroff_late ) ( s#device * ) ; int ( * restore_early ) ( s#device * ) ; int ( * suspend_noirq ) ( s#device * ) ; int ( * resume_noirq ) ( s#device * ) ; int ( * freeze_noirq ) ( s#device * ) ; int ( * thaw_noirq ) ( s#device * ) ; int ( * poweroff_noirq ) ( s#device * ) ; int ( * restore_noirq ) ( s#device * ) ; int ( * runtime_suspend ) ( s#device * ) ; int ( * runtime_resume ) ( s#device * ) ; int ( * runtime_idle ) ( s#device * ) ; }
s#dev_pm_qos@4a00fc73 struct dev_pm_qos { UNKNOWN }
s#dev_pm_qos@99a04b89 struct dev_pm_qos { s#pm_qos_constraints resume_latency ; s#pm_qos_constraints latency_tolerance ; s#pm_qos_flags flags ; s#dev_pm_qos_request * resume_latency_req ; s#dev_pm_qos_request * latency_tolerance_req ; s#dev_pm_qos_request * flags_req ; }
s#dev_pm_qos_request struct dev_pm_qos_request { e#dev_pm_qos_req_type type ; union { s#plist_node pnode ; s#pm_qos_flags_request flr ; } data ; s#device * dev ; }
s#device@3d2c6ff1 struct device { s#kobject kobj ; s#device * parent ; s#device_private * p ; const char * init_name ; const s#device_type * type ; s#bus_type * bus ; s#device_driver * driver ; void * platform_data ; void * driver_data ; s#mutex lockdep_mutex ; s#mutex mutex ; s#dev_links_info links ; s#dev_pm_info power ; s#dev_pm_domain * pm_domain ; s#irq_domain * msi_domain ; s#dev_pin_info * pins ; s#list_head msi_list ; const s#dma_map_ops * dma_ops ; t#u64 * dma_mask ; t#u64 coherent_dma_mask ; t#u64 bus_dma_limit ; unsigned long dma_pfn_offset ; s#device_dma_parameters * dma_parms ; s#list_head dma_pools ; s#cma * cma_area ; s#dev_archdata archdata ; s#device_node * of_node ; s#fwnode_handle * fwnode ; int numa_node ; t#dev_t devt ; t#u32 id ; t#spinlock_t devres_lock ; s#list_head devres_head ; s#class * class ; const s#attribute_group * * groups ; void ( * release ) ( s#device * ) ; s#iommu_group * iommu_group ; s#iommu_fwspec * iommu_fwspec ; s#iommu_param * iommu_param ; t#bool offline_disabled : 1 ; t#bool offline : 1 ; t#bool of_node_reused : 1 ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#device@92fea4ff struct device { UNKNOWN }
s#device_attribute struct device_attribute { s#attribute attr ; t#ssize_t ( * show ) ( s#device * , s#device_attribute * , char * ) ; t#ssize_t ( * store ) ( s#device * , s#device_attribute * , const char * , t#size_t ) ; }
s#device_dma_parameters struct device_dma_parameters { unsigned int max_segment_size ; unsigned long segment_boundary_mask ; }
s#device_driver struct device_driver { const char * name ; s#bus_type * bus ; s#module * owner ; const char * mod_name ; t#bool suppress_bind_attrs ; e#probe_type probe_type ; const s#of_device_id * of_match_table ; const s#acpi_device_id * acpi_match_table ; int ( * probe ) ( s#device * ) ; int ( * remove ) ( s#device * ) ; void ( * shutdown ) ( s#device * ) ; int ( * suspend ) ( s#device * , t#pm_message_t ) ; int ( * resume ) ( s#device * ) ; const s#attribute_group * * groups ; const s#attribute_group * * dev_groups ; const s#dev_pm_ops * pm ; void ( * coredump ) ( s#device * ) ; s#driver_private * p ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#device_node@26a212ba struct device_node { UNKNOWN }
s#device_node@346471e3 struct device_node { const char * name ; t#phandle t#phandle ; const char * full_name ; s#fwnode_handle fwnode ; s#property * properties ; s#property * deadprops ; s#device_node * parent ; s#device_node * child ; s#device_node * sibling ; unsigned long _flags ; void * data ; }
s#device_private@95088762 struct device_private { UNKNOWN }
s#device_private@eeec2887 struct device_private { s#klist klist_children ; s#klist_node knode_parent ; s#klist_node knode_driver ; s#klist_node knode_bus ; s#klist_node knode_class ; s#list_head deferred_probe ; s#device_driver * async_driver ; s#device * device ; t#u8 dead : 1 ; }
s#device_type struct device_type { const char * name ; const s#attribute_group * * groups ; int ( * uevent ) ( s#device * , s#kobj_uevent_env * ) ; char * ( * devnode ) ( s#device * , t#umode_t * , t#kuid_t * , t#kgid_t * ) ; void ( * release ) ( s#device * ) ; const s#dev_pm_ops * pm ; }
s#devlink@12421530 struct devlink { s#list_head list ; s#list_head port_list ; s#list_head sb_list ; s#list_head dpipe_table_list ; s#list_head resource_list ; s#list_head param_list ; s#list_head region_list ; t#u32 snapshot_id ; s#list_head reporter_list ; s#mutex reporters_lock ; s#devlink_dpipe_headers * dpipe_headers ; s#list_head trap_list ; s#list_head trap_group_list ; const s#devlink_ops * ops ; s#device * dev ; t#possible_net_t _net ; s#mutex lock ; t#u8 reload_failed : 1 , reload_enabled : 1 ; char priv [ 0 ] __attribute__ ( ( __aligned__ ( 32 ) ) ) ; }
s#devlink@ea84cedc struct devlink { UNKNOWN }
s#devlink_dpipe_field struct devlink_dpipe_field { const char * name ; unsigned int id ; unsigned int bitwidth ; e#devlink_dpipe_field_mapping_type mapping_type ; }
s#devlink_dpipe_header struct devlink_dpipe_header { const char * name ; unsigned int id ; s#devlink_dpipe_field * fields ; unsigned int fields_count ; t#bool global ; }
s#devlink_dpipe_headers struct devlink_dpipe_headers { s#devlink_dpipe_header * * headers ; unsigned int headers_count ; }
s#devlink_info_req struct devlink_info_req { UNKNOWN }
s#devlink_ops struct devlink_ops { int ( * reload_down ) ( s#devlink * , s#netlink_ext_ack * ) ; int ( * reload_up ) ( s#devlink * , s#netlink_ext_ack * ) ; int ( * port_type_set ) ( s#devlink_port * , e#devlink_port_type ) ; int ( * port_split ) ( s#devlink * , unsigned int , unsigned int , s#netlink_ext_ack * ) ; int ( * port_unsplit ) ( s#devlink * , unsigned int , s#netlink_ext_ack * ) ; int ( * sb_pool_get ) ( s#devlink * , unsigned int , t#u16 , s#devlink_sb_pool_info * ) ; int ( * sb_pool_set ) ( s#devlink * , unsigned int , t#u16 , t#u32 , e#devlink_sb_threshold_type , s#netlink_ext_ack * ) ; int ( * sb_port_pool_get ) ( s#devlink_port * , unsigned int , t#u16 , t#u32 * ) ; int ( * sb_port_pool_set ) ( s#devlink_port * , unsigned int , t#u16 , t#u32 , s#netlink_ext_ack * ) ; int ( * sb_tc_pool_bind_get ) ( s#devlink_port * , unsigned int , t#u16 , e#devlink_sb_pool_type , t#u16 * , t#u32 * ) ; int ( * sb_tc_pool_bind_set ) ( s#devlink_port * , unsigned int , t#u16 , e#devlink_sb_pool_type , t#u16 , t#u32 , s#netlink_ext_ack * ) ; int ( * sb_occ_snapshot ) ( s#devlink * , unsigned int ) ; int ( * sb_occ_max_clear ) ( s#devlink * , unsigned int ) ; int ( * sb_occ_port_pool_get ) ( s#devlink_port * , unsigned int , t#u16 , t#u32 * , t#u32 * ) ; int ( * sb_occ_tc_port_bind_get ) ( s#devlink_port * , unsigned int , t#u16 , e#devlink_sb_pool_type , t#u32 * , t#u32 * ) ; int ( * eswitch_mode_get ) ( s#devlink * , t#u16 * ) ; int ( * eswitch_mode_set ) ( s#devlink * , t#u16 , s#netlink_ext_ack * ) ; int ( * eswitch_inline_mode_get ) ( s#devlink * , t#u8 * ) ; int ( * eswitch_inline_mode_set ) ( s#devlink * , t#u8 , s#netlink_ext_ack * ) ; int ( * eswitch_encap_mode_get ) ( s#devlink * , e#devlink_eswitch_encap_mode * ) ; int ( * eswitch_encap_mode_set ) ( s#devlink * , e#devlink_eswitch_encap_mode , s#netlink_ext_ack * ) ; int ( * info_get ) ( s#devlink * , s#devlink_info_req * , s#netlink_ext_ack * ) ; int ( * flash_update ) ( s#devlink * , const char * , const char * , s#netlink_ext_ack * ) ; int ( * trap_init ) ( s#devlink * , const s#devlink_trap * , void * ) ; void ( * trap_fini ) ( s#devlink * , const s#devlink_trap * , void * ) ; int ( * trap_action_set ) ( s#devlink * , const s#devlink_trap * , e#devlink_trap_action ) ; int ( * trap_group_init ) ( s#devlink * , const s#devlink_trap_group * ) ; }
s#devlink_port@5c77e7ef struct devlink_port { s#list_head list ; s#list_head param_list ; s#devlink * devlink ; unsigned int index ; t#bool registered ; t#spinlock_t type_lock ; e#devlink_port_type type ; e#devlink_port_type desired_type ; void * type_dev ; s#devlink_port_attrs attrs ; s#delayed_work type_warn_dw ; }
s#devlink_port@90deb245 struct devlink_port { UNKNOWN }
s#devlink_port_attrs struct devlink_port_attrs { t#u8 set : 1 , split : 1 , switch_port : 1 ; e#devlink_port_flavour flavour ; s#netdev_phys_item_id switch_id ; union { s#devlink_port_phys_attrs phys ; s#devlink_port_pci_pf_attrs pci_pf ; s#devlink_port_pci_vf_attrs pci_vf ; } ; }
s#devlink_port_pci_pf_attrs struct devlink_port_pci_pf_attrs { t#u16 pf ; }
s#devlink_port_pci_vf_attrs struct devlink_port_pci_vf_attrs { t#u16 pf ; t#u16 vf ; }
s#devlink_port_phys_attrs struct devlink_port_phys_attrs { t#u32 port_number ; t#u32 split_subport_number ; }
s#devlink_sb_pool_info struct devlink_sb_pool_info { e#devlink_sb_pool_type pool_type ; t#u32 size ; e#devlink_sb_threshold_type threshold_type ; t#u32 cell_size ; }
s#devlink_trap struct devlink_trap { e#devlink_trap_type type ; e#devlink_trap_action init_action ; t#bool generic ; t#u16 id ; const char * name ; s#devlink_trap_group group ; t#u32 metadata_cap ; }
s#devlink_trap_group struct devlink_trap_group { const char * name ; t#u16 id ; t#bool generic ; }
s#dir_context struct dir_context { t#filldir_t actor ; t#loff_t pos ; }
s#disk_events struct disk_events { UNKNOWN }
s#disk_part_tbl struct disk_part_tbl { s#callback_head callback_head ; int len ; s#hd_struct * last_lookup ; s#hd_struct * part [ ] ; }
s#disk_stats struct disk_stats { t#u64 nsecs [ E#NR_STAT_GROUPS ] ; unsigned long sectors [ E#NR_STAT_GROUPS ] ; unsigned long ios [ E#NR_STAT_GROUPS ] ; unsigned long merges [ E#NR_STAT_GROUPS ] ; unsigned long io_ticks ; unsigned long time_in_queue ; t#local_t in_flight [ 2 ] ; }
s#dl_bw struct dl_bw { t#raw_spinlock_t lock ; t#u64 bw ; t#u64 total_bw ; }
s#dl_rq struct dl_rq { s#rb_root_cached root ; unsigned long dl_nr_running ; struct { t#u64 curr ; t#u64 next ; } earliest_dl ; unsigned long dl_nr_migratory ; int overloaded ; s#rb_root_cached pushable_dl_tasks_root ; t#u64 running_bw ; t#u64 this_bw ; t#u64 extra_bw ; t#u64 bw_ratio ; }
s#dma_buf@6a611902 struct dma_buf { UNKNOWN }
s#dma_buf@f15b8dec struct dma_buf { t#size_t size ; s#file * file ; s#list_head attachments ; const s#dma_buf_ops * ops ; s#mutex lock ; unsigned vmapping_counter ; void * vmap_ptr ; const char * exp_name ; const char * name ; s#module * owner ; s#list_head list_node ; void * priv ; s#dma_resv * resv ; t#wait_queue_head_t poll ; s#dma_buf_poll_cb_t cb_excl , cb_shared ; }
s#dma_buf_attachment@0ed4e87b struct dma_buf_attachment { s#dma_buf * dmabuf ; s#device * dev ; s#list_head node ; s#sg_table * sgt ; e#dma_data_direction dir ; void * priv ; }
s#dma_buf_attachment@a5b0fd3f struct dma_buf_attachment { UNKNOWN }
s#dma_buf_ops struct dma_buf_ops { t#bool cache_sgt_mapping ; int ( * attach ) ( s#dma_buf * , s#dma_buf_attachment * ) ; void ( * detach ) ( s#dma_buf * , s#dma_buf_attachment * ) ; s#sg_table * ( * map_dma_buf ) ( s#dma_buf_attachment * , e#dma_data_direction ) ; void ( * unmap_dma_buf ) ( s#dma_buf_attachment * , s#sg_table * , e#dma_data_direction ) ; void ( * release ) ( s#dma_buf * ) ; int ( * begin_cpu_access ) ( s#dma_buf * , e#dma_data_direction ) ; int ( * end_cpu_access ) ( s#dma_buf * , e#dma_data_direction ) ; int ( * mmap ) ( s#dma_buf * , s#vm_area_struct * ) ; void * ( * map ) ( s#dma_buf * , unsigned long ) ; void ( * unmap ) ( s#dma_buf * , unsigned long , void * ) ; void * ( * vmap ) ( s#dma_buf * ) ; void ( * vunmap ) ( s#dma_buf * , void * ) ; }
s#dma_buf_poll_cb_t struct dma_buf_poll_cb_t { s#dma_fence_cb cb ; t#wait_queue_head_t * poll ; t#__poll_t active ; }
s#dma_fence@7b78d61e struct dma_fence { UNKNOWN }
s#dma_fence@8e26171f struct dma_fence { t#spinlock_t * lock ; const s#dma_fence_ops * ops ; union { s#list_head cb_list ; t#ktime_t timestamp ; s#callback_head rcu ; } ; t#u64 context ; t#u64 seqno ; unsigned long flags ; s#kref refcount ; int error ; }
s#dma_fence_cb struct dma_fence_cb { s#list_head node ; t#dma_fence_func_t func ; }
s#dma_fence_ops struct dma_fence_ops { t#bool use_64bit_seqno ; const char * ( * get_driver_name ) ( s#dma_fence * ) ; const char * ( * get_timeline_name ) ( s#dma_fence * ) ; t#bool ( * enable_signaling ) ( s#dma_fence * ) ; t#bool ( * signaled ) ( s#dma_fence * ) ; signed long ( * wait ) ( s#dma_fence * , t#bool , signed long ) ; void ( * release ) ( s#dma_fence * ) ; void ( * fence_value_str ) ( s#dma_fence * , char * , int ) ; void ( * timeline_value_str ) ( s#dma_fence * , char * , int ) ; }
s#dma_map_ops@32abb76b struct dma_map_ops { void * ( * alloc ) ( s#device * , t#size_t , t#dma_addr_t * , t#gfp_t , unsigned long ) ; void ( * free ) ( s#device * , t#size_t , void * , t#dma_addr_t , unsigned long ) ; int ( * mmap ) ( s#device * , s#vm_area_struct * , void * , t#dma_addr_t , t#size_t , unsigned long ) ; int ( * get_sgtable ) ( s#device * , s#sg_table * , void * , t#dma_addr_t , t#size_t , unsigned long ) ; t#dma_addr_t ( * map_page ) ( s#device * , s#page * , unsigned long , t#size_t , e#dma_data_direction , unsigned long ) ; void ( * unmap_page ) ( s#device * , t#dma_addr_t , t#size_t , e#dma_data_direction , unsigned long ) ; int ( * map_sg ) ( s#device * , s#scatterlist * , int , e#dma_data_direction , unsigned long ) ; void ( * unmap_sg ) ( s#device * , s#scatterlist * , int , e#dma_data_direction , unsigned long ) ; t#dma_addr_t ( * map_resource ) ( s#device * , t#phys_addr_t , t#size_t , e#dma_data_direction , unsigned long ) ; void ( * unmap_resource ) ( s#device * , t#dma_addr_t , t#size_t , e#dma_data_direction , unsigned long ) ; void ( * sync_single_for_cpu ) ( s#device * , t#dma_addr_t , t#size_t , e#dma_data_direction ) ; void ( * sync_single_for_device ) ( s#device * , t#dma_addr_t , t#size_t , e#dma_data_direction ) ; void ( * sync_sg_for_cpu ) ( s#device * , s#scatterlist * , int , e#dma_data_direction ) ; void ( * sync_sg_for_device ) ( s#device * , s#scatterlist * , int , e#dma_data_direction ) ; void ( * cache_sync ) ( s#device * , void * , t#size_t , e#dma_data_direction ) ; int ( * dma_supported ) ( s#device * , t#u64 ) ; t#u64 ( * get_required_mask ) ( s#device * ) ; t#size_t ( * max_mapping_size ) ( s#device * ) ; unsigned long ( * get_merge_boundary ) ( s#device * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; }
s#dma_map_ops@b53ba484 struct dma_map_ops { UNKNOWN }
s#dma_resv@5e7ab572 struct dma_resv { UNKNOWN }
s#dma_resv@c4cd21aa struct dma_resv { s#ww_mutex lock ; t#seqcount_t seq ; s#dma_fence * fence_excl ; s#dma_resv_list * fence ; }
s#dma_resv_list struct dma_resv_list { s#callback_head rcu ; t#u32 shared_count , shared_max ; s#dma_fence * shared [ ] ; }
s#dql struct dql { unsigned int num_queued ; unsigned int adj_limit ; unsigned int last_obj_cnt ; unsigned int limit __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; unsigned int num_completed ; unsigned int prev_ovlimit ; unsigned int prev_num_queued ; unsigned int prev_last_obj_cnt ; unsigned int lowest_slack ; unsigned long slack_start_time ; unsigned int max_limit ; unsigned int min_limit ; unsigned int slack_hold_time ; }
s#dquot struct dquot { s#hlist_node dq_hash ; s#list_head dq_inuse ; s#list_head dq_free ; s#list_head dq_dirty ; s#mutex dq_lock ; t#spinlock_t dq_dqb_lock ; t#atomic_t dq_count ; s#super_block * dq_sb ; s#kqid dq_id ; t#loff_t dq_off ; unsigned long dq_flags ; s#mem_dqblk dq_dqb ; }
s#dquot_operations struct dquot_operations { int ( * write_dquot ) ( s#dquot * ) ; s#dquot * ( * alloc_dquot ) ( s#super_block * , int ) ; void ( * destroy_dquot ) ( s#dquot * ) ; int ( * acquire_dquot ) ( s#dquot * ) ; int ( * release_dquot ) ( s#dquot * ) ; int ( * mark_dirty ) ( s#dquot * ) ; int ( * write_info ) ( s#super_block * , int ) ; t#qsize_t * ( * get_reserved_space ) ( s#inode * ) ; int ( * get_projid ) ( s#inode * , t#kprojid_t * ) ; int ( * get_inode_usage ) ( s#inode * , t#qsize_t * ) ; int ( * get_next_id ) ( s#super_block * , s#kqid * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#driver_private@408764e2 struct driver_private { s#kobject kobj ; s#klist klist_devices ; s#klist_node knode_bus ; s#module_kobject * mkobj ; s#device_driver * driver ; }
s#driver_private@80bd9a0c struct driver_private { UNKNOWN }
s#drm_agp_head@ba365327 struct drm_agp_head { s#agp_kern_info agp_info ; s#list_head memory ; unsigned long mode ; s#agp_bridge_data * bridge ; int enabled ; int acquired ; unsigned long base ; int agp_mtrr ; int cant_use_aperture ; unsigned long page_mask ; }
s#drm_agp_head@c33f2cd8 struct drm_agp_head { UNKNOWN }
s#drm_atomic_state@29b68afd struct drm_atomic_state { UNKNOWN }
s#drm_atomic_state@5fd79871 struct drm_atomic_state { s#kref ref ; s#drm_device * dev ; t#bool allow_modeset : 1 ; t#bool legacy_cursor_update : 1 ; t#bool async_update : 1 ; t#bool duplicated : 1 ; s#__drm_planes_state * planes ; s#__drm_crtcs_state * crtcs ; int num_connector ; s#__drm_connnectors_state * connectors ; int num_private_objs ; s#__drm_private_objs_state * private_objs ; s#drm_modeset_acquire_ctx * acquire_ctx ; s#drm_crtc_commit * fake_commit ; s#work_struct commit_work ; }
s#drm_bridge struct drm_bridge { s#drm_device * dev ; s#drm_encoder * encoder ; s#drm_bridge * next ; s#list_head list ; const s#drm_bridge_timings * timings ; const s#drm_bridge_funcs * funcs ; void * driver_private ; }
s#drm_bridge_funcs struct drm_bridge_funcs { int ( * attach ) ( s#drm_bridge * ) ; void ( * detach ) ( s#drm_bridge * ) ; e#drm_mode_status ( * mode_valid ) ( s#drm_bridge * , const s#drm_display_mode * ) ; t#bool ( * mode_fixup ) ( s#drm_bridge * , const s#drm_display_mode * , s#drm_display_mode * ) ; void ( * disable ) ( s#drm_bridge * ) ; void ( * post_disable ) ( s#drm_bridge * ) ; void ( * mode_set ) ( s#drm_bridge * , const s#drm_display_mode * , const s#drm_display_mode * ) ; void ( * pre_enable ) ( s#drm_bridge * ) ; void ( * enable ) ( s#drm_bridge * ) ; void ( * atomic_pre_enable ) ( s#drm_bridge * , s#drm_atomic_state * ) ; void ( * atomic_enable ) ( s#drm_bridge * , s#drm_atomic_state * ) ; void ( * atomic_disable ) ( s#drm_bridge * , s#drm_atomic_state * ) ; void ( * atomic_post_disable ) ( s#drm_bridge * , s#drm_atomic_state * ) ; }
s#drm_bridge_timings struct drm_bridge_timings { t#u32 input_bus_flags ; t#u32 setup_time_ps ; t#u32 hold_time_ps ; t#bool dual_link ; }
s#drm_buf struct drm_buf { int idx ; int total ; int order ; int used ; unsigned long offset ; void * address ; unsigned long bus_address ; s#drm_buf * next ; __volatile__ int waiting ; __volatile__ int pending ; s#drm_file * file_priv ; int context ; int while_locked ; enum { DRM_LIST_NONE = 0 , DRM_LIST_FREE = 1 , DRM_LIST_WAIT = 2 , DRM_LIST_PEND = 3 , DRM_LIST_PRIO = 4 , DRM_LIST_RECLAIM = 5 } list ; int dev_priv_size ; void * dev_private ; }
s#drm_buf_entry struct drm_buf_entry { int buf_size ; int buf_count ; s#drm_buf * buflist ; int seg_count ; int page_order ; s#drm_dma_handle * * seglist ; int low_mark ; int high_mark ; }
s#drm_client_buffer struct drm_client_buffer { s#drm_client_dev * client ; t#u32 handle ; t#u32 pitch ; s#drm_gem_object * gem ; void * vaddr ; s#drm_framebuffer * fb ; }
s#drm_client_dev struct drm_client_dev { s#drm_device * dev ; const char * name ; s#list_head list ; const s#drm_client_funcs * funcs ; s#drm_file * file ; s#mutex modeset_mutex ; s#drm_mode_set * modesets ; }
s#drm_client_funcs struct drm_client_funcs { s#module * owner ; void ( * unregister ) ( s#drm_client_dev * ) ; int ( * restore ) ( s#drm_client_dev * ) ; int ( * hotplug ) ( s#drm_client_dev * ) ; }
s#drm_clip_rect struct drm_clip_rect { unsigned short x1 ; unsigned short y1 ; unsigned short x2 ; unsigned short y2 ; }
s#drm_cmdline_mode struct drm_cmdline_mode { char name [ 32 ] ; t#bool specified ; t#bool refresh_specified ; t#bool bpp_specified ; int xres ; int yres ; int bpp ; int refresh ; t#bool rb ; t#bool interlace ; t#bool cvt ; t#bool margins ; e#drm_connector_force force ; unsigned int rotation_reflection ; s#drm_connector_tv_margins tv_margins ; }
s#drm_connector struct drm_connector { s#drm_device * dev ; s#device * kdev ; s#device_attribute * attr ; s#list_head head ; s#drm_mode_object base ; char * name ; s#mutex mutex ; unsigned index ; int connector_type ; int connector_type_id ; t#bool interlace_allowed ; t#bool doublescan_allowed ; t#bool stereo_allowed ; t#bool ycbcr_420_allowed ; e#drm_connector_registration_state registration_state ; s#list_head modes ; e#drm_connector_status status ; s#list_head probed_modes ; s#drm_display_info display_info ; const s#drm_connector_funcs * funcs ; s#drm_property_blob * edid_blob_ptr ; s#drm_object_properties properties ; s#drm_property * scaling_mode_property ; s#drm_property * vrr_capable_property ; s#drm_property * colorspace_property ; s#drm_property_blob * path_blob_ptr ; s#drm_property * max_bpc_property ; t#uint8_t polled ; int dpms ; const s#drm_connector_helper_funcs * helper_private ; s#drm_cmdline_mode cmdline_mode ; e#drm_connector_force force ; t#bool override_edid ; t#uint32_t encoder_ids [ 3 ] ; s#drm_encoder * encoder ; t#uint8_t eld [ 128 ] ; t#bool latency_present [ 2 ] ; int video_latency [ 2 ] ; int audio_latency [ 2 ] ; s#i2c_adapter * ddc ; int null_edid_counter ; unsigned bad_edid_counter ; t#bool edid_corrupt ; s#dentry * debugfs_entry ; s#drm_connector_state * state ; s#drm_property_blob * tile_blob_ptr ; t#bool has_tile ; s#drm_tile_group * tile_group ; t#bool tile_is_single_monitor ; t#uint8_t num_h_tile , num_v_tile ; t#uint8_t tile_h_loc , tile_v_loc ; t#uint16_t tile_h_size , tile_v_size ; s#llist_node free_node ; s#hdr_sink_metadata hdr_sink_metadata ; }
s#drm_connector_funcs struct drm_connector_funcs { int ( * dpms ) ( s#drm_connector * , int ) ; void ( * reset ) ( s#drm_connector * ) ; e#drm_connector_status ( * detect ) ( s#drm_connector * , t#bool ) ; void ( * force ) ( s#drm_connector * ) ; int ( * fill_modes ) ( s#drm_connector * , t#uint32_t , t#uint32_t ) ; int ( * set_property ) ( s#drm_connector * , s#drm_property * , t#uint64_t ) ; int ( * late_register ) ( s#drm_connector * ) ; void ( * early_unregister ) ( s#drm_connector * ) ; void ( * destroy ) ( s#drm_connector * ) ; s#drm_connector_state * ( * atomic_duplicate_state ) ( s#drm_connector * ) ; void ( * atomic_destroy_state ) ( s#drm_connector * , s#drm_connector_state * ) ; int ( * atomic_set_property ) ( s#drm_connector * , s#drm_connector_state * , s#drm_property * , t#uint64_t ) ; int ( * atomic_get_property ) ( s#drm_connector * , const s#drm_connector_state * , s#drm_property * , t#uint64_t * ) ; void ( * atomic_print_state ) ( s#drm_printer * , const s#drm_connector_state * ) ; }
s#drm_connector_helper_funcs@3c5b23fa struct drm_connector_helper_funcs { UNKNOWN }
s#drm_connector_helper_funcs@5fecad4f struct drm_connector_helper_funcs { int ( * get_modes ) ( s#drm_connector * ) ; int ( * detect_ctx ) ( s#drm_connector * , s#drm_modeset_acquire_ctx * , t#bool ) ; e#drm_mode_status ( * mode_valid ) ( s#drm_connector * , s#drm_display_mode * ) ; s#drm_encoder * ( * best_encoder ) ( s#drm_connector * ) ; s#drm_encoder * ( * atomic_best_encoder ) ( s#drm_connector * , s#drm_connector_state * ) ; int ( * atomic_check ) ( s#drm_connector * , s#drm_atomic_state * ) ; void ( * atomic_commit ) ( s#drm_connector * , s#drm_connector_state * ) ; int ( * prepare_writeback_job ) ( s#drm_writeback_connector * , s#drm_writeback_job * ) ; void ( * cleanup_writeback_job ) ( s#drm_writeback_connector * , s#drm_writeback_job * ) ; }
s#drm_connector_state struct drm_connector_state { s#drm_connector * connector ; s#drm_crtc * crtc ; s#drm_encoder * best_encoder ; e#drm_link_status link_status ; s#drm_atomic_state * state ; s#drm_crtc_commit * commit ; s#drm_tv_connector_state tv ; t#bool self_refresh_aware ; e#hdmi_picture_aspect picture_aspect_ratio ; unsigned int content_type ; unsigned int hdcp_content_type ; unsigned int scaling_mode ; unsigned int content_protection ; t#u32 colorspace ; s#drm_writeback_job * writeback_job ; t#u8 max_requested_bpc ; t#u8 max_bpc ; s#drm_property_blob * hdr_output_metadata ; }
s#drm_connector_tv_margins struct drm_connector_tv_margins { unsigned int bottom ; unsigned int left ; unsigned int right ; unsigned int top ; }
s#drm_crtc@8fc2419f struct drm_crtc { UNKNOWN }
s#drm_crtc@9c9d4a7a struct drm_crtc { s#drm_device * dev ; s#device_node * port ; s#list_head head ; char * name ; s#drm_modeset_lock mutex ; s#drm_mode_object base ; s#drm_plane * primary ; s#drm_plane * cursor ; unsigned index ; int cursor_x ; int cursor_y ; t#bool enabled ; s#drm_display_mode mode ; s#drm_display_mode hwmode ; int x ; int y ; const s#drm_crtc_funcs * funcs ; t#uint32_t gamma_size ; t#uint16_t * gamma_store ; const s#drm_crtc_helper_funcs * helper_private ; s#drm_object_properties properties ; s#drm_crtc_state * state ; s#list_head commit_list ; t#spinlock_t commit_lock ; s#dentry * debugfs_entry ; s#drm_crtc_crc crc ; unsigned int fence_context ; t#spinlock_t fence_lock ; unsigned long fence_seqno ; char timeline_name [ 32 ] ; s#drm_self_refresh_data * self_refresh_data ; }
s#drm_crtc_commit@1f5d7ca0 struct drm_crtc_commit { s#drm_crtc * crtc ; s#kref ref ; s#completion flip_done ; s#completion hw_done ; s#completion cleanup_done ; s#list_head commit_entry ; s#drm_pending_vblank_event * event ; t#bool abort_completion ; }
s#drm_crtc_commit@3e47b158 struct drm_crtc_commit { UNKNOWN }
s#drm_crtc_crc struct drm_crtc_crc { t#spinlock_t lock ; const char * source ; t#bool opened , overflow ; s#drm_crtc_crc_entry * entries ; int head , tail ; t#size_t values_cnt ; t#wait_queue_head_t wq ; }
s#drm_crtc_crc_entry struct drm_crtc_crc_entry { t#bool has_frame_counter ; t#uint32_t frame ; t#uint32_t crcs [ 10 ] ; }
s#drm_crtc_funcs struct drm_crtc_funcs { void ( * reset ) ( s#drm_crtc * ) ; int ( * cursor_set ) ( s#drm_crtc * , s#drm_file * , t#uint32_t , t#uint32_t , t#uint32_t ) ; int ( * cursor_set2 ) ( s#drm_crtc * , s#drm_file * , t#uint32_t , t#uint32_t , t#uint32_t , t#int32_t , t#int32_t ) ; int ( * cursor_move ) ( s#drm_crtc * , int , int ) ; int ( * gamma_set ) ( s#drm_crtc * , t#u16 * , t#u16 * , t#u16 * , t#uint32_t , s#drm_modeset_acquire_ctx * ) ; void ( * destroy ) ( s#drm_crtc * ) ; int ( * set_config ) ( s#drm_mode_set * , s#drm_modeset_acquire_ctx * ) ; int ( * page_flip ) ( s#drm_crtc * , s#drm_framebuffer * , s#drm_pending_vblank_event * , t#uint32_t , s#drm_modeset_acquire_ctx * ) ; int ( * page_flip_target ) ( s#drm_crtc * , s#drm_framebuffer * , s#drm_pending_vblank_event * , t#uint32_t , t#uint32_t , s#drm_modeset_acquire_ctx * ) ; int ( * set_property ) ( s#drm_crtc * , s#drm_property * , t#uint64_t ) ; s#drm_crtc_state * ( * atomic_duplicate_state ) ( s#drm_crtc * ) ; void ( * atomic_destroy_state ) ( s#drm_crtc * , s#drm_crtc_state * ) ; int ( * atomic_set_property ) ( s#drm_crtc * , s#drm_crtc_state * , s#drm_property * , t#uint64_t ) ; int ( * atomic_get_property ) ( s#drm_crtc * , const s#drm_crtc_state * , s#drm_property * , t#uint64_t * ) ; int ( * late_register ) ( s#drm_crtc * ) ; void ( * early_unregister ) ( s#drm_crtc * ) ; int ( * set_crc_source ) ( s#drm_crtc * , const char * ) ; int ( * verify_crc_source ) ( s#drm_crtc * , const char * , t#size_t * ) ; const char * const * ( * get_crc_sources ) ( s#drm_crtc * , t#size_t * ) ; void ( * atomic_print_state ) ( s#drm_printer * , const s#drm_crtc_state * ) ; t#u32 ( * get_vblank_counter ) ( s#drm_crtc * ) ; int ( * enable_vblank ) ( s#drm_crtc * ) ; void ( * disable_vblank ) ( s#drm_crtc * ) ; }
s#drm_crtc_helper_funcs@37d3f30d struct drm_crtc_helper_funcs { UNKNOWN }
s#drm_crtc_helper_funcs@b225cf3a struct drm_crtc_helper_funcs { void ( * dpms ) ( s#drm_crtc * , int ) ; void ( * prepare ) ( s#drm_crtc * ) ; void ( * commit ) ( s#drm_crtc * ) ; e#drm_mode_status ( * mode_valid ) ( s#drm_crtc * , const s#drm_display_mode * ) ; t#bool ( * mode_fixup ) ( s#drm_crtc * , const s#drm_display_mode * , s#drm_display_mode * ) ; int ( * mode_set ) ( s#drm_crtc * , s#drm_display_mode * , s#drm_display_mode * , int , int , s#drm_framebuffer * ) ; void ( * mode_set_nofb ) ( s#drm_crtc * ) ; int ( * mode_set_base ) ( s#drm_crtc * , int , int , s#drm_framebuffer * ) ; int ( * mode_set_base_atomic ) ( s#drm_crtc * , s#drm_framebuffer * , int , int , e#mode_set_atomic ) ; void ( * disable ) ( s#drm_crtc * ) ; int ( * atomic_check ) ( s#drm_crtc * , s#drm_crtc_state * ) ; void ( * atomic_begin ) ( s#drm_crtc * , s#drm_crtc_state * ) ; void ( * atomic_flush ) ( s#drm_crtc * , s#drm_crtc_state * ) ; void ( * atomic_enable ) ( s#drm_crtc * , s#drm_crtc_state * ) ; void ( * atomic_disable ) ( s#drm_crtc * , s#drm_crtc_state * ) ; }
s#drm_crtc_state struct drm_crtc_state { s#drm_crtc * crtc ; t#bool enable ; t#bool active ; t#bool planes_changed : 1 ; t#bool mode_changed : 1 ; t#bool active_changed : 1 ; t#bool connectors_changed : 1 ; t#bool zpos_changed : 1 ; t#bool color_mgmt_changed : 1 ; t#bool no_vblank : 1 ; t#u32 plane_mask ; t#u32 connector_mask ; t#u32 encoder_mask ; s#drm_display_mode adjusted_mode ; s#drm_display_mode mode ; s#drm_property_blob * mode_blob ; s#drm_property_blob * degamma_lut ; s#drm_property_blob * ctm ; s#drm_property_blob * gamma_lut ; t#u32 target_vblank ; t#bool async_flip ; t#bool vrr_enabled ; t#bool self_refresh_active ; s#drm_pending_vblank_event * event ; s#drm_crtc_commit * commit ; s#drm_atomic_state * state ; }
s#drm_device@2410e563 struct drm_device { UNKNOWN }
s#drm_device@f01f4e00 struct drm_device { s#list_head legacy_dev_list ; int if_version ; s#kref ref ; s#device * dev ; s#drm_driver * driver ; void * dev_private ; s#drm_minor * primary ; s#drm_minor * render ; t#bool registered ; s#drm_master * master ; t#u32 driver_features ; t#bool unplugged ; s#inode * anon_inode ; char * unique ; s#mutex struct_mutex ; s#mutex master_mutex ; int open_count ; s#mutex filelist_mutex ; s#list_head filelist ; s#list_head filelist_internal ; s#mutex clientlist_mutex ; s#list_head clientlist ; t#bool irq_enabled ; int irq ; t#bool vblank_disable_immediate ; s#drm_vblank_crtc * vblank ; t#spinlock_t vblank_time_lock ; t#spinlock_t vbl_lock ; t#u32 max_vblank_count ; s#list_head vblank_event_list ; t#spinlock_t event_lock ; s#drm_agp_head * agp ; s#pci_dev * pdev ; unsigned int num_crtcs ; s#drm_mode_config mode_config ; s#mutex object_name_lock ; s#idr object_name_idr ; s#drm_vma_offset_manager * vma_offset_manager ; s#drm_vram_mm * vram_mm ; e#switch_power_state switch_power_state ; s#drm_fb_helper * fb_helper ; s#list_head ctxlist ; s#mutex ctxlist_mutex ; s#idr ctx_idr ; s#list_head maplist ; s#drm_open_hash map_hash ; s#list_head vmalist ; s#drm_device_dma * dma ; __volatile__ long context_flag ; int last_context ; t#spinlock_t buf_lock ; int buf_use ; t#atomic_t buf_alloc ; struct { int context ; s#drm_hw_lock * lock ; } sigdata ; s#drm_local_map * agp_buffer_map ; unsigned int agp_buffer_token ; s#drm_sg_mem * sg ; }
s#drm_device_dma@170ac67a struct drm_device_dma { s#drm_buf_entry bufs [ 22 + 1 ] ; int buf_count ; s#drm_buf * * buflist ; int seg_count ; int page_count ; unsigned long * pagelist ; unsigned long byte_count ; enum { _DRM_DMA_USE_AGP = 0x01 , _DRM_DMA_USE_SG = 0x02 , _DRM_DMA_USE_FB = 0x04 , _DRM_DMA_USE_PCI_RO = 0x08 } flags ; }
s#drm_device_dma@f324333c struct drm_device_dma { UNKNOWN }
s#drm_display_info struct drm_display_info { unsigned int width_mm ; unsigned int height_mm ; unsigned int bpc ; e#subpixel_order subpixel_order ; int panel_orientation ; t#u32 color_formats ; const t#u32 * bus_formats ; unsigned int num_bus_formats ; t#u32 bus_flags ; int max_tmds_clock ; t#bool dvi_dual ; t#bool has_hdmi_infoframe ; t#bool rgb_quant_range_selectable ; t#u8 edid_hdmi_dc_modes ; t#u8 cea_rev ; s#drm_hdmi_info hdmi ; t#bool non_desktop ; }
s#drm_display_mode@371d70fe struct drm_display_mode { s#list_head head ; char name [ 32 ] ; e#drm_mode_status status ; unsigned int type ; int clock ; int hdisplay ; int hsync_start ; int hsync_end ; int htotal ; int hskew ; int vdisplay ; int vsync_start ; int vsync_end ; int vtotal ; int vscan ; unsigned int flags ; int width_mm ; int height_mm ; int crtc_clock ; int crtc_hdisplay ; int crtc_hblank_start ; int crtc_hblank_end ; int crtc_hsync_start ; int crtc_hsync_end ; int crtc_htotal ; int crtc_hskew ; int crtc_vdisplay ; int crtc_vblank_start ; int crtc_vblank_end ; int crtc_vsync_start ; int crtc_vsync_end ; int crtc_vtotal ; int * private ; int private_flags ; int vrefresh ; int hsync ; e#hdmi_picture_aspect picture_aspect_ratio ; s#list_head export_head ; }
s#drm_display_mode@4e593122 struct drm_display_mode { UNKNOWN }
s#drm_dma_handle struct drm_dma_handle { t#dma_addr_t busaddr ; void * vaddr ; t#size_t size ; }
s#drm_driver@89b09d3d struct drm_driver { int ( * load ) ( s#drm_device * , unsigned long ) ; int ( * open ) ( s#drm_device * , s#drm_file * ) ; void ( * postclose ) ( s#drm_device * , s#drm_file * ) ; void ( * lastclose ) ( s#drm_device * ) ; void ( * unload ) ( s#drm_device * ) ; void ( * release ) ( s#drm_device * ) ; t#u32 ( * get_vblank_counter ) ( s#drm_device * , unsigned int ) ; int ( * enable_vblank ) ( s#drm_device * , unsigned int ) ; void ( * disable_vblank ) ( s#drm_device * , unsigned int ) ; t#bool ( * get_scanout_position ) ( s#drm_device * , unsigned int , t#bool , int * , int * , t#ktime_t * , t#ktime_t * , const s#drm_display_mode * ) ; t#bool ( * get_vblank_timestamp ) ( s#drm_device * , unsigned int , int * , t#ktime_t * , t#bool ) ; t#irqreturn_t ( * irq_handler ) ( int , void * ) ; void ( * irq_preinstall ) ( s#drm_device * ) ; int ( * irq_postinstall ) ( s#drm_device * ) ; void ( * irq_uninstall ) ( s#drm_device * ) ; int ( * master_create ) ( s#drm_device * , s#drm_master * ) ; void ( * master_destroy ) ( s#drm_device * , s#drm_master * ) ; int ( * master_set ) ( s#drm_device * , s#drm_file * , t#bool ) ; void ( * master_drop ) ( s#drm_device * , s#drm_file * ) ; int ( * debugfs_init ) ( s#drm_minor * ) ; void ( * gem_free_object ) ( s#drm_gem_object * ) ; void ( * gem_free_object_unlocked ) ( s#drm_gem_object * ) ; int ( * gem_open_object ) ( s#drm_gem_object * , s#drm_file * ) ; void ( * gem_close_object ) ( s#drm_gem_object * , s#drm_file * ) ; void ( * gem_print_info ) ( s#drm_printer * , unsigned int , const s#drm_gem_object * ) ; s#drm_gem_object * ( * gem_create_object ) ( s#drm_device * , t#size_t ) ; int ( * prime_handle_to_fd ) ( s#drm_device * , s#drm_file * , t#uint32_t , t#uint32_t , int * ) ; int ( * prime_fd_to_handle ) ( s#drm_device * , s#drm_file * , int , t#uint32_t * ) ; s#dma_buf * ( * gem_prime_export ) ( s#drm_gem_object * , int ) ; s#drm_gem_object * ( * gem_prime_import ) ( s#drm_device * , s#dma_buf * ) ; int ( * gem_prime_pin ) ( s#drm_gem_object * ) ; void ( * gem_prime_unpin ) ( s#drm_gem_object * ) ; s#sg_table * ( * gem_prime_get_sg_table ) ( s#drm_gem_object * ) ; s#drm_gem_object * ( * gem_prime_import_sg_table ) ( s#drm_device * , s#dma_buf_attachment * , s#sg_table * ) ; void * ( * gem_prime_vmap ) ( s#drm_gem_object * ) ; void ( * gem_prime_vunmap ) ( s#drm_gem_object * , void * ) ; int ( * gem_prime_mmap ) ( s#drm_gem_object * , s#vm_area_struct * ) ; int ( * dumb_create ) ( s#drm_file * , s#drm_device * , s#drm_mode_create_dumb * ) ; int ( * dumb_map_offset ) ( s#drm_file * , s#drm_device * , t#uint32_t , t#uint64_t * ) ; int ( * dumb_destroy ) ( s#drm_file * , s#drm_device * , t#uint32_t ) ; const s#vm_operations_struct * gem_vm_ops ; int major ; int minor ; int patchlevel ; char * name ; char * desc ; char * date ; t#u32 driver_features ; const s#drm_ioctl_desc * ioctls ; int num_ioctls ; const s#file_operations * fops ; s#list_head legacy_dev_list ; int ( * firstopen ) ( s#drm_device * ) ; void ( * preclose ) ( s#drm_device * , s#drm_file * ) ; int ( * dma_ioctl ) ( s#drm_device * , void * , s#drm_file * ) ; int ( * dma_quiescent ) ( s#drm_device * ) ; int ( * context_dtor ) ( s#drm_device * , int ) ; int dev_priv_size ; }
s#drm_driver@89de969d struct drm_driver { UNKNOWN }
s#drm_encoder@293b3591 struct drm_encoder { UNKNOWN }
s#drm_encoder@e709a8f3 struct drm_encoder { s#drm_device * dev ; s#list_head head ; s#drm_mode_object base ; char * name ; int encoder_type ; unsigned index ; t#uint32_t possible_crtcs ; t#uint32_t possible_clones ; s#drm_crtc * crtc ; s#drm_bridge * bridge ; const s#drm_encoder_funcs * funcs ; const s#drm_encoder_helper_funcs * helper_private ; }
s#drm_encoder_funcs struct drm_encoder_funcs { void ( * reset ) ( s#drm_encoder * ) ; void ( * destroy ) ( s#drm_encoder * ) ; int ( * late_register ) ( s#drm_encoder * ) ; void ( * early_unregister ) ( s#drm_encoder * ) ; }
s#drm_encoder_helper_funcs@311eff43 struct drm_encoder_helper_funcs { void ( * dpms ) ( s#drm_encoder * , int ) ; e#drm_mode_status ( * mode_valid ) ( s#drm_encoder * , const s#drm_display_mode * ) ; t#bool ( * mode_fixup ) ( s#drm_encoder * , const s#drm_display_mode * , s#drm_display_mode * ) ; void ( * prepare ) ( s#drm_encoder * ) ; void ( * commit ) ( s#drm_encoder * ) ; void ( * mode_set ) ( s#drm_encoder * , s#drm_display_mode * , s#drm_display_mode * ) ; void ( * atomic_mode_set ) ( s#drm_encoder * , s#drm_crtc_state * , s#drm_connector_state * ) ; s#drm_crtc * ( * get_crtc ) ( s#drm_encoder * ) ; e#drm_connector_status ( * detect ) ( s#drm_encoder * , s#drm_connector * ) ; void ( * atomic_disable ) ( s#drm_encoder * , s#drm_atomic_state * ) ; void ( * atomic_enable ) ( s#drm_encoder * , s#drm_atomic_state * ) ; void ( * disable ) ( s#drm_encoder * ) ; void ( * enable ) ( s#drm_encoder * ) ; int ( * atomic_check ) ( s#drm_encoder * , s#drm_crtc_state * , s#drm_connector_state * ) ; }
s#drm_encoder_helper_funcs@b856403a struct drm_encoder_helper_funcs { UNKNOWN }
s#drm_event struct drm_event { t#__u32 type ; t#__u32 length ; }
s#drm_event_crtc_sequence struct drm_event_crtc_sequence { s#drm_event base ; t#__u64 user_data ; t#__s64 time_ns ; t#__u64 sequence ; }
s#drm_event_vblank struct drm_event_vblank { s#drm_event base ; t#__u64 user_data ; t#__u32 tv_sec ; t#__u32 tv_usec ; t#__u32 sequence ; t#__u32 crtc_id ; }
s#drm_fb_helper@84ff80c8 struct drm_fb_helper { s#drm_client_dev client ; s#drm_client_buffer * buffer ; s#drm_framebuffer * fb ; s#drm_device * dev ; const s#drm_fb_helper_funcs * funcs ; s#fb_info * fbdev ; t#u32 pseudo_palette [ 17 ] ; s#drm_clip_rect dirty_clip ; t#spinlock_t dirty_lock ; s#work_struct dirty_work ; s#work_struct resume_work ; s#mutex lock ; s#list_head kernel_fb_list ; t#bool delayed_hotplug ; t#bool deferred_setup ; int preferred_bpp ; }
s#drm_fb_helper@dc5ca20c struct drm_fb_helper { UNKNOWN }
s#drm_fb_helper_funcs struct drm_fb_helper_funcs { int ( * fb_probe ) ( s#drm_fb_helper * , s#drm_fb_helper_surface_size * ) ; }
s#drm_fb_helper_surface_size struct drm_fb_helper_surface_size { t#u32 fb_width ; t#u32 fb_height ; t#u32 surface_width ; t#u32 surface_height ; t#u32 surface_bpp ; t#u32 surface_depth ; }
s#drm_file@49c1474e struct drm_file { UNKNOWN }
s#drm_file@bb08bb79 struct drm_file { t#bool authenticated ; t#bool stereo_allowed ; t#bool universal_planes ; t#bool atomic ; t#bool aspect_ratio_allowed ; t#bool writeback_connectors ; t#bool is_master ; s#drm_master * master ; s#pid * pid ; t#drm_magic_t magic ; s#list_head lhead ; s#drm_minor * minor ; s#idr object_idr ; t#spinlock_t table_lock ; s#idr syncobj_idr ; t#spinlock_t syncobj_table_lock ; s#file * filp ; void * driver_priv ; s#list_head fbs ; s#mutex fbs_lock ; s#list_head blobs ; t#wait_queue_head_t event_wait ; s#list_head pending_event_list ; s#list_head event_list ; int event_space ; s#mutex event_read_lock ; s#drm_prime_file_private prime ; unsigned long lock_count ; }
s#drm_format_info@6837d0de struct drm_format_info { t#u32 format ; t#u8 depth ; t#u8 num_planes ; union { t#u8 cpp [ 3 ] ; t#u8 char_per_block [ 3 ] ; } ; t#u8 block_w [ 3 ] ; t#u8 block_h [ 3 ] ; t#u8 hsub ; t#u8 vsub ; t#bool has_alpha ; t#bool is_yuv ; }
s#drm_format_info@cc8c824a struct drm_format_info { UNKNOWN }
s#drm_framebuffer@893ba53b struct drm_framebuffer { s#drm_device * dev ; s#list_head head ; s#drm_mode_object base ; char comm [ 16 ] ; const s#drm_format_info * format ; const s#drm_framebuffer_funcs * funcs ; unsigned int pitches [ 4 ] ; unsigned int offsets [ 4 ] ; t#uint64_t modifier ; unsigned int width ; unsigned int height ; int flags ; int hot_x ; int hot_y ; s#list_head filp_head ; s#drm_gem_object * obj [ 4 ] ; }
s#drm_framebuffer@f1c36731 struct drm_framebuffer { UNKNOWN }
s#drm_framebuffer_funcs struct drm_framebuffer_funcs { void ( * destroy ) ( s#drm_framebuffer * ) ; int ( * create_handle ) ( s#drm_framebuffer * , s#drm_file * , unsigned int * ) ; int ( * dirty ) ( s#drm_framebuffer * , s#drm_file * , unsigned , unsigned , s#drm_clip_rect * , unsigned ) ; }
s#drm_gem_object@0843e595 struct drm_gem_object { UNKNOWN }
s#drm_gem_object@377040dc struct drm_gem_object { s#kref refcount ; unsigned handle_count ; s#drm_device * dev ; s#file * filp ; s#drm_vma_offset_node vma_node ; t#size_t size ; int name ; s#dma_buf * dma_buf ; s#dma_buf_attachment * import_attach ; s#dma_resv * resv ; s#dma_resv _resv ; const s#drm_gem_object_funcs * funcs ; }
s#drm_gem_object_funcs struct drm_gem_object_funcs { void ( * free ) ( s#drm_gem_object * ) ; int ( * open ) ( s#drm_gem_object * , s#drm_file * ) ; void ( * close ) ( s#drm_gem_object * , s#drm_file * ) ; void ( * print_info ) ( s#drm_printer * , unsigned int , const s#drm_gem_object * ) ; s#dma_buf * ( * export ) ( s#drm_gem_object * , int ) ; int ( * pin ) ( s#drm_gem_object * ) ; void ( * unpin ) ( s#drm_gem_object * ) ; s#sg_table * ( * get_sg_table ) ( s#drm_gem_object * ) ; void * ( * vmap ) ( s#drm_gem_object * ) ; void ( * vunmap ) ( s#drm_gem_object * , void * ) ; const s#vm_operations_struct * vm_ops ; }
s#drm_hdmi_info struct drm_hdmi_info { s#drm_scdc scdc ; unsigned long y420_vdb_modes [ ( ( ( 128 ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long y420_cmdb_modes [ ( ( ( 128 ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; t#u64 y420_cmdb_map ; t#u8 y420_dc_modes ; }
s#drm_hw_lock struct drm_hw_lock { __volatile__ unsigned int lock ; char padding [ 60 ] ; }
s#drm_ioctl_desc@3f35714d struct drm_ioctl_desc { UNKNOWN }
s#drm_ioctl_desc@f665e742 struct drm_ioctl_desc { unsigned int cmd ; e#drm_ioctl_flags flags ; t#drm_ioctl_t * func ; const char * name ; }
s#drm_local_map@bdecdd4c struct drm_local_map { UNKNOWN }
s#drm_local_map@fe62129b struct drm_local_map { t#resource_size_t offset ; unsigned long size ; e#drm_map_type type ; e#drm_map_flags flags ; void * handle ; int mtrr ; }
s#drm_lock_data struct drm_lock_data { s#drm_hw_lock * hw_lock ; s#drm_file * file_priv ; t#wait_queue_head_t lock_queue ; unsigned long lock_time ; t#spinlock_t spinlock ; t#uint32_t kernel_waiters ; t#uint32_t user_waiters ; int idle_has_lock ; }
s#drm_master@50c9739b struct drm_master { UNKNOWN }
s#drm_master@6756e15d struct drm_master { s#kref refcount ; s#drm_device * dev ; char * unique ; int unique_len ; s#idr magic_map ; void * driver_priv ; s#drm_master * lessor ; int lessee_id ; s#list_head lessee_list ; s#list_head lessees ; s#idr leases ; s#idr lessee_idr ; s#drm_lock_data lock ; }
s#drm_minor@983d54ed struct drm_minor { UNKNOWN }
s#drm_minor@cb6c1386 struct drm_minor { int index ; int type ; s#device * kdev ; s#drm_device * dev ; s#dentry * debugfs_root ; s#list_head debugfs_list ; s#mutex debugfs_lock ; }
s#drm_mm struct drm_mm { void ( * color_adjust ) ( const s#drm_mm_node * , unsigned long , t#u64 * , t#u64 * ) ; s#list_head hole_stack ; s#drm_mm_node head_node ; s#rb_root_cached interval_tree ; s#rb_root_cached holes_size ; s#rb_root holes_addr ; unsigned long scan_active ; }
s#drm_mm_node struct drm_mm_node { unsigned long color ; t#u64 start ; t#u64 size ; s#drm_mm * mm ; s#list_head node_list ; s#list_head hole_stack ; s#rb_node rb ; s#rb_node rb_hole_size ; s#rb_node rb_hole_addr ; t#u64 __subtree_last ; t#u64 hole_size ; t#bool allocated : 1 ; t#bool scanned_block : 1 ; }
s#drm_mode_config struct drm_mode_config { s#mutex mutex ; s#drm_modeset_lock connection_mutex ; s#drm_modeset_acquire_ctx * acquire_ctx ; s#mutex idr_mutex ; s#idr object_idr ; s#idr tile_idr ; s#mutex fb_lock ; int num_fb ; s#list_head fb_list ; t#spinlock_t connector_list_lock ; int num_connector ; s#ida connector_ida ; s#list_head connector_list ; s#llist_head connector_free_list ; s#work_struct connector_free_work ; int num_encoder ; s#list_head encoder_list ; int num_total_plane ; s#list_head plane_list ; int num_crtc ; s#list_head crtc_list ; s#list_head property_list ; s#list_head privobj_list ; int min_width , min_height ; int max_width , max_height ; const s#drm_mode_config_funcs * funcs ; t#resource_size_t fb_base ; t#bool poll_enabled ; t#bool poll_running ; t#bool delayed_event ; s#delayed_work output_poll_work ; s#mutex blob_lock ; s#list_head property_blob_list ; s#drm_property * edid_property ; s#drm_property * dpms_property ; s#drm_property * path_property ; s#drm_property * tile_property ; s#drm_property * link_status_property ; s#drm_property * plane_type_property ; s#drm_property * prop_src_x ; s#drm_property * prop_src_y ; s#drm_property * prop_src_w ; s#drm_property * prop_src_h ; s#drm_property * prop_crtc_x ; s#drm_property * prop_crtc_y ; s#drm_property * prop_crtc_w ; s#drm_property * prop_crtc_h ; s#drm_property * prop_fb_id ; s#drm_property * prop_in_fence_fd ; s#drm_property * prop_out_fence_ptr ; s#drm_property * prop_crtc_id ; s#drm_property * prop_fb_damage_clips ; s#drm_property * prop_active ; s#drm_property * prop_mode_id ; s#drm_property * prop_vrr_enabled ; s#drm_property * dvi_i_subconnector_property ; s#drm_property * dvi_i_select_subconnector_property ; s#drm_property * tv_subconnector_property ; s#drm_property * tv_select_subconnector_property ; s#drm_property * tv_mode_property ; s#drm_property * tv_left_margin_property ; s#drm_property * tv_right_margin_property ; s#drm_property * tv_top_margin_property ; s#drm_property * tv_bottom_margin_property ; s#drm_property * tv_brightness_property ; s#drm_property * tv_contrast_property ; s#drm_property * tv_flicker_reduction_property ; s#drm_property * tv_overscan_property ; s#drm_property * tv_saturation_property ; s#drm_property * tv_hue_property ; s#drm_property * scaling_mode_property ; s#drm_property * aspect_ratio_property ; s#drm_property * content_type_property ; s#drm_property * degamma_lut_property ; s#drm_property * degamma_lut_size_property ; s#drm_property * ctm_property ; s#drm_property * gamma_lut_property ; s#drm_property * gamma_lut_size_property ; s#drm_property * suggested_x_property ; s#drm_property * suggested_y_property ; s#drm_property * non_desktop_property ; s#drm_property * panel_orientation_property ; s#drm_property * writeback_fb_id_property ; s#drm_property * writeback_pixel_formats_property ; s#drm_property * writeback_out_fence_ptr_property ; s#drm_property * hdr_output_metadata_property ; s#drm_property * content_protection_property ; s#drm_property * hdcp_content_type_property ; t#uint32_t preferred_depth , prefer_shadow ; t#bool prefer_shadow_fbdev ; t#bool quirk_addfb_prefer_xbgr_30bpp ; t#bool quirk_addfb_prefer_host_byte_order ; t#bool async_page_flip ; t#bool allow_fb_modifiers ; t#bool normalize_zpos ; s#drm_property * modifiers_property ; t#uint32_t cursor_width , cursor_height ; s#drm_atomic_state * suspend_state ; const s#drm_mode_config_helper_funcs * helper_private ; }
s#drm_mode_config_funcs struct drm_mode_config_funcs { s#drm_framebuffer * ( * fb_create ) ( s#drm_device * , s#drm_file * , const s#drm_mode_fb_cmd2 * ) ; const s#drm_format_info * ( * get_format_info ) ( const s#drm_mode_fb_cmd2 * ) ; void ( * output_poll_changed ) ( s#drm_device * ) ; e#drm_mode_status ( * mode_valid ) ( s#drm_device * , const s#drm_display_mode * ) ; int ( * atomic_check ) ( s#drm_device * , s#drm_atomic_state * ) ; int ( * atomic_commit ) ( s#drm_device * , s#drm_atomic_state * , t#bool ) ; s#drm_atomic_state * ( * atomic_state_alloc ) ( s#drm_device * ) ; void ( * atomic_state_clear ) ( s#drm_atomic_state * ) ; void ( * atomic_state_free ) ( s#drm_atomic_state * ) ; }
s#drm_mode_config_helper_funcs@8d991067 struct drm_mode_config_helper_funcs { void ( * atomic_commit_tail ) ( s#drm_atomic_state * ) ; }
s#drm_mode_config_helper_funcs@fb91c19d struct drm_mode_config_helper_funcs { UNKNOWN }
s#drm_mode_create_dumb struct drm_mode_create_dumb { t#__u32 height ; t#__u32 width ; t#__u32 bpp ; t#__u32 flags ; t#__u32 handle ; t#__u32 pitch ; t#__u64 size ; }
s#drm_mode_fb_cmd2 struct drm_mode_fb_cmd2 { t#__u32 fb_id ; t#__u32 width ; t#__u32 height ; t#__u32 pixel_format ; t#__u32 flags ; t#__u32 handles [ 4 ] ; t#__u32 pitches [ 4 ] ; t#__u32 offsets [ 4 ] ; t#__u64 modifier [ 4 ] ; }
s#drm_mode_object struct drm_mode_object { t#uint32_t id ; t#uint32_t type ; s#drm_object_properties * properties ; s#kref refcount ; void ( * free_cb ) ( s#kref * ) ; }
s#drm_mode_set struct drm_mode_set { s#drm_framebuffer * fb ; s#drm_crtc * crtc ; s#drm_display_mode * mode ; t#uint32_t x ; t#uint32_t y ; s#drm_connector * * connectors ; t#size_t num_connectors ; }
s#drm_modeset_acquire_ctx struct drm_modeset_acquire_ctx { s#ww_acquire_ctx ww_ctx ; s#drm_modeset_lock * contended ; s#list_head locked ; t#bool trylock_only ; t#bool interruptible ; }
s#drm_modeset_lock struct drm_modeset_lock { s#ww_mutex mutex ; s#list_head head ; }
s#drm_object_properties struct drm_object_properties { int count ; s#drm_property * properties [ 24 ] ; t#uint64_t values [ 24 ] ; }
s#drm_open_hash struct drm_open_hash { s#hlist_head * table ; t#u8 order ; }
s#drm_pending_event struct drm_pending_event { s#completion * completion ; void ( * completion_release ) ( s#completion * ) ; s#drm_event * event ; s#dma_fence * fence ; s#drm_file * file_priv ; s#list_head link ; s#list_head pending_link ; }
s#drm_pending_vblank_event@ab3ce691 struct drm_pending_vblank_event { s#drm_pending_event base ; unsigned int pipe ; t#u64 sequence ; union { s#drm_event base ; s#drm_event_vblank vbl ; s#drm_event_crtc_sequence seq ; } event ; }
s#drm_pending_vblank_event@c8ec8e16 struct drm_pending_vblank_event { UNKNOWN }
s#drm_plane struct drm_plane { s#drm_device * dev ; s#list_head head ; char * name ; s#drm_modeset_lock mutex ; s#drm_mode_object base ; t#uint32_t possible_crtcs ; t#uint32_t * format_types ; unsigned int format_count ; t#bool format_default ; t#uint64_t * modifiers ; unsigned int modifier_count ; s#drm_crtc * crtc ; s#drm_framebuffer * fb ; s#drm_framebuffer * old_fb ; const s#drm_plane_funcs * funcs ; s#drm_object_properties properties ; e#drm_plane_type type ; unsigned index ; const s#drm_plane_helper_funcs * helper_private ; s#drm_plane_state * state ; s#drm_property * alpha_property ; s#drm_property * zpos_property ; s#drm_property * rotation_property ; s#drm_property * blend_mode_property ; s#drm_property * color_encoding_property ; s#drm_property * color_range_property ; }
s#drm_plane_funcs struct drm_plane_funcs { int ( * update_plane ) ( s#drm_plane * , s#drm_crtc * , s#drm_framebuffer * , int , int , unsigned int , unsigned int , t#uint32_t , t#uint32_t , t#uint32_t , t#uint32_t , s#drm_modeset_acquire_ctx * ) ; int ( * disable_plane ) ( s#drm_plane * , s#drm_modeset_acquire_ctx * ) ; void ( * destroy ) ( s#drm_plane * ) ; void ( * reset ) ( s#drm_plane * ) ; int ( * set_property ) ( s#drm_plane * , s#drm_property * , t#uint64_t ) ; s#drm_plane_state * ( * atomic_duplicate_state ) ( s#drm_plane * ) ; void ( * atomic_destroy_state ) ( s#drm_plane * , s#drm_plane_state * ) ; int ( * atomic_set_property ) ( s#drm_plane * , s#drm_plane_state * , s#drm_property * , t#uint64_t ) ; int ( * atomic_get_property ) ( s#drm_plane * , const s#drm_plane_state * , s#drm_property * , t#uint64_t * ) ; int ( * late_register ) ( s#drm_plane * ) ; void ( * early_unregister ) ( s#drm_plane * ) ; void ( * atomic_print_state ) ( s#drm_printer * , const s#drm_plane_state * ) ; t#bool ( * format_mod_supported ) ( s#drm_plane * , t#uint32_t , t#uint64_t ) ; }
s#drm_plane_helper_funcs@1b5e7541 struct drm_plane_helper_funcs { UNKNOWN }
s#drm_plane_helper_funcs@e13aa34c struct drm_plane_helper_funcs { int ( * prepare_fb ) ( s#drm_plane * , s#drm_plane_state * ) ; void ( * cleanup_fb ) ( s#drm_plane * , s#drm_plane_state * ) ; int ( * atomic_check ) ( s#drm_plane * , s#drm_plane_state * ) ; void ( * atomic_update ) ( s#drm_plane * , s#drm_plane_state * ) ; void ( * atomic_disable ) ( s#drm_plane * , s#drm_plane_state * ) ; int ( * atomic_async_check ) ( s#drm_plane * , s#drm_plane_state * ) ; void ( * atomic_async_update ) ( s#drm_plane * , s#drm_plane_state * ) ; }
s#drm_plane_state struct drm_plane_state { s#drm_plane * plane ; s#drm_crtc * crtc ; s#drm_framebuffer * fb ; s#dma_fence * fence ; t#int32_t crtc_x ; t#int32_t crtc_y ; t#uint32_t crtc_w , crtc_h ; t#uint32_t src_x ; t#uint32_t src_y ; t#uint32_t src_h , src_w ; t#u16 alpha ; t#uint16_t pixel_blend_mode ; unsigned int rotation ; unsigned int zpos ; unsigned int normalized_zpos ; e#drm_color_encoding color_encoding ; e#drm_color_range color_range ; s#drm_property_blob * fb_damage_clips ; s#drm_rect src , dst ; t#bool visible ; s#drm_crtc_commit * commit ; s#drm_atomic_state * state ; }
s#drm_prime_file_private struct drm_prime_file_private { s#mutex lock ; s#rb_root dmabufs ; s#rb_root handles ; }
s#drm_printer@36d43322 struct drm_printer { UNKNOWN }
s#drm_printer@a70a8fdd struct drm_printer { void ( * printfn ) ( s#drm_printer * , s#va_format * ) ; void ( * puts ) ( s#drm_printer * , const char * ) ; void * arg ; const char * prefix ; }
s#drm_private_obj struct drm_private_obj { s#list_head head ; s#drm_modeset_lock lock ; s#drm_private_state * state ; const s#drm_private_state_funcs * funcs ; }
s#drm_private_state struct drm_private_state { s#drm_atomic_state * state ; }
s#drm_private_state_funcs struct drm_private_state_funcs { s#drm_private_state * ( * atomic_duplicate_state ) ( s#drm_private_obj * ) ; void ( * atomic_destroy_state ) ( s#drm_private_obj * , s#drm_private_state * ) ; }
s#drm_property@390e68d7 struct drm_property { UNKNOWN }
s#drm_property@c1a88f85 struct drm_property { s#list_head head ; s#drm_mode_object base ; t#uint32_t flags ; char name [ 32 ] ; t#uint32_t num_values ; t#uint64_t * values ; s#drm_device * dev ; s#list_head enum_list ; }
s#drm_property_blob@59863626 struct drm_property_blob { UNKNOWN }
s#drm_property_blob@eb6b379a struct drm_property_blob { s#drm_mode_object base ; s#drm_device * dev ; s#list_head head_global ; s#list_head head_file ; t#size_t length ; void * data ; }
s#drm_rect struct drm_rect { int x1 , y1 , x2 , y2 ; }
s#drm_scdc struct drm_scdc { t#bool supported ; t#bool read_request ; s#drm_scrambling scrambling ; }
s#drm_scrambling struct drm_scrambling { t#bool supported ; t#bool low_rates ; }
s#drm_self_refresh_data struct drm_self_refresh_data { UNKNOWN }
s#drm_sg_mem@51d33cdd struct drm_sg_mem { UNKNOWN }
s#drm_sg_mem@82c63c60 struct drm_sg_mem { unsigned long handle ; void * virtual ; int pages ; s#page * * pagelist ; t#dma_addr_t * busaddr ; }
s#drm_tile_group struct drm_tile_group { s#kref refcount ; s#drm_device * dev ; int id ; t#u8 group_data [ 8 ] ; }
s#drm_tv_connector_state struct drm_tv_connector_state { e#drm_mode_subconnector subconnector ; s#drm_connector_tv_margins margins ; unsigned int mode ; unsigned int brightness ; unsigned int contrast ; unsigned int flicker_reduction ; unsigned int overscan ; unsigned int saturation ; unsigned int hue ; }
s#drm_vblank_crtc@96724d0b struct drm_vblank_crtc { UNKNOWN }
s#drm_vblank_crtc@f9e3375d struct drm_vblank_crtc { s#drm_device * dev ; t#wait_queue_head_t queue ; s#timer_list disable_timer ; t#seqlock_t seqlock ; t#u64 count ; t#ktime_t time ; t#atomic_t refcount ; t#u32 last ; t#u32 max_vblank_count ; unsigned int inmodeset ; unsigned int pipe ; int framedur_ns ; int linedur_ns ; s#drm_display_mode hwmode ; t#bool enabled ; }
s#drm_vma_offset_manager@4f294723 struct drm_vma_offset_manager { t#rwlock_t vm_lock ; s#drm_mm vm_addr_space_mm ; }
s#drm_vma_offset_manager@a5667b87 struct drm_vma_offset_manager { UNKNOWN }
s#drm_vma_offset_node struct drm_vma_offset_node { t#rwlock_t vm_lock ; s#drm_mm_node vm_node ; s#rb_root vm_files ; t#bool readonly : 1 ; }
s#drm_vram_mm@01d83f01 struct drm_vram_mm { UNKNOWN }
s#drm_vram_mm@4133dc98 struct drm_vram_mm { t#uint64_t vram_base ; t#size_t vram_size ; s#ttm_bo_device bdev ; const s#drm_vram_mm_funcs * funcs ; }
s#drm_vram_mm_funcs struct drm_vram_mm_funcs { void ( * evict_flags ) ( s#ttm_buffer_object * , s#ttm_placement * ) ; int ( * verify_access ) ( s#ttm_buffer_object * , s#file * ) ; }
s#drm_writeback_connector@2ba84383 struct drm_writeback_connector { UNKNOWN }
s#drm_writeback_connector@783cbfda struct drm_writeback_connector { s#drm_connector base ; s#drm_encoder encoder ; s#drm_property_blob * pixel_formats_blob_ptr ; t#spinlock_t job_lock ; s#list_head job_queue ; unsigned int fence_context ; t#spinlock_t fence_lock ; unsigned long fence_seqno ; char timeline_name [ 32 ] ; }
s#drm_writeback_job@2e73e578 struct drm_writeback_job { UNKNOWN }
s#drm_writeback_job@a2dfcebc struct drm_writeback_job { s#drm_writeback_connector * connector ; t#bool prepared ; s#work_struct cleanup_work ; s#list_head list_entry ; s#drm_framebuffer * fb ; s#dma_fence * out_fence ; void * priv ; }
s#dsa_chip_data struct dsa_chip_data { s#device * host_dev ; int sw_addr ; s#device * netdev [ 12 ] ; int eeprom_len ; s#device_node * of_node ; char * port_names [ 12 ] ; s#device_node * port_dn [ 12 ] ; t#s8 rtable [ 4 ] ; }
s#dsa_device_ops struct dsa_device_ops { s#sk_buff * ( * xmit ) ( s#sk_buff * , s#net_device * ) ; s#sk_buff * ( * rcv ) ( s#sk_buff * , s#net_device * , s#packet_type * ) ; int ( * flow_dissect ) ( const s#sk_buff * , t#__be16 * , int * ) ; t#bool ( * filter ) ( const s#sk_buff * , s#net_device * ) ; unsigned int overhead ; const char * name ; e#dsa_tag_protocol proto ; }
s#dsa_mall_mirror_tc_entry struct dsa_mall_mirror_tc_entry { t#u8 to_local_port ; t#bool ingress ; }
s#dsa_platform_data struct dsa_platform_data { s#device * netdev ; s#net_device * of_netdev ; int nr_chips ; s#dsa_chip_data * chip ; }
s#dsa_port@0a000a0a struct dsa_port { union { s#net_device * master ; s#net_device * slave ; } ; const s#dsa_device_ops * tag_ops ; s#dsa_switch_tree * dst ; s#sk_buff * ( * rcv ) ( s#sk_buff * , s#net_device * , s#packet_type * ) ; t#bool ( * filter ) ( const s#sk_buff * , s#net_device * ) ; enum { DSA_PORT_TYPE_UNUSED = 0 , DSA_PORT_TYPE_CPU , DSA_PORT_TYPE_DSA , DSA_PORT_TYPE_USER , } type ; s#dsa_switch * ds ; unsigned int index ; const char * name ; s#dsa_port * cpu_dp ; const char * mac ; s#device_node * dn ; unsigned int ageing_time ; t#bool vlan_filtering ; t#u8 stp_state ; s#net_device * bridge_dev ; s#devlink_port devlink_port ; s#phylink * pl ; s#phylink_config pl_config ; s#work_struct xmit_work ; s#sk_buff_head xmit_queue ; void * priv ; const s#ethtool_ops * orig_ethtool_ops ; const s#net_device_ops * orig_ndo_ops ; }
s#dsa_port@258bc0e4 struct dsa_port { UNKNOWN }
s#dsa_switch struct dsa_switch { s#device * dev ; s#dsa_switch_tree * dst ; unsigned int index ; s#notifier_block nb ; void * priv ; s#dsa_chip_data * cd ; const s#dsa_switch_ops * ops ; t#s8 rtable [ 4 ] ; t#u32 phys_mii_mask ; s#mii_bus * slave_mii_bus ; unsigned int ageing_time_min ; unsigned int ageing_time_max ; s#devlink * devlink ; unsigned int num_tx_queues ; t#bool vlan_filtering_is_global ; t#bool vlan_filtering ; t#size_t num_ports ; s#dsa_port ports [ ] ; }
s#dsa_switch_ops struct dsa_switch_ops { e#dsa_tag_protocol ( * get_tag_protocol ) ( s#dsa_switch * , int ) ; int ( * setup ) ( s#dsa_switch * ) ; void ( * teardown ) ( s#dsa_switch * ) ; t#u32 ( * get_phy_flags ) ( s#dsa_switch * , int ) ; int ( * phy_read ) ( s#dsa_switch * , int , int ) ; int ( * phy_write ) ( s#dsa_switch * , int , int , t#u16 ) ; void ( * adjust_link ) ( s#dsa_switch * , int , s#phy_device * ) ; void ( * fixed_link_update ) ( s#dsa_switch * , int , s#fixed_phy_status * ) ; void ( * phylink_validate ) ( s#dsa_switch * , int , unsigned long * , s#phylink_link_state * ) ; int ( * phylink_mac_link_state ) ( s#dsa_switch * , int , s#phylink_link_state * ) ; void ( * phylink_mac_config ) ( s#dsa_switch * , int , unsigned int , const s#phylink_link_state * ) ; void ( * phylink_mac_an_restart ) ( s#dsa_switch * , int ) ; void ( * phylink_mac_link_down ) ( s#dsa_switch * , int , unsigned int , t#phy_interface_t ) ; void ( * phylink_mac_link_up ) ( s#dsa_switch * , int , unsigned int , t#phy_interface_t , s#phy_device * ) ; void ( * phylink_fixed_state ) ( s#dsa_switch * , int , s#phylink_link_state * ) ; void ( * get_strings ) ( s#dsa_switch * , int , t#u32 , t#uint8_t * ) ; void ( * get_ethtool_stats ) ( s#dsa_switch * , int , t#uint64_t * ) ; int ( * get_sset_count ) ( s#dsa_switch * , int , int ) ; void ( * get_ethtool_phy_stats ) ( s#dsa_switch * , int , t#uint64_t * ) ; void ( * get_wol ) ( s#dsa_switch * , int , s#ethtool_wolinfo * ) ; int ( * set_wol ) ( s#dsa_switch * , int , s#ethtool_wolinfo * ) ; int ( * get_ts_info ) ( s#dsa_switch * , int , s#ethtool_ts_info * ) ; int ( * suspend ) ( s#dsa_switch * ) ; int ( * resume ) ( s#dsa_switch * ) ; int ( * port_enable ) ( s#dsa_switch * , int , s#phy_device * ) ; void ( * port_disable ) ( s#dsa_switch * , int ) ; int ( * set_mac_eee ) ( s#dsa_switch * , int , s#ethtool_eee * ) ; int ( * get_mac_eee ) ( s#dsa_switch * , int , s#ethtool_eee * ) ; int ( * get_eeprom_len ) ( s#dsa_switch * ) ; int ( * get_eeprom ) ( s#dsa_switch * , s#ethtool_eeprom * , t#u8 * ) ; int ( * set_eeprom ) ( s#dsa_switch * , s#ethtool_eeprom * , t#u8 * ) ; int ( * get_regs_len ) ( s#dsa_switch * , int ) ; void ( * get_regs ) ( s#dsa_switch * , int , s#ethtool_regs * , void * ) ; int ( * set_ageing_time ) ( s#dsa_switch * , unsigned int ) ; int ( * port_bridge_join ) ( s#dsa_switch * , int , s#net_device * ) ; void ( * port_bridge_leave ) ( s#dsa_switch * , int , s#net_device * ) ; void ( * port_stp_state_set ) ( s#dsa_switch * , int , t#u8 ) ; void ( * port_fast_age ) ( s#dsa_switch * , int ) ; int ( * port_egress_floods ) ( s#dsa_switch * , int , t#bool , t#bool ) ; int ( * port_vlan_filtering ) ( s#dsa_switch * , int , t#bool ) ; int ( * port_vlan_prepare ) ( s#dsa_switch * , int , const s#switchdev_obj_port_vlan * ) ; void ( * port_vlan_add ) ( s#dsa_switch * , int , const s#switchdev_obj_port_vlan * ) ; int ( * port_vlan_del ) ( s#dsa_switch * , int , const s#switchdev_obj_port_vlan * ) ; int ( * port_fdb_add ) ( s#dsa_switch * , int , const unsigned char * , t#u16 ) ; int ( * port_fdb_del ) ( s#dsa_switch * , int , const unsigned char * , t#u16 ) ; int ( * port_fdb_dump ) ( s#dsa_switch * , int , t#dsa_fdb_dump_cb_t * , void * ) ; int ( * port_mdb_prepare ) ( s#dsa_switch * , int , const s#switchdev_obj_port_mdb * ) ; void ( * port_mdb_add ) ( s#dsa_switch * , int , const s#switchdev_obj_port_mdb * ) ; int ( * port_mdb_del ) ( s#dsa_switch * , int , const s#switchdev_obj_port_mdb * ) ; int ( * get_rxnfc ) ( s#dsa_switch * , int , s#ethtool_rxnfc * , t#u32 * ) ; int ( * set_rxnfc ) ( s#dsa_switch * , int , s#ethtool_rxnfc * ) ; int ( * port_mirror_add ) ( s#dsa_switch * , int , s#dsa_mall_mirror_tc_entry * , t#bool ) ; void ( * port_mirror_del ) ( s#dsa_switch * , int , s#dsa_mall_mirror_tc_entry * ) ; int ( * port_setup_tc ) ( s#dsa_switch * , int , e#tc_setup_type , void * ) ; int ( * crosschip_bridge_join ) ( s#dsa_switch * , int , int , s#net_device * ) ; void ( * crosschip_bridge_leave ) ( s#dsa_switch * , int , int , s#net_device * ) ; int ( * port_hwtstamp_get ) ( s#dsa_switch * , int , s#ifreq * ) ; int ( * port_hwtstamp_set ) ( s#dsa_switch * , int , s#ifreq * ) ; t#bool ( * port_txtstamp ) ( s#dsa_switch * , int , s#sk_buff * , unsigned int ) ; t#bool ( * port_rxtstamp ) ( s#dsa_switch * , int , s#sk_buff * , unsigned int ) ; t#netdev_tx_t ( * port_deferred_xmit ) ( s#dsa_switch * , int , s#sk_buff * ) ; }
s#dsa_switch_tree struct dsa_switch_tree { s#list_head list ; s#raw_notifier_head nh ; unsigned int index ; s#kref refcount ; t#bool setup ; s#dsa_platform_data * pd ; s#dsa_port * cpu_dp ; s#dsa_switch * ds [ 4 ] ; }
s#dst_entry@9c1118aa struct dst_entry { s#net_device * dev ; s#dst_ops * ops ; unsigned long _metrics ; unsigned long expires ; s#xfrm_state * xfrm ; int ( * input ) ( s#sk_buff * ) ; int ( * output ) ( s#net * , s#sock * , s#sk_buff * ) ; unsigned short flags ; short obsolete ; unsigned short header_len ; unsigned short trailer_len ; t#atomic_t __refcnt ; int __use ; unsigned long lastuse ; s#lwtunnel_state * lwtstate ; s#callback_head callback_head ; short error ; short __pad ; t#__u32 tclassid ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; unsigned long uek_reserved9 ; unsigned long uek_reserved10 ; }
s#dst_entry@d3e7ee36 struct dst_entry { UNKNOWN }
s#dst_metrics struct dst_metrics { t#u32 metrics [ ( E#__RTAX_MAX - 1 ) ] ; t#refcount_t refcnt ; }
s#dst_ops struct dst_ops { unsigned short family ; unsigned int gc_thresh ; int ( * gc ) ( s#dst_ops * ) ; s#dst_entry * ( * check ) ( s#dst_entry * , t#__u32 ) ; unsigned int ( * default_advmss ) ( const s#dst_entry * ) ; unsigned int ( * mtu ) ( const s#dst_entry * ) ; t#u32 * ( * cow_metrics ) ( s#dst_entry * , unsigned long ) ; void ( * destroy ) ( s#dst_entry * ) ; void ( * ifdown ) ( s#dst_entry * , s#net_device * , int ) ; s#dst_entry * ( * negative_advice ) ( s#dst_entry * ) ; void ( * link_failure ) ( s#sk_buff * ) ; void ( * update_pmtu ) ( s#dst_entry * , s#sock * , s#sk_buff * , t#u32 , t#bool ) ; void ( * redirect ) ( s#dst_entry * , s#sock * , s#sk_buff * ) ; int ( * local_out ) ( s#net * , s#sock * , s#sk_buff * ) ; s#neighbour * ( * neigh_lookup ) ( const s#dst_entry * , s#sk_buff * , const void * ) ; void ( * confirm_neigh ) ( const s#dst_entry * , const void * ) ; s#kmem_cache * kmem_cachep ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; s#percpu_counter pcpuc_entries __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; }
s#ebt_chainstack struct ebt_chainstack { s#ebt_entries * chaininfo ; s#ebt_entry * e ; unsigned int n ; }
s#ebt_counter struct ebt_counter { t#__u64 pcnt ; t#__u64 bcnt ; }
s#ebt_entries struct ebt_entries { unsigned int distinguisher ; char name [ 32 ] ; unsigned int counter_offset ; int policy ; unsigned int nentries ; char data [ 0 ] __attribute__ ( ( aligned ( __alignof__ ( struct ebt_replace ) ) ) ) ; }
s#ebt_entry struct ebt_entry { unsigned int bitmask ; unsigned int invflags ; t#__be16 ethproto ; char in [ 16 ] ; char logical_in [ 16 ] ; char out [ 16 ] ; char logical_out [ 16 ] ; unsigned char sourcemac [ 6 ] ; unsigned char sourcemsk [ 6 ] ; unsigned char destmac [ 6 ] ; unsigned char destmsk [ 6 ] ; unsigned int watchers_offset ; unsigned int target_offset ; unsigned int next_offset ; unsigned char elems [ 0 ] __attribute__ ( ( aligned ( __alignof__ ( struct ebt_replace ) ) ) ) ; }
s#ebt_replace_kernel struct ebt_replace_kernel { char name [ 32 ] ; unsigned int valid_hooks ; unsigned int nentries ; unsigned int entries_size ; s#ebt_entries * hook_entry [ 6 ] ; unsigned int num_counters ; s#ebt_counter * counters ; char * entries ; }
s#ebt_table@6a35c91f struct ebt_table { s#list_head list ; char name [ 32 ] ; s#ebt_replace_kernel * table ; unsigned int valid_hooks ; t#rwlock_t lock ; s#ebt_table_info * private ; s#module * me ; }
s#ebt_table@e2db16e1 struct ebt_table { UNKNOWN }
s#ebt_table_info struct ebt_table_info { unsigned int entries_size ; unsigned int nentries ; s#ebt_entries * hook_entry [ 6 ] ; s#ebt_chainstack * * chainstack ; char * entries ; s#ebt_counter counters [ 0 ] __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; }
s#edid@16d576b8 struct edid { t#u8 header [ 8 ] ; t#u8 mfg_id [ 2 ] ; t#u8 prod_code [ 2 ] ; t#u32 serial ; t#u8 mfg_week ; t#u8 mfg_year ; t#u8 version ; t#u8 revision ; t#u8 input ; t#u8 width_cm ; t#u8 height_cm ; t#u8 gamma ; t#u8 features ; t#u8 red_green_lo ; t#u8 black_white_lo ; t#u8 red_x ; t#u8 red_y ; t#u8 green_x ; t#u8 green_y ; t#u8 blue_x ; t#u8 blue_y ; t#u8 white_x ; t#u8 white_y ; s#est_timings established_timings ; s#std_timing standard_timings [ 8 ] ; s#detailed_timing detailed_timings [ 4 ] ; t#u8 extensions ; t#u8 checksum ; }
s#edid@76b095b5 struct edid { UNKNOWN }
s#elevator_mq_ops struct elevator_mq_ops { int ( * init_sched ) ( s#request_queue * , s#elevator_type * ) ; void ( * exit_sched ) ( s#elevator_queue * ) ; int ( * init_hctx ) ( s#blk_mq_hw_ctx * , unsigned int ) ; void ( * exit_hctx ) ( s#blk_mq_hw_ctx * , unsigned int ) ; void ( * depth_updated ) ( s#blk_mq_hw_ctx * ) ; t#bool ( * allow_merge ) ( s#request_queue * , s#request * , s#bio * ) ; t#bool ( * bio_merge ) ( s#blk_mq_hw_ctx * , s#bio * , unsigned int ) ; int ( * request_merge ) ( s#request_queue * , s#request * * , s#bio * ) ; void ( * request_merged ) ( s#request_queue * , s#request * , e#elv_merge ) ; void ( * requests_merged ) ( s#request_queue * , s#request * , s#request * ) ; void ( * limit_depth ) ( unsigned int , s#blk_mq_alloc_data * ) ; void ( * prepare_request ) ( s#request * , s#bio * ) ; void ( * finish_request ) ( s#request * ) ; void ( * insert_requests ) ( s#blk_mq_hw_ctx * , s#list_head * , t#bool ) ; s#request * ( * dispatch_request ) ( s#blk_mq_hw_ctx * ) ; t#bool ( * has_work ) ( s#blk_mq_hw_ctx * ) ; void ( * completed_request ) ( s#request * , t#u64 ) ; void ( * requeue_request ) ( s#request * ) ; s#request * ( * former_request ) ( s#request_queue * , s#request * ) ; s#request * ( * next_request ) ( s#request_queue * , s#request * ) ; void ( * init_icq ) ( s#io_cq * ) ; void ( * exit_icq ) ( s#io_cq * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#elevator_queue struct elevator_queue { s#elevator_type * type ; void * elevator_data ; s#kobject kobj ; s#mutex sysfs_lock ; unsigned int registered : 1 ; s#hlist_head hash [ 1 << ( 6 ) ] ; }
s#elevator_type struct elevator_type { s#kmem_cache * icq_cache ; s#elevator_mq_ops ops ; t#size_t icq_size ; t#size_t icq_align ; s#elv_fs_entry * elevator_attrs ; const char * elevator_name ; const char * elevator_alias ; const unsigned int elevator_features ; s#module * elevator_owner ; const s#blk_mq_debugfs_attr * queue_debugfs_attrs ; const s#blk_mq_debugfs_attr * hctx_debugfs_attrs ; char icq_cache_name [ ( 16 ) + 6 ] ; s#list_head list ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#elf64_sym struct elf64_sym { t#Elf64_Word st_name ; unsigned char st_info ; unsigned char st_other ; t#Elf64_Half st_shndx ; t#Elf64_Addr st_value ; t#Elf64_Xword st_size ; }
s#elv_fs_entry struct elv_fs_entry { s#attribute attr ; t#ssize_t ( * show ) ( s#elevator_queue * , char * ) ; t#ssize_t ( * store ) ( s#elevator_queue * , const char * , t#size_t ) ; }
s#em_perf_domain struct em_perf_domain { }
s#erase_info struct erase_info { t#uint64_t addr ; t#uint64_t len ; t#uint64_t fail_addr ; }
s#error_injection_entry struct error_injection_entry { unsigned long addr ; int etype ; }
s#est_timings struct est_timings { t#u8 t1 ; t#u8 t2 ; t#u8 mfg_rsvd ; }
s#ethhdr struct ethhdr { unsigned char h_dest [ 6 ] ; unsigned char h_source [ 6 ] ; t#__be16 h_proto ; }
s#ethtool_ah_espip4_spec struct ethtool_ah_espip4_spec { t#__be32 ip4src ; t#__be32 ip4dst ; t#__be32 spi ; t#__u8 tos ; }
s#ethtool_ah_espip6_spec struct ethtool_ah_espip6_spec { t#__be32 ip6src [ 4 ] ; t#__be32 ip6dst [ 4 ] ; t#__be32 spi ; t#__u8 tclass ; }
s#ethtool_channels struct ethtool_channels { t#__u32 cmd ; t#__u32 max_rx ; t#__u32 max_tx ; t#__u32 max_other ; t#__u32 max_combined ; t#__u32 rx_count ; t#__u32 tx_count ; t#__u32 other_count ; t#__u32 combined_count ; }
s#ethtool_coalesce struct ethtool_coalesce { t#__u32 cmd ; t#__u32 rx_coalesce_usecs ; t#__u32 rx_max_coalesced_frames ; t#__u32 rx_coalesce_usecs_irq ; t#__u32 rx_max_coalesced_frames_irq ; t#__u32 tx_coalesce_usecs ; t#__u32 tx_max_coalesced_frames ; t#__u32 tx_coalesce_usecs_irq ; t#__u32 tx_max_coalesced_frames_irq ; t#__u32 stats_block_coalesce_usecs ; t#__u32 use_adaptive_rx_coalesce ; t#__u32 use_adaptive_tx_coalesce ; t#__u32 pkt_rate_low ; t#__u32 rx_coalesce_usecs_low ; t#__u32 rx_max_coalesced_frames_low ; t#__u32 tx_coalesce_usecs_low ; t#__u32 tx_max_coalesced_frames_low ; t#__u32 pkt_rate_high ; t#__u32 rx_coalesce_usecs_high ; t#__u32 rx_max_coalesced_frames_high ; t#__u32 tx_coalesce_usecs_high ; t#__u32 tx_max_coalesced_frames_high ; t#__u32 rate_sample_interval ; }
s#ethtool_drvinfo struct ethtool_drvinfo { t#__u32 cmd ; char driver [ 32 ] ; char version [ 32 ] ; char fw_version [ 32 ] ; char bus_info [ 32 ] ; char erom_version [ 32 ] ; char reserved2 [ 12 ] ; t#__u32 n_priv_flags ; t#__u32 n_stats ; t#__u32 testinfo_len ; t#__u32 eedump_len ; t#__u32 regdump_len ; }
s#ethtool_dump struct ethtool_dump { t#__u32 cmd ; t#__u32 version ; t#__u32 flag ; t#__u32 len ; t#__u8 data [ 0 ] ; }
s#ethtool_eee struct ethtool_eee { t#__u32 cmd ; t#__u32 supported ; t#__u32 advertised ; t#__u32 lp_advertised ; t#__u32 eee_active ; t#__u32 eee_enabled ; t#__u32 tx_lpi_enabled ; t#__u32 tx_lpi_timer ; t#__u32 reserved [ 2 ] ; }
s#ethtool_eeprom struct ethtool_eeprom { t#__u32 cmd ; t#__u32 magic ; t#__u32 offset ; t#__u32 len ; t#__u8 data [ 0 ] ; }
s#ethtool_fecparam struct ethtool_fecparam { t#__u32 cmd ; t#__u32 active_fec ; t#__u32 fec ; t#__u32 reserved ; }
s#ethtool_flash struct ethtool_flash { t#__u32 cmd ; t#__u32 region ; char data [ 128 ] ; }
s#ethtool_flow_ext struct ethtool_flow_ext { t#__u8 padding [ 2 ] ; unsigned char h_dest [ 6 ] ; t#__be16 vlan_etype ; t#__be16 vlan_tci ; t#__be32 data [ 2 ] ; }
s#ethtool_link_ksettings struct ethtool_link_ksettings { s#ethtool_link_settings base ; struct { unsigned long supported [ ( ( ( E#__ETHTOOL_LINK_MODE_MASK_NBITS ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long advertising [ ( ( ( E#__ETHTOOL_LINK_MODE_MASK_NBITS ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long lp_advertising [ ( ( ( E#__ETHTOOL_LINK_MODE_MASK_NBITS ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; } link_modes ; }
s#ethtool_link_settings struct ethtool_link_settings { t#__u32 cmd ; t#__u32 speed ; t#__u8 duplex ; t#__u8 port ; t#__u8 phy_address ; t#__u8 autoneg ; t#__u8 mdio_support ; t#__u8 eth_tp_mdix ; t#__u8 eth_tp_mdix_ctrl ; t#__s8 link_mode_masks_nwords ; t#__u8 transceiver ; t#__u8 reserved1 [ 3 ] ; t#__u32 reserved [ 7 ] ; t#__u32 link_mode_masks [ 0 ] ; }
s#ethtool_modinfo struct ethtool_modinfo { t#__u32 cmd ; t#__u32 type ; t#__u32 eeprom_len ; t#__u32 reserved [ 8 ] ; }
s#ethtool_ops struct ethtool_ops { void ( * get_drvinfo ) ( s#net_device * , s#ethtool_drvinfo * ) ; int ( * get_regs_len ) ( s#net_device * ) ; void ( * get_regs ) ( s#net_device * , s#ethtool_regs * , void * ) ; void ( * get_wol ) ( s#net_device * , s#ethtool_wolinfo * ) ; int ( * set_wol ) ( s#net_device * , s#ethtool_wolinfo * ) ; t#u32 ( * get_msglevel ) ( s#net_device * ) ; void ( * set_msglevel ) ( s#net_device * , t#u32 ) ; int ( * nway_reset ) ( s#net_device * ) ; t#u32 ( * get_link ) ( s#net_device * ) ; int ( * get_eeprom_len ) ( s#net_device * ) ; int ( * get_eeprom ) ( s#net_device * , s#ethtool_eeprom * , t#u8 * ) ; int ( * set_eeprom ) ( s#net_device * , s#ethtool_eeprom * , t#u8 * ) ; int ( * get_coalesce ) ( s#net_device * , s#ethtool_coalesce * ) ; int ( * set_coalesce ) ( s#net_device * , s#ethtool_coalesce * ) ; void ( * get_ringparam ) ( s#net_device * , s#ethtool_ringparam * ) ; int ( * set_ringparam ) ( s#net_device * , s#ethtool_ringparam * ) ; void ( * get_pauseparam ) ( s#net_device * , s#ethtool_pauseparam * ) ; int ( * set_pauseparam ) ( s#net_device * , s#ethtool_pauseparam * ) ; void ( * self_test ) ( s#net_device * , s#ethtool_test * , t#u64 * ) ; void ( * get_strings ) ( s#net_device * , t#u32 , t#u8 * ) ; int ( * set_phys_id ) ( s#net_device * , e#ethtool_phys_id_state ) ; void ( * get_ethtool_stats ) ( s#net_device * , s#ethtool_stats * , t#u64 * ) ; int ( * begin ) ( s#net_device * ) ; void ( * complete ) ( s#net_device * ) ; t#u32 ( * get_priv_flags ) ( s#net_device * ) ; int ( * set_priv_flags ) ( s#net_device * , t#u32 ) ; int ( * get_sset_count ) ( s#net_device * , int ) ; int ( * get_rxnfc ) ( s#net_device * , s#ethtool_rxnfc * , t#u32 * ) ; int ( * set_rxnfc ) ( s#net_device * , s#ethtool_rxnfc * ) ; int ( * flash_device ) ( s#net_device * , s#ethtool_flash * ) ; int ( * reset ) ( s#net_device * , t#u32 * ) ; t#u32 ( * get_rxfh_key_size ) ( s#net_device * ) ; t#u32 ( * get_rxfh_indir_size ) ( s#net_device * ) ; int ( * get_rxfh ) ( s#net_device * , t#u32 * , t#u8 * , t#u8 * ) ; int ( * set_rxfh ) ( s#net_device * , const t#u32 * , const t#u8 * , const t#u8 ) ; int ( * get_rxfh_context ) ( s#net_device * , t#u32 * , t#u8 * , t#u8 * , t#u32 ) ; int ( * set_rxfh_context ) ( s#net_device * , const t#u32 * , const t#u8 * , const t#u8 , t#u32 * , t#bool ) ; void ( * get_channels ) ( s#net_device * , s#ethtool_channels * ) ; int ( * set_channels ) ( s#net_device * , s#ethtool_channels * ) ; int ( * get_dump_flag ) ( s#net_device * , s#ethtool_dump * ) ; int ( * get_dump_data ) ( s#net_device * , s#ethtool_dump * , void * ) ; int ( * set_dump ) ( s#net_device * , s#ethtool_dump * ) ; int ( * get_ts_info ) ( s#net_device * , s#ethtool_ts_info * ) ; int ( * get_module_info ) ( s#net_device * , s#ethtool_modinfo * ) ; int ( * get_module_eeprom ) ( s#net_device * , s#ethtool_eeprom * , t#u8 * ) ; int ( * get_eee ) ( s#net_device * , s#ethtool_eee * ) ; int ( * set_eee ) ( s#net_device * , s#ethtool_eee * ) ; int ( * get_tunable ) ( s#net_device * , const s#ethtool_tunable * , void * ) ; int ( * set_tunable ) ( s#net_device * , const s#ethtool_tunable * , const void * ) ; int ( * get_per_queue_coalesce ) ( s#net_device * , t#u32 , s#ethtool_coalesce * ) ; int ( * set_per_queue_coalesce ) ( s#net_device * , t#u32 , s#ethtool_coalesce * ) ; int ( * get_link_ksettings ) ( s#net_device * , s#ethtool_link_ksettings * ) ; int ( * set_link_ksettings ) ( s#net_device * , const s#ethtool_link_ksettings * ) ; int ( * get_fecparam ) ( s#net_device * , s#ethtool_fecparam * ) ; int ( * set_fecparam ) ( s#net_device * , s#ethtool_fecparam * ) ; void ( * get_ethtool_phy_stats ) ( s#net_device * , s#ethtool_stats * , t#u64 * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#ethtool_pauseparam struct ethtool_pauseparam { t#__u32 cmd ; t#__u32 autoneg ; t#__u32 rx_pause ; t#__u32 tx_pause ; }
s#ethtool_regs struct ethtool_regs { t#__u32 cmd ; t#__u32 version ; t#__u32 len ; t#__u8 data [ 0 ] ; }
s#ethtool_ringparam struct ethtool_ringparam { t#__u32 cmd ; t#__u32 rx_max_pending ; t#__u32 rx_mini_max_pending ; t#__u32 rx_jumbo_max_pending ; t#__u32 tx_max_pending ; t#__u32 rx_pending ; t#__u32 rx_mini_pending ; t#__u32 rx_jumbo_pending ; t#__u32 tx_pending ; }
s#ethtool_rx_flow_spec struct ethtool_rx_flow_spec { t#__u32 flow_type ; u#ethtool_flow_union h_u ; s#ethtool_flow_ext h_ext ; u#ethtool_flow_union m_u ; s#ethtool_flow_ext m_ext ; t#__u64 ring_cookie ; t#__u32 location ; }
s#ethtool_rxnfc struct ethtool_rxnfc { t#__u32 cmd ; t#__u32 flow_type ; t#__u64 data ; s#ethtool_rx_flow_spec fs ; union { t#__u32 rule_cnt ; t#__u32 rss_context ; } ; t#__u32 rule_locs [ 0 ] ; }
s#ethtool_stats struct ethtool_stats { t#__u32 cmd ; t#__u32 n_stats ; t#__u64 data [ 0 ] ; }
s#ethtool_tcpip4_spec struct ethtool_tcpip4_spec { t#__be32 ip4src ; t#__be32 ip4dst ; t#__be16 psrc ; t#__be16 pdst ; t#__u8 tos ; }
s#ethtool_tcpip6_spec struct ethtool_tcpip6_spec { t#__be32 ip6src [ 4 ] ; t#__be32 ip6dst [ 4 ] ; t#__be16 psrc ; t#__be16 pdst ; t#__u8 tclass ; }
s#ethtool_test struct ethtool_test { t#__u32 cmd ; t#__u32 flags ; t#__u32 reserved ; t#__u32 len ; t#__u64 data [ 0 ] ; }
s#ethtool_ts_info struct ethtool_ts_info { t#__u32 cmd ; t#__u32 so_timestamping ; t#__s32 phc_index ; t#__u32 tx_types ; t#__u32 tx_reserved [ 3 ] ; t#__u32 rx_filters ; t#__u32 rx_reserved [ 3 ] ; }
s#ethtool_tunable struct ethtool_tunable { t#__u32 cmd ; t#__u32 id ; t#__u32 type_id ; t#__u32 len ; void * data [ 0 ] ; }
s#ethtool_usrip4_spec struct ethtool_usrip4_spec { t#__be32 ip4src ; t#__be32 ip4dst ; t#__be32 l4_4_bytes ; t#__u8 tos ; t#__u8 ip_ver ; t#__u8 proto ; }
s#ethtool_usrip6_spec struct ethtool_usrip6_spec { t#__be32 ip6src [ 4 ] ; t#__be32 ip6dst [ 4 ] ; t#__be32 l4_4_bytes ; t#__u8 tclass ; t#__u8 l4_proto ; }
s#ethtool_wolinfo struct ethtool_wolinfo { t#__u32 cmd ; t#__u32 supported ; t#__u32 wolopts ; t#__u8 sopass [ 6 ] ; }
s#event_filter@75cdb1df struct event_filter { s#prog_entry * prog ; char * filter_string ; }
s#event_filter@89b1689f struct event_filter { UNKNOWN }
s#event_subsystem struct event_subsystem { s#list_head list ; const char * name ; s#event_filter * filter ; int ref_count ; }
s#eventfd_ctx struct eventfd_ctx { UNKNOWN }
s#exception_table_entry@8a548305 struct exception_table_entry { UNKNOWN }
s#exception_table_entry@e46c8460 struct exception_table_entry { int insn , fixup , handler ; }
s#execute_work struct execute_work { s#work_struct work ; }
s#export_operations@34d57cc8 struct export_operations { int ( * encode_fh ) ( s#inode * , t#__u32 * , int * , s#inode * ) ; s#dentry * ( * fh_to_dentry ) ( s#super_block * , s#fid * , int , int ) ; s#dentry * ( * fh_to_parent ) ( s#super_block * , s#fid * , int , int ) ; int ( * get_name ) ( s#dentry * , char * , s#dentry * ) ; s#dentry * ( * get_parent ) ( s#dentry * ) ; int ( * commit_metadata ) ( s#inode * ) ; int ( * get_uuid ) ( s#super_block * , t#u8 * , t#u32 * , t#u64 * ) ; int ( * map_blocks ) ( s#inode * , t#loff_t , t#u64 , s#iomap * , t#bool , t#u32 * ) ; int ( * commit_blocks ) ( s#inode * , s#iomap * , int , s#iattr * ) ; }
s#export_operations@96518368 struct export_operations { UNKNOWN }
s#fasync_struct@c5cfa1f6 struct fasync_struct { UNKNOWN }
s#fasync_struct@eabe0712 struct fasync_struct { t#rwlock_t fa_lock ; int magic ; int fa_fd ; s#fasync_struct * fa_next ; s#file * fa_file ; s#callback_head fa_rcu ; }
s#fb_bitfield struct fb_bitfield { t#__u32 offset ; t#__u32 length ; t#__u32 msb_right ; }
s#fb_blit_caps struct fb_blit_caps { t#u32 x ; t#u32 y ; t#u32 len ; t#u32 flags ; }
s#fb_chroma struct fb_chroma { t#__u32 redx ; t#__u32 greenx ; t#__u32 bluex ; t#__u32 whitex ; t#__u32 redy ; t#__u32 greeny ; t#__u32 bluey ; t#__u32 whitey ; }
s#fb_cmap struct fb_cmap { t#__u32 start ; t#__u32 len ; t#__u16 * red ; t#__u16 * green ; t#__u16 * blue ; t#__u16 * transp ; }
s#fb_copyarea struct fb_copyarea { t#__u32 dx ; t#__u32 dy ; t#__u32 width ; t#__u32 height ; t#__u32 sx ; t#__u32 sy ; }
s#fb_cursor struct fb_cursor { t#__u16 set ; t#__u16 enable ; t#__u16 rop ; const char * mask ; s#fbcurpos hot ; s#fb_image image ; }
s#fb_deferred_io struct fb_deferred_io { unsigned long delay ; s#mutex lock ; s#list_head pagelist ; void ( * first_io ) ( s#fb_info * ) ; void ( * deferred_io ) ( s#fb_info * , s#list_head * ) ; }
s#fb_fillrect struct fb_fillrect { t#__u32 dx ; t#__u32 dy ; t#__u32 width ; t#__u32 height ; t#__u32 color ; t#__u32 rop ; }
s#fb_fix_screeninfo struct fb_fix_screeninfo { char id [ 16 ] ; unsigned long smem_start ; t#__u32 smem_len ; t#__u32 type ; t#__u32 type_aux ; t#__u32 visual ; t#__u16 xpanstep ; t#__u16 ypanstep ; t#__u16 ywrapstep ; t#__u32 line_length ; unsigned long mmio_start ; t#__u32 mmio_len ; t#__u32 accel ; t#__u16 capabilities ; t#__u16 reserved [ 2 ] ; }
s#fb_image struct fb_image { t#__u32 dx ; t#__u32 dy ; t#__u32 width ; t#__u32 height ; t#__u32 fg_color ; t#__u32 bg_color ; t#__u8 depth ; const char * data ; s#fb_cmap cmap ; }
s#fb_info struct fb_info { t#atomic_t count ; int node ; int flags ; int fbcon_rotate_hint ; s#mutex lock ; s#mutex mm_lock ; s#fb_var_screeninfo var ; s#fb_fix_screeninfo fix ; s#fb_monspecs monspecs ; s#work_struct queue ; s#fb_pixmap pixmap ; s#fb_pixmap sprite ; s#fb_cmap cmap ; s#list_head modelist ; s#fb_videomode * mode ; s#backlight_device * bl_dev ; s#mutex bl_curve_mutex ; t#u8 bl_curve [ 128 ] ; s#delayed_work deferred_work ; s#fb_deferred_io * fbdefio ; s#fb_ops * fbops ; s#device * device ; s#device * dev ; int class_flag ; s#fb_tile_ops * tileops ; union { char * screen_base ; char * screen_buffer ; } ; unsigned long screen_size ; void * pseudo_palette ; t#u32 state ; void * fbcon_par ; void * par ; s#apertures_struct * apertures ; t#bool skip_vt_switch ; }
s#fb_monspecs struct fb_monspecs { s#fb_chroma chroma ; s#fb_videomode * modedb ; t#__u8 manufacturer [ 4 ] ; t#__u8 monitor [ 14 ] ; t#__u8 serial_no [ 14 ] ; t#__u8 ascii [ 14 ] ; t#__u32 modedb_len ; t#__u32 model ; t#__u32 serial ; t#__u32 year ; t#__u32 week ; t#__u32 hfmin ; t#__u32 hfmax ; t#__u32 dclkmin ; t#__u32 dclkmax ; t#__u16 input ; t#__u16 dpms ; t#__u16 signal ; t#__u16 vfmin ; t#__u16 vfmax ; t#__u16 gamma ; t#__u16 gtf : 1 ; t#__u16 misc ; t#__u8 version ; t#__u8 revision ; t#__u8 max_x ; t#__u8 max_y ; }
s#fb_ops struct fb_ops { s#module * owner ; int ( * fb_open ) ( s#fb_info * , int ) ; int ( * fb_release ) ( s#fb_info * , int ) ; t#ssize_t ( * fb_read ) ( s#fb_info * , char * , t#size_t , t#loff_t * ) ; t#ssize_t ( * fb_write ) ( s#fb_info * , const char * , t#size_t , t#loff_t * ) ; int ( * fb_check_var ) ( s#fb_var_screeninfo * , s#fb_info * ) ; int ( * fb_set_par ) ( s#fb_info * ) ; int ( * fb_setcolreg ) ( unsigned , unsigned , unsigned , unsigned , unsigned , s#fb_info * ) ; int ( * fb_setcmap ) ( s#fb_cmap * , s#fb_info * ) ; int ( * fb_blank ) ( int , s#fb_info * ) ; int ( * fb_pan_display ) ( s#fb_var_screeninfo * , s#fb_info * ) ; void ( * fb_fillrect ) ( s#fb_info * , const s#fb_fillrect * ) ; void ( * fb_copyarea ) ( s#fb_info * , const s#fb_copyarea * ) ; void ( * fb_imageblit ) ( s#fb_info * , const s#fb_image * ) ; int ( * fb_cursor ) ( s#fb_info * , s#fb_cursor * ) ; int ( * fb_sync ) ( s#fb_info * ) ; int ( * fb_ioctl ) ( s#fb_info * , unsigned int , unsigned long ) ; int ( * fb_compat_ioctl ) ( s#fb_info * , unsigned , unsigned long ) ; int ( * fb_mmap ) ( s#fb_info * , s#vm_area_struct * ) ; void ( * fb_get_caps ) ( s#fb_info * , s#fb_blit_caps * , s#fb_var_screeninfo * ) ; void ( * fb_destroy ) ( s#fb_info * ) ; int ( * fb_debug_enter ) ( s#fb_info * ) ; int ( * fb_debug_leave ) ( s#fb_info * ) ; }
s#fb_pixmap struct fb_pixmap { t#u8 * addr ; t#u32 size ; t#u32 offset ; t#u32 buf_align ; t#u32 scan_align ; t#u32 access_align ; t#u32 flags ; t#u32 blit_x ; t#u32 blit_y ; void ( * writeio ) ( s#fb_info * , void * , void * , unsigned int ) ; void ( * readio ) ( s#fb_info * , void * , void * , unsigned int ) ; }
s#fb_tile_ops struct fb_tile_ops { void ( * fb_settile ) ( s#fb_info * , s#fb_tilemap * ) ; void ( * fb_tilecopy ) ( s#fb_info * , s#fb_tilearea * ) ; void ( * fb_tilefill ) ( s#fb_info * , s#fb_tilerect * ) ; void ( * fb_tileblit ) ( s#fb_info * , s#fb_tileblit * ) ; void ( * fb_tilecursor ) ( s#fb_info * , s#fb_tilecursor * ) ; int ( * fb_get_tilemax ) ( s#fb_info * ) ; }
s#fb_tilearea struct fb_tilearea { t#__u32 sx ; t#__u32 sy ; t#__u32 dx ; t#__u32 dy ; t#__u32 width ; t#__u32 height ; }
s#fb_tileblit struct fb_tileblit { t#__u32 sx ; t#__u32 sy ; t#__u32 width ; t#__u32 height ; t#__u32 fg ; t#__u32 bg ; t#__u32 length ; t#__u32 * indices ; }
s#fb_tilecursor struct fb_tilecursor { t#__u32 sx ; t#__u32 sy ; t#__u32 mode ; t#__u32 shape ; t#__u32 fg ; t#__u32 bg ; }
s#fb_tilemap struct fb_tilemap { t#__u32 width ; t#__u32 height ; t#__u32 depth ; t#__u32 length ; const t#__u8 * data ; }
s#fb_tilerect struct fb_tilerect { t#__u32 sx ; t#__u32 sy ; t#__u32 width ; t#__u32 height ; t#__u32 index ; t#__u32 fg ; t#__u32 bg ; t#__u32 rop ; }
s#fb_var_screeninfo struct fb_var_screeninfo { t#__u32 xres ; t#__u32 yres ; t#__u32 xres_virtual ; t#__u32 yres_virtual ; t#__u32 xoffset ; t#__u32 yoffset ; t#__u32 bits_per_pixel ; t#__u32 grayscale ; s#fb_bitfield red ; s#fb_bitfield green ; s#fb_bitfield blue ; s#fb_bitfield transp ; t#__u32 nonstd ; t#__u32 activate ; t#__u32 height ; t#__u32 width ; t#__u32 accel_flags ; t#__u32 pixclock ; t#__u32 left_margin ; t#__u32 right_margin ; t#__u32 upper_margin ; t#__u32 lower_margin ; t#__u32 hsync_len ; t#__u32 vsync_len ; t#__u32 sync ; t#__u32 vmode ; t#__u32 rotate ; t#__u32 colorspace ; t#__u32 reserved [ 4 ] ; }
s#fb_videomode struct fb_videomode { const char * name ; t#u32 refresh ; t#u32 xres ; t#u32 yres ; t#u32 pixclock ; t#u32 left_margin ; t#u32 right_margin ; t#u32 upper_margin ; t#u32 lower_margin ; t#u32 hsync_len ; t#u32 vsync_len ; t#u32 sync ; t#u32 vmode ; t#u32 flag ; }
s#fbcurpos struct fbcurpos { t#__u16 x , y ; }
s#fc_function_template struct fc_function_template { void ( * get_rport_dev_loss_tmo ) ( s#fc_rport * ) ; void ( * set_rport_dev_loss_tmo ) ( s#fc_rport * , t#u32 ) ; void ( * get_starget_node_name ) ( s#scsi_target * ) ; void ( * get_starget_port_name ) ( s#scsi_target * ) ; void ( * get_starget_port_id ) ( s#scsi_target * ) ; void ( * get_host_port_id ) ( s#Scsi_Host * ) ; void ( * get_host_port_type ) ( s#Scsi_Host * ) ; void ( * get_host_port_state ) ( s#Scsi_Host * ) ; void ( * get_host_active_fc4s ) ( s#Scsi_Host * ) ; void ( * get_host_speed ) ( s#Scsi_Host * ) ; void ( * get_host_fabric_name ) ( s#Scsi_Host * ) ; void ( * get_host_symbolic_name ) ( s#Scsi_Host * ) ; void ( * set_host_system_hostname ) ( s#Scsi_Host * ) ; s#fc_host_statistics * ( * get_fc_host_stats ) ( s#Scsi_Host * ) ; void ( * reset_fc_host_stats ) ( s#Scsi_Host * ) ; int ( * issue_fc_host_lip ) ( s#Scsi_Host * ) ; void ( * dev_loss_tmo_callbk ) ( s#fc_rport * ) ; void ( * terminate_rport_io ) ( s#fc_rport * ) ; void ( * set_vport_symbolic_name ) ( s#fc_vport * ) ; int ( * vport_create ) ( s#fc_vport * , t#bool ) ; int ( * vport_disable ) ( s#fc_vport * , t#bool ) ; int ( * vport_delete ) ( s#fc_vport * ) ; int ( * bsg_request ) ( s#bsg_job * ) ; int ( * bsg_timeout ) ( s#bsg_job * ) ; t#u32 dd_fcrport_size ; t#u32 dd_fcvport_size ; t#u32 dd_bsg_size ; unsigned long show_rport_maxframe_size : 1 ; unsigned long show_rport_supported_classes : 1 ; unsigned long show_rport_dev_loss_tmo : 1 ; unsigned long show_starget_node_name : 1 ; unsigned long show_starget_port_name : 1 ; unsigned long show_starget_port_id : 1 ; unsigned long show_host_node_name : 1 ; unsigned long show_host_port_name : 1 ; unsigned long show_host_permanent_port_name : 1 ; unsigned long show_host_supported_classes : 1 ; unsigned long show_host_supported_fc4s : 1 ; unsigned long show_host_supported_speeds : 1 ; unsigned long show_host_maxframe_size : 1 ; unsigned long show_host_serial_number : 1 ; unsigned long show_host_manufacturer : 1 ; unsigned long show_host_model : 1 ; unsigned long show_host_model_description : 1 ; unsigned long show_host_hardware_version : 1 ; unsigned long show_host_driver_version : 1 ; unsigned long show_host_firmware_version : 1 ; unsigned long show_host_optionrom_version : 1 ; unsigned long show_host_port_id : 1 ; unsigned long show_host_port_type : 1 ; unsigned long show_host_port_state : 1 ; unsigned long show_host_active_fc4s : 1 ; unsigned long show_host_speed : 1 ; unsigned long show_host_fabric_name : 1 ; unsigned long show_host_symbolic_name : 1 ; unsigned long show_host_system_hostname : 1 ; unsigned long disable_target_scan : 1 ; }
s#fc_host_statistics struct fc_host_statistics { t#u64 seconds_since_last_reset ; t#u64 tx_frames ; t#u64 tx_words ; t#u64 rx_frames ; t#u64 rx_words ; t#u64 lip_count ; t#u64 nos_count ; t#u64 error_frames ; t#u64 dumped_frames ; t#u64 link_failure_count ; t#u64 loss_of_sync_count ; t#u64 loss_of_signal_count ; t#u64 prim_seq_protocol_err_count ; t#u64 invalid_tx_word_count ; t#u64 invalid_crc_count ; t#u64 fcp_input_requests ; t#u64 fcp_output_requests ; t#u64 fcp_control_requests ; t#u64 fcp_input_megabytes ; t#u64 fcp_output_megabytes ; t#u64 fcp_packet_alloc_failures ; t#u64 fcp_packet_aborts ; t#u64 fcp_frame_alloc_failures ; t#u64 fc_no_free_exch ; t#u64 fc_no_free_exch_xid ; t#u64 fc_xid_not_found ; t#u64 fc_xid_busy ; t#u64 fc_seq_not_found ; t#u64 fc_non_bls_resp ; }
s#fc_log struct fc_log { t#refcount_t usage ; t#u8 head ; t#u8 tail ; t#u8 need_free ; s#module * owner ; char * buffer [ 8 ] ; }
s#fc_rport struct fc_rport { t#u32 maxframe_size ; t#u32 supported_classes ; t#u32 dev_loss_tmo ; t#u64 node_name ; t#u64 port_name ; t#u32 port_id ; t#u32 roles ; e#fc_port_state port_state ; t#u32 scsi_target_id ; t#u32 fast_io_fail_tmo ; void * dd_data ; unsigned int channel ; t#u32 number ; t#u8 flags ; s#list_head peers ; s#device dev ; s#delayed_work dev_loss_work ; s#work_struct scan_work ; s#delayed_work fail_io_work ; s#work_struct stgt_delete_work ; s#work_struct rport_delete_work ; s#request_queue * rqst_q ; }
s#fc_rport_identifiers struct fc_rport_identifiers { t#u64 node_name ; t#u64 port_name ; t#u32 port_id ; t#u32 roles ; }
s#fc_vport struct fc_vport { e#fc_vport_state vport_state ; e#fc_vport_state vport_last_state ; t#u64 node_name ; t#u64 port_name ; t#u32 roles ; t#u32 vport_id ; e#fc_port_type vport_type ; char symbolic_name [ 64 ] ; void * dd_data ; s#Scsi_Host * shost ; unsigned int channel ; t#u32 number ; t#u8 flags ; s#list_head peers ; s#device dev ; s#work_struct vport_delete_work ; }
s#fdtable struct fdtable { unsigned int max_fds ; s#file * * fd ; unsigned long * close_on_exec ; unsigned long * open_fds ; unsigned long * full_fds_bits ; s#callback_head rcu ; }
s#ff_condition_effect struct ff_condition_effect { t#__u16 right_saturation ; t#__u16 left_saturation ; t#__s16 right_coeff ; t#__s16 left_coeff ; t#__u16 deadband ; t#__s16 center ; }
s#ff_constant_effect struct ff_constant_effect { t#__s16 level ; s#ff_envelope envelope ; }
s#ff_device struct ff_device { int ( * upload ) ( s#input_dev * , s#ff_effect * , s#ff_effect * ) ; int ( * erase ) ( s#input_dev * , int ) ; int ( * playback ) ( s#input_dev * , int , int ) ; void ( * set_gain ) ( s#input_dev * , t#u16 ) ; void ( * set_autocenter ) ( s#input_dev * , t#u16 ) ; void ( * destroy ) ( s#ff_device * ) ; void * private ; unsigned long ffbit [ ( ( ( ( 0x7f + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; s#mutex mutex ; int max_effects ; s#ff_effect * effects ; s#file * effect_owners [ ] ; }
s#ff_effect struct ff_effect { t#__u16 type ; t#__s16 id ; t#__u16 direction ; s#ff_trigger trigger ; s#ff_replay replay ; union { s#ff_constant_effect constant ; s#ff_ramp_effect ramp ; s#ff_periodic_effect periodic ; s#ff_condition_effect condition [ 2 ] ; s#ff_rumble_effect rumble ; } u ; }
s#ff_envelope struct ff_envelope { t#__u16 attack_length ; t#__u16 attack_level ; t#__u16 fade_length ; t#__u16 fade_level ; }
s#ff_periodic_effect struct ff_periodic_effect { t#__u16 waveform ; t#__u16 period ; t#__s16 magnitude ; t#__s16 offset ; t#__u16 phase ; s#ff_envelope envelope ; t#__u32 custom_len ; t#__s16 * custom_data ; }
s#ff_ramp_effect struct ff_ramp_effect { t#__s16 start_level ; t#__s16 end_level ; s#ff_envelope envelope ; }
s#ff_replay struct ff_replay { t#__u16 length ; t#__u16 delay ; }
s#ff_rumble_effect struct ff_rumble_effect { t#__u16 strong_magnitude ; t#__u16 weak_magnitude ; }
s#ff_trigger struct ff_trigger { t#__u16 button ; t#__u16 interval ; }
s#fib6_info@a9b2433b struct fib6_info { s#fib6_table * fib6_table ; s#fib6_info * fib6_next ; s#fib6_node * fib6_node ; union { s#list_head fib6_siblings ; s#list_head nh_list ; } ; unsigned int fib6_nsiblings ; t#refcount_t fib6_ref ; unsigned long expires ; s#dst_metrics * fib6_metrics ; s#rt6key fib6_dst ; t#u32 fib6_flags ; s#rt6key fib6_src ; s#rt6key fib6_prefsrc ; t#u32 fib6_metric ; t#u8 fib6_protocol ; t#u8 fib6_type ; t#u8 should_flush : 1 , dst_nocount : 1 , dst_nopolicy : 1 , dst_host : 1 , fib6_destroying : 1 , unused : 3 ; s#callback_head rcu ; s#nexthop * nh ; s#fib6_nh fib6_nh [ 0 ] ; }
s#fib6_info@efeac2b6 struct fib6_info { UNKNOWN }
s#fib6_nh@58738b2a struct fib6_nh { s#fib_nh_common nh_common ; unsigned long last_probe ; s#rt6_info * * rt6i_pcpu ; s#rt6_exception_bucket * rt6i_exception_bucket ; }
s#fib6_nh@8a2b5b63 struct fib6_nh { UNKNOWN }
s#fib6_node struct fib6_node { s#fib6_node * parent ; s#fib6_node * left ; s#fib6_node * right ; s#fib6_info * leaf ; t#__u16 fn_bit ; t#__u16 fn_flags ; int fn_sernum ; s#fib6_info * rr_ptr ; s#callback_head rcu ; }
s#fib6_table@42ca046e struct fib6_table { s#hlist_node tb6_hlist ; t#u32 tb6_id ; t#spinlock_t tb6_lock ; s#fib6_node tb6_root ; s#inet_peer_base tb6_peers ; unsigned int flags ; unsigned int fib_seq ; }
s#fib6_table@9726e4a6 struct fib6_table { UNKNOWN }
s#fib_info struct fib_info { s#hlist_node fib_hash ; s#hlist_node fib_lhash ; s#list_head nh_list ; s#net * fib_net ; int fib_treeref ; t#refcount_t fib_clntref ; unsigned int fib_flags ; unsigned char fib_dead ; unsigned char fib_protocol ; unsigned char fib_scope ; unsigned char fib_type ; t#__be32 fib_prefsrc ; t#u32 fib_tb_id ; t#u32 fib_priority ; s#dst_metrics * fib_metrics ; int fib_nhs ; t#bool fib_nh_is_v6 ; t#bool nh_updated ; s#nexthop * nh ; s#callback_head rcu ; s#fib_nh fib_nh [ 0 ] ; }
s#fib_kuid_range struct fib_kuid_range { t#kuid_t start ; t#kuid_t end ; }
s#fib_lookup_arg struct fib_lookup_arg { void * lookup_ptr ; const void * lookup_data ; void * result ; s#fib_rule * rule ; t#u32 table ; int flags ; }
s#fib_nh struct fib_nh { s#fib_nh_common nh_common ; s#hlist_node nh_hash ; s#fib_info * nh_parent ; t#__u32 nh_tclassid ; t#__be32 nh_saddr ; int nh_saddr_genid ; }
s#fib_nh_common struct fib_nh_common { s#net_device * nhc_dev ; int nhc_oif ; unsigned char nhc_scope ; t#u8 nhc_family ; t#u8 nhc_gw_family ; unsigned char nhc_flags ; s#lwtunnel_state * nhc_lwtstate ; union { t#__be32 ipv4 ; s#in6_addr ipv6 ; } nhc_gw ; int nhc_weight ; t#atomic_t nhc_upper_bound ; s#rtable * * nhc_pcpu_rth_output ; s#rtable * nhc_rth_input ; s#fnhe_hash_bucket * nhc_exceptions ; }
s#fib_nh_exception struct fib_nh_exception { s#fib_nh_exception * fnhe_next ; int fnhe_genid ; t#__be32 fnhe_daddr ; t#u32 fnhe_pmtu ; t#bool fnhe_mtu_locked ; t#__be32 fnhe_gw ; unsigned long fnhe_expires ; s#rtable * fnhe_rth_input ; s#rtable * fnhe_rth_output ; unsigned long fnhe_stamp ; s#callback_head rcu ; }
s#fib_notifier_ops@02b05148 struct fib_notifier_ops { UNKNOWN }
s#fib_notifier_ops@2fff9c30 struct fib_notifier_ops { int family ; s#list_head list ; unsigned int ( * fib_seq_read ) ( s#net * ) ; int ( * fib_dump ) ( s#net * , s#notifier_block * ) ; s#module * owner ; s#callback_head rcu ; }
s#fib_rule struct fib_rule { s#list_head list ; int iifindex ; int oifindex ; t#u32 mark ; t#u32 mark_mask ; t#u32 flags ; t#u32 table ; t#u8 action ; t#u8 l3mdev ; t#u8 proto ; t#u8 ip_proto ; t#u32 target ; t#__be64 tun_id ; s#fib_rule * ctarget ; s#net * fr_net ; t#refcount_t refcnt ; t#u32 pref ; int suppress_ifgroup ; int suppress_prefixlen ; char iifname [ 16 ] ; char oifname [ 16 ] ; s#fib_kuid_range uid_range ; s#fib_rule_port_range sport_range ; s#fib_rule_port_range dport_range ; s#callback_head rcu ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#fib_rule_hdr struct fib_rule_hdr { t#__u8 family ; t#__u8 dst_len ; t#__u8 src_len ; t#__u8 tos ; t#__u8 table ; t#__u8 res1 ; t#__u8 res2 ; t#__u8 action ; t#__u32 flags ; }
s#fib_rule_port_range struct fib_rule_port_range { t#__u16 start ; t#__u16 end ; }
s#fib_rules_ops@306a8a75 struct fib_rules_ops { UNKNOWN }
s#fib_rules_ops@55ec4785 struct fib_rules_ops { int family ; s#list_head list ; int rule_size ; int addr_size ; int unresolved_rules ; int nr_goto_rules ; unsigned int fib_rules_seq ; int ( * action ) ( s#fib_rule * , s#flowi * , int , s#fib_lookup_arg * ) ; t#bool ( * suppress ) ( s#fib_rule * , s#fib_lookup_arg * ) ; int ( * match ) ( s#fib_rule * , s#flowi * , int ) ; int ( * configure ) ( s#fib_rule * , s#sk_buff * , s#fib_rule_hdr * , s#nlattr * * , s#netlink_ext_ack * ) ; int ( * delete ) ( s#fib_rule * ) ; int ( * compare ) ( s#fib_rule * , s#fib_rule_hdr * , s#nlattr * * ) ; int ( * fill ) ( s#fib_rule * , s#sk_buff * , s#fib_rule_hdr * ) ; t#size_t ( * nlmsg_payload ) ( s#fib_rule * ) ; void ( * flush_cache ) ( s#fib_rules_ops * ) ; int nlgroup ; const s#nla_policy * policy ; s#list_head rules_list ; s#module * owner ; s#net * fro_net ; s#callback_head rcu ; }
s#fib_table@c68738ba struct fib_table { UNKNOWN }
s#fib_table@efb17ba1 struct fib_table { s#hlist_node tb_hlist ; t#u32 tb_id ; int tb_num_default ; s#callback_head rcu ; unsigned long * tb_data ; unsigned long __data [ 0 ] ; }
s#fid struct fid { union { struct { t#u32 ino ; t#u32 gen ; t#u32 parent_ino ; t#u32 parent_gen ; } i32 ; struct { t#u32 block ; t#u16 partref ; t#u16 parent_partref ; t#u32 generation ; t#u32 parent_block ; t#u32 parent_generation ; } udf ; t#__u32 raw [ 0 ] ; } ; }
s#fiemap_extent struct fiemap_extent { t#__u64 fe_logical ; t#__u64 fe_physical ; t#__u64 fe_length ; t#__u64 fe_reserved64 [ 2 ] ; t#__u32 fe_flags ; t#__u32 fe_reserved [ 3 ] ; }
s#fiemap_extent_info struct fiemap_extent_info { unsigned int fi_flags ; unsigned int fi_extents_mapped ; unsigned int fi_extents_max ; s#fiemap_extent * fi_extents_start ; }
s#file@5dd0e54d struct file { UNKNOWN }
s#file@fb39ac8a struct file { union { s#llist_node fu_llist ; s#callback_head fu_rcuhead ; } f_u ; s#path f_path ; s#inode * f_inode ; const s#file_operations * f_op ; t#spinlock_t f_lock ; e#rw_hint f_write_hint ; t#atomic_long_t f_count ; unsigned int f_flags ; t#fmode_t f_mode ; s#mutex f_pos_lock ; t#loff_t f_pos ; s#fown_struct f_owner ; const s#cred * f_cred ; s#file_ra_state f_ra ; t#u64 f_version ; void * f_security ; void * private_data ; s#list_head f_ep_links ; s#list_head f_tfile_llink ; s#address_space * f_mapping ; t#errseq_t f_wb_err ; }
s#file_lock struct file_lock { s#file_lock * fl_blocker ; s#list_head fl_list ; s#hlist_node fl_link ; s#list_head fl_blocked_requests ; s#list_head fl_blocked_member ; t#fl_owner_t fl_owner ; unsigned int fl_flags ; unsigned char fl_type ; unsigned int fl_pid ; int fl_link_cpu ; t#wait_queue_head_t fl_wait ; s#file * fl_file ; t#loff_t fl_start ; t#loff_t fl_end ; s#fasync_struct * fl_fasync ; unsigned long fl_break_time ; unsigned long fl_downgrade_time ; const s#file_lock_operations * fl_ops ; const s#lock_manager_operations * fl_lmops ; union { s#nfs_lock_info nfs_fl ; s#nfs4_lock_info nfs4_fl ; struct { s#list_head link ; int state ; unsigned int debug_id ; } afs ; } fl_u ; }
s#file_lock_context struct file_lock_context { t#spinlock_t flc_lock ; s#list_head flc_flock ; s#list_head flc_posix ; s#list_head flc_lease ; }
s#file_lock_operations struct file_lock_operations { void ( * fl_copy_lock ) ( s#file_lock * , s#file_lock * ) ; void ( * fl_release_private ) ( s#file_lock * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#file_operations@0d406ccb struct file_operations { UNKNOWN }
s#file_operations@85658159 struct file_operations { s#module * owner ; t#loff_t ( * llseek ) ( s#file * , t#loff_t , int ) ; t#ssize_t ( * read ) ( s#file * , char * , t#size_t , t#loff_t * ) ; t#ssize_t ( * write ) ( s#file * , const char * , t#size_t , t#loff_t * ) ; t#ssize_t ( * read_iter ) ( s#kiocb * , s#iov_iter * ) ; t#ssize_t ( * write_iter ) ( s#kiocb * , s#iov_iter * ) ; int ( * iopoll ) ( s#kiocb * , t#bool ) ; int ( * iterate ) ( s#file * , s#dir_context * ) ; int ( * iterate_shared ) ( s#file * , s#dir_context * ) ; t#__poll_t ( * poll ) ( s#file * , s#poll_table_struct * ) ; long ( * unlocked_ioctl ) ( s#file * , unsigned int , unsigned long ) ; long ( * compat_ioctl ) ( s#file * , unsigned int , unsigned long ) ; int ( * mmap ) ( s#file * , s#vm_area_struct * ) ; unsigned long mmap_supported_flags ; int ( * open ) ( s#inode * , s#file * ) ; int ( * flush ) ( s#file * , t#fl_owner_t ) ; int ( * release ) ( s#inode * , s#file * ) ; int ( * fsync ) ( s#file * , t#loff_t , t#loff_t , int ) ; int ( * fasync ) ( int , s#file * , int ) ; int ( * lock ) ( s#file * , int , s#file_lock * ) ; t#ssize_t ( * sendpage ) ( s#file * , s#page * , int , t#size_t , t#loff_t * , int ) ; unsigned long ( * get_unmapped_area ) ( s#file * , unsigned long , unsigned long , unsigned long , unsigned long ) ; int ( * check_flags ) ( int ) ; int ( * flock ) ( s#file * , int , s#file_lock * ) ; t#ssize_t ( * splice_write ) ( s#pipe_inode_info * , s#file * , t#loff_t * , t#size_t , unsigned int ) ; t#ssize_t ( * splice_read ) ( s#file * , t#loff_t * , s#pipe_inode_info * , t#size_t , unsigned int ) ; int ( * setlease ) ( s#file * , long , s#file_lock * * , void * * ) ; long ( * fallocate ) ( s#file * , int , t#loff_t , t#loff_t ) ; void ( * show_fdinfo ) ( s#seq_file * , s#file * ) ; t#ssize_t ( * copy_file_range ) ( s#file * , t#loff_t , s#file * , t#loff_t , t#size_t , unsigned int ) ; t#loff_t ( * remap_file_range ) ( s#file * , t#loff_t , s#file * , t#loff_t , t#loff_t , unsigned int ) ; int ( * fadvise ) ( s#file * , t#loff_t , t#loff_t , int ) ; }
s#file_ra_state struct file_ra_state { unsigned long start ; unsigned int size ; unsigned int async_size ; unsigned int ra_pages ; unsigned int mmap_miss ; t#loff_t prev_pos ; }
s#file_system_type struct file_system_type { const char * name ; int fs_flags ; int ( * init_fs_context ) ( s#fs_context * ) ; const s#fs_parameter_description * parameters ; s#dentry * ( * mount ) ( s#file_system_type * , int , const char * , void * ) ; void ( * kill_sb ) ( s#super_block * ) ; s#module * owner ; s#file_system_type * next ; s#hlist_head fs_supers ; s#lock_class_key s_lock_key ; s#lock_class_key s_umount_key ; s#lock_class_key s_vfs_rename_key ; s#lock_class_key s_writers_key [ ( E#SB_FREEZE_COMPLETE - 1 ) ] ; s#lock_class_key i_lock_key ; s#lock_class_key i_mutex_key ; s#lock_class_key i_mutex_dir_key ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#filename struct filename { const char * name ; const char * uptr ; int refcnt ; s#audit_names * aname ; const char iname [ ] ; }
s#files_struct@8536a667 struct files_struct { UNKNOWN }
s#files_struct@bbbe635b struct files_struct { t#atomic_t count ; t#bool resize_in_progress ; t#wait_queue_head_t resize_wait ; s#fdtable * fdt ; s#fdtable fdtab ; t#spinlock_t file_lock __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; unsigned int next_fd ; unsigned long close_on_exec_init [ 1 ] ; unsigned long open_fds_init [ 1 ] ; unsigned long full_fds_bits_init [ 1 ] ; s#file * fd_array [ 64 ] ; }
s#fixed_phy_status@a4d2ee6d struct fixed_phy_status { int link ; int speed ; int duplex ; int pause ; int asym_pause ; }
s#fixed_phy_status@f4b8b452 struct fixed_phy_status { UNKNOWN }
s#flow_block struct flow_block { s#list_head cb_list ; }
s#flow_dissector struct flow_dissector { unsigned int used_keys ; unsigned short int offset [ E#FLOW_DISSECTOR_KEY_MAX ] ; }
s#flow_dissector_key_addrs struct flow_dissector_key_addrs { union { s#flow_dissector_key_ipv4_addrs v4addrs ; s#flow_dissector_key_ipv6_addrs v6addrs ; s#flow_dissector_key_tipc tipckey ; } ; }
s#flow_dissector_key_basic struct flow_dissector_key_basic { t#__be16 n_proto ; t#u8 ip_proto ; t#u8 padding ; }
s#flow_dissector_key_control struct flow_dissector_key_control { t#u16 thoff ; t#u16 addr_type ; t#u32 flags ; }
s#flow_dissector_key_ipv4_addrs struct flow_dissector_key_ipv4_addrs { t#__be32 src ; t#__be32 dst ; }
s#flow_dissector_key_ipv6_addrs struct flow_dissector_key_ipv6_addrs { s#in6_addr src ; s#in6_addr dst ; }
s#flow_dissector_key_keyid struct flow_dissector_key_keyid { t#__be32 keyid ; }
s#flow_dissector_key_ports struct flow_dissector_key_ports { union { t#__be32 ports ; struct { t#__be16 src ; t#__be16 dst ; } ; } ; }
s#flow_dissector_key_tags struct flow_dissector_key_tags { t#u32 flow_label ; }
s#flow_dissector_key_tipc struct flow_dissector_key_tipc { t#__be32 key ; }
s#flow_dissector_key_vlan struct flow_dissector_key_vlan { t#u16 vlan_id : 12 , vlan_dei : 1 , vlan_priority : 3 ; t#__be16 vlan_tpid ; }
s#flow_keys struct flow_keys { s#flow_dissector_key_control control ; s#flow_dissector_key_basic basic __attribute__ ( ( __aligned__ ( __alignof__ ( u64 ) ) ) ) ; s#flow_dissector_key_tags tags ; s#flow_dissector_key_vlan vlan ; s#flow_dissector_key_vlan cvlan ; s#flow_dissector_key_keyid keyid ; s#flow_dissector_key_ports ports ; s#flow_dissector_key_addrs addrs ; }
s#flowi struct flowi { union { s#flowi_common __fl_common ; s#flowi4 ip4 ; s#flowi6 ip6 ; s#flowidn dn ; } u ; }
s#flowi4 struct flowi4 { s#flowi_common __fl_common ; t#__be32 saddr ; t#__be32 daddr ; u#flowi_uli uli ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#flowi6 struct flowi6 { s#flowi_common __fl_common ; s#in6_addr daddr ; s#in6_addr saddr ; t#__be32 flowlabel ; u#flowi_uli uli ; t#__u32 mp_hash ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#flowi_common struct flowi_common { int flowic_oif ; int flowic_iif ; t#__u32 flowic_mark ; t#__u8 flowic_tos ; t#__u8 flowic_scope ; t#__u8 flowic_proto ; t#__u8 flowic_flags ; t#__u32 flowic_secid ; t#kuid_t flowic_uid ; s#flowi_tunnel flowic_tun_key ; t#__u32 flowic_multipath_hash ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#flowi_tunnel struct flowi_tunnel { t#__be64 tun_id ; }
s#flowidn struct flowidn { s#flowi_common __fl_common ; t#__le16 daddr ; t#__le16 saddr ; u#flowi_uli uli ; }
s#flush_tlb_info struct flush_tlb_info { s#mm_struct * mm ; unsigned long start ; unsigned long end ; t#u64 new_tlb_gen ; unsigned int stride_shift ; t#bool freed_tables ; }
s#fnhe_hash_bucket struct fnhe_hash_bucket { s#fib_nh_exception * chain ; }
s#fown_struct struct fown_struct { t#rwlock_t lock ; s#pid * pid ; e#pid_type pid_type ; t#kuid_t uid , euid ; int signum ; }
s#fprop_global struct fprop_global { s#percpu_counter events ; unsigned int period ; t#seqcount_t sequence ; }
s#fprop_local_percpu struct fprop_local_percpu { s#percpu_counter events ; unsigned int period ; t#raw_spinlock_t lock ; }
s#fpu struct fpu { unsigned int last_cpu ; unsigned long avx512_timestamp ; u#fpregs_state state ; }
s#fqdir struct fqdir { long high_thresh ; long low_thresh ; int timeout ; int max_dist ; s#inet_frags * f ; s#net * net ; t#bool dead ; s#rhashtable rhashtable __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; t#atomic_long_t mem __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; s#work_struct destroy_work ; }
s#frag_v4_compare_key struct frag_v4_compare_key { t#__be32 saddr ; t#__be32 daddr ; t#u32 user ; t#u32 vif ; t#__be16 id ; t#u16 protocol ; }
s#frag_v6_compare_key struct frag_v6_compare_key { s#in6_addr saddr ; s#in6_addr daddr ; t#u32 user ; t#__be32 id ; t#u32 iif ; }
s#free_area struct free_area { s#list_head free_list [ E#MIGRATE_TYPES ] ; unsigned long nr_free ; }
s#fregs_state struct fregs_state { t#u32 cwd ; t#u32 swd ; t#u32 twd ; t#u32 fip ; t#u32 fcs ; t#u32 foo ; t#u32 fos ; t#u32 st_space [ 20 ] ; t#u32 status ; }
s#fs_context@a1a27c9b struct fs_context { const s#fs_context_operations * ops ; s#mutex uapi_mutex ; s#file_system_type * fs_type ; void * fs_private ; void * sget_key ; s#dentry * root ; s#user_namespace * user_ns ; s#net * net_ns ; const s#cred * cred ; s#fc_log * log ; const char * source ; void * security ; void * s_fs_info ; unsigned int sb_flags ; unsigned int sb_flags_mask ; unsigned int s_iflags ; unsigned int lsm_flags ; e#fs_context_purpose purpose : 8 ; e#fs_context_phase phase : 8 ; t#bool need_free : 1 ; t#bool global : 1 ; }
s#fs_context@dc4237ee struct fs_context { UNKNOWN }
s#fs_context_operations struct fs_context_operations { void ( * free ) ( s#fs_context * ) ; int ( * dup ) ( s#fs_context * , s#fs_context * ) ; int ( * parse_param ) ( s#fs_context * , s#fs_parameter * ) ; int ( * parse_monolithic ) ( s#fs_context * , void * ) ; int ( * get_tree ) ( s#fs_context * ) ; int ( * reconfigure ) ( s#fs_context * ) ; }
s#fs_parameter struct fs_parameter { const char * key ; e#fs_value_type type : 8 ; union { char * string ; void * blob ; s#filename * name ; s#file * file ; } ; t#size_t size ; int dirfd ; }
s#fs_parameter_description@4f0d202c struct fs_parameter_description { const char name [ 16 ] ; const s#fs_parameter_spec * specs ; const s#fs_parameter_enum * enums ; }
s#fs_parameter_description@71ccdead struct fs_parameter_description { UNKNOWN }
s#fs_parameter_enum struct fs_parameter_enum { t#u8 opt ; char name [ 14 ] ; t#u8 value ; }
s#fs_parameter_spec struct fs_parameter_spec { const char * name ; t#u8 opt ; e#fs_parameter_type type : 8 ; unsigned short flags ; }
s#fs_pin@7d6db402 struct fs_pin { t#wait_queue_head_t wait ; int done ; s#hlist_node s_list ; s#hlist_node m_list ; void ( * kill ) ( s#fs_pin * ) ; }
s#fs_pin@cb017644 struct fs_pin { UNKNOWN }
s#fs_struct@9e826f8c struct fs_struct { int users ; t#spinlock_t lock ; t#seqcount_t seq ; int umask ; int in_exec ; s#path root , pwd ; }
s#fs_struct@b5890d40 struct fs_struct { UNKNOWN }
s#fscache_cache struct fscache_cache { const s#fscache_cache_ops * ops ; s#fscache_cache_tag * tag ; s#kobject * kobj ; s#list_head link ; t#size_t max_index_size ; char identifier [ 36 ] ; s#work_struct op_gc ; s#list_head object_list ; s#list_head op_gc_list ; t#spinlock_t object_list_lock ; t#spinlock_t op_gc_list_lock ; t#atomic_t object_count ; s#fscache_object * fsdef ; unsigned long flags ; }
s#fscache_cache_ops struct fscache_cache_ops { const char * name ; s#fscache_object * ( * alloc_object ) ( s#fscache_cache * , s#fscache_cookie * ) ; int ( * lookup_object ) ( s#fscache_object * ) ; void ( * lookup_complete ) ( s#fscache_object * ) ; s#fscache_object * ( * grab_object ) ( s#fscache_object * , e#fscache_obj_ref_trace ) ; int ( * pin_object ) ( s#fscache_object * ) ; void ( * unpin_object ) ( s#fscache_object * ) ; int ( * check_consistency ) ( s#fscache_operation * ) ; void ( * update_object ) ( s#fscache_object * ) ; void ( * invalidate_object ) ( s#fscache_operation * ) ; void ( * drop_object ) ( s#fscache_object * ) ; void ( * put_object ) ( s#fscache_object * , e#fscache_obj_ref_trace ) ; void ( * sync_cache ) ( s#fscache_cache * ) ; int ( * attr_changed ) ( s#fscache_object * ) ; int ( * reserve_space ) ( s#fscache_object * , t#loff_t ) ; t#fscache_page_retrieval_func_t read_or_alloc_page ; t#fscache_pages_retrieval_func_t read_or_alloc_pages ; t#fscache_page_retrieval_func_t allocate_page ; t#fscache_pages_retrieval_func_t allocate_pages ; int ( * write_page ) ( s#fscache_storage * , s#page * ) ; void ( * uncache_page ) ( s#fscache_object * , s#page * ) ; void ( * dissociate_pages ) ( s#fscache_cache * ) ; }
s#fscache_cache_tag@9dd787ef struct fscache_cache_tag { UNKNOWN }
s#fscache_cache_tag@cb536a22 struct fscache_cache_tag { s#list_head link ; s#fscache_cache * cache ; unsigned long flags ; t#atomic_t usage ; char name [ 0 ] ; }
s#fscache_cookie@0084e53b struct fscache_cookie { UNKNOWN }
s#fscache_cookie@dd015479 struct fscache_cookie { t#atomic_t usage ; t#atomic_t n_children ; t#atomic_t n_active ; t#spinlock_t lock ; t#spinlock_t stores_lock ; s#hlist_head backing_objects ; const s#fscache_cookie_def * def ; s#fscache_cookie * parent ; s#hlist_bl_node hash_link ; void * netfs_data ; s#xarray stores ; unsigned long flags ; t#u8 type ; t#u8 key_len ; t#u8 aux_len ; t#u32 key_hash ; union { void * key ; t#u8 inline_key [ 16 ] ; } ; union { void * aux ; t#u8 inline_aux [ 8 ] ; } ; }
s#fscache_cookie_def struct fscache_cookie_def { char name [ 16 ] ; t#uint8_t type ; s#fscache_cache_tag * ( * select_cache ) ( const void * , const void * ) ; e#fscache_checkaux ( * check_aux ) ( void * , const void * , t#uint16_t , t#loff_t ) ; void ( * get_context ) ( void * , void * ) ; void ( * put_context ) ( void * , void * ) ; void ( * mark_page_cached ) ( void * , s#address_space * , s#page * ) ; }
s#fscache_object struct fscache_object { const s#fscache_state * state ; const s#fscache_transition * oob_table ; int debug_id ; int n_children ; int n_ops ; int n_obj_ops ; int n_in_progress ; int n_exclusive ; t#atomic_t n_reads ; t#spinlock_t lock ; unsigned long lookup_jif ; unsigned long oob_event_mask ; unsigned long event_mask ; unsigned long events ; unsigned long flags ; s#list_head cache_link ; s#hlist_node cookie_link ; s#fscache_cache * cache ; s#fscache_cookie * cookie ; s#fscache_object * parent ; s#work_struct work ; s#list_head dependents ; s#list_head dep_link ; s#list_head pending_ops ; s#rb_node objlist_link ; unsigned long store_limit ; t#loff_t store_limit_l ; }
s#fscache_operation struct fscache_operation { s#work_struct work ; s#list_head pend_link ; s#fscache_object * object ; unsigned long flags ; e#fscache_operation_state state ; t#atomic_t usage ; unsigned debug_id ; t#fscache_operation_processor_t processor ; t#fscache_operation_cancel_t cancel ; t#fscache_operation_release_t release ; }
s#fscache_retrieval struct fscache_retrieval { s#fscache_operation op ; s#fscache_cookie * cookie ; s#address_space * mapping ; t#fscache_rw_complete_t end_io_func ; void * context ; s#list_head to_do ; unsigned long start_time ; t#atomic_t n_pages ; }
s#fscache_state struct fscache_state { char name [ 24 ] ; char short_name [ 8 ] ; const s#fscache_state * ( * work ) ( s#fscache_object * , int ) ; const s#fscache_transition transitions [ ] ; }
s#fscache_storage struct fscache_storage { s#fscache_operation op ; unsigned long store_limit ; }
s#fscache_transition struct fscache_transition { unsigned long events ; const s#fscache_state * transit_to ; }
s#fscrypt_direct_key struct fscrypt_direct_key { UNKNOWN }
s#fscrypt_info@63a37640 struct fscrypt_info { s#crypto_skcipher * ci_ctfm ; s#crypto_cipher * ci_essiv_tfm ; s#fscrypt_mode * ci_mode ; s#inode * ci_inode ; s#key * ci_master_key ; s#list_head ci_master_key_link ; s#fscrypt_direct_key * ci_direct_key ; u#fscrypt_policy ci_policy ; t#u8 ci_nonce [ 16 ] ; }
s#fscrypt_info@6cd45ba4 struct fscrypt_info { UNKNOWN }
s#fscrypt_mode struct fscrypt_mode { const char * friendly_name ; const char * cipher_str ; int keysize ; int ivsize ; t#bool logged_impl_name ; t#bool needs_essiv ; }
s#fscrypt_operations@8c0aa70b struct fscrypt_operations { UNKNOWN }
s#fscrypt_operations@929b13ee struct fscrypt_operations { unsigned int flags ; const char * key_prefix ; int ( * get_context ) ( s#inode * , void * , t#size_t ) ; int ( * set_context ) ( s#inode * , const void * , t#size_t , void * ) ; t#bool ( * dummy_context ) ( s#inode * ) ; t#bool ( * empty_dir ) ( s#inode * ) ; unsigned int max_namelen ; }
s#fscrypt_policy_v1 struct fscrypt_policy_v1 { t#__u8 version ; t#__u8 contents_encryption_mode ; t#__u8 filenames_encryption_mode ; t#__u8 flags ; t#__u8 master_key_descriptor [ 8 ] ; }
s#fscrypt_policy_v2 struct fscrypt_policy_v2 { t#__u8 version ; t#__u8 contents_encryption_mode ; t#__u8 filenames_encryption_mode ; t#__u8 flags ; t#__u8 __reserved [ 4 ] ; t#__u8 master_key_identifier [ 16 ] ; }
s#fsl_mc_msi_desc struct fsl_mc_msi_desc { t#u16 msi_index ; }
s#fsnotify_mark_connector@1c585393 struct fsnotify_mark_connector { t#spinlock_t lock ; unsigned short type ; unsigned short flags ; t#__kernel_fsid_t fsid ; union { t#fsnotify_connp_t * obj ; s#fsnotify_mark_connector * destroy_next ; } ; s#hlist_head list ; }
s#fsnotify_mark_connector@1e0318bf struct fsnotify_mark_connector { UNKNOWN }
s#ftrace_hash@302dc061 struct ftrace_hash { UNKNOWN }
s#ftrace_hash@738615b3 struct ftrace_hash { unsigned long size_bits ; s#hlist_head * buckets ; unsigned long count ; unsigned long flags ; s#callback_head rcu ; }
s#ftrace_ops struct ftrace_ops { t#ftrace_func_t func ; s#ftrace_ops * next ; unsigned long flags ; void * private ; t#ftrace_func_t saved_func ; s#ftrace_ops_hash local_hash ; s#ftrace_ops_hash * func_hash ; s#ftrace_ops_hash old_hash ; unsigned long trampoline ; unsigned long trampoline_size ; }
s#ftrace_ops_hash struct ftrace_ops_hash { s#ftrace_hash * notrace_hash ; s#ftrace_hash * filter_hash ; s#mutex regex_lock ; }
s#ftrace_ret_stack@54b523fb struct ftrace_ret_stack { unsigned long ret ; unsigned long func ; unsigned long long calltime ; unsigned long long subtime ; unsigned long * retp ; }
s#ftrace_ret_stack@5d35a84f struct ftrace_ret_stack { UNKNOWN }
s#futex_pi_state struct futex_pi_state { UNKNOWN }
s#fwnode_endpoint struct fwnode_endpoint { unsigned int port ; unsigned int id ; const s#fwnode_handle * local_fwnode ; }
s#fwnode_handle struct fwnode_handle { s#fwnode_handle * secondary ; const s#fwnode_operations * ops ; }
s#fwnode_operations struct fwnode_operations { s#fwnode_handle * ( * get ) ( s#fwnode_handle * ) ; void ( * put ) ( s#fwnode_handle * ) ; t#bool ( * device_is_available ) ( const s#fwnode_handle * ) ; const void * ( * device_get_match_data ) ( const s#fwnode_handle * , const s#device * ) ; t#bool ( * property_present ) ( const s#fwnode_handle * , const char * ) ; int ( * property_read_int_array ) ( const s#fwnode_handle * , const char * , unsigned int , void * , t#size_t ) ; int ( * property_read_string_array ) ( const s#fwnode_handle * , const char * , const char * * , t#size_t ) ; s#fwnode_handle * ( * get_parent ) ( const s#fwnode_handle * ) ; s#fwnode_handle * ( * get_next_child_node ) ( const s#fwnode_handle * , s#fwnode_handle * ) ; s#fwnode_handle * ( * get_named_child_node ) ( const s#fwnode_handle * , const char * ) ; int ( * get_reference_args ) ( const s#fwnode_handle * , const char * , const char * , unsigned int , unsigned int , s#fwnode_reference_args * ) ; s#fwnode_handle * ( * graph_get_next_endpoint ) ( const s#fwnode_handle * , s#fwnode_handle * ) ; s#fwnode_handle * ( * graph_get_remote_endpoint ) ( const s#fwnode_handle * ) ; s#fwnode_handle * ( * graph_get_port_parent ) ( s#fwnode_handle * ) ; int ( * graph_parse_endpoint ) ( const s#fwnode_handle * , s#fwnode_endpoint * ) ; }
s#fwnode_reference_args struct fwnode_reference_args { s#fwnode_handle * fwnode ; unsigned int nargs ; t#u64 args [ 8 ] ; }
s#fxregs_state struct fxregs_state { t#u16 cwd ; t#u16 swd ; t#u16 twd ; t#u16 fop ; union { struct { t#u64 rip ; t#u64 rdp ; } ; struct { t#u32 fip ; t#u32 fcs ; t#u32 foo ; t#u32 fos ; } ; } ; t#u32 mxcsr ; t#u32 mxcsr_mask ; t#u32 st_space [ 32 ] ; t#u32 xmm_space [ 64 ] ; t#u32 padding [ 12 ] ; union { t#u32 padding1 [ 12 ] ; t#u32 sw_reserved [ 12 ] ; } ; }
s#garp_applicant struct garp_applicant { s#garp_application * app ; s#net_device * dev ; s#timer_list join_timer ; t#spinlock_t lock ; s#sk_buff_head queue ; s#sk_buff * pdu ; s#rb_root gid ; s#callback_head rcu ; }
s#garp_application struct garp_application { e#garp_applications type ; unsigned int maxattr ; s#stp_proto proto ; }
s#garp_port@710646f2 struct garp_port { s#garp_applicant * applicants [ ( E#__GARP_APPLICATION_MAX - 1 ) + 1 ] ; s#callback_head rcu ; }
s#garp_port@d7d34070 struct garp_port { UNKNOWN }
s#gate_struct struct gate_struct { t#u16 offset_low ; t#u16 segment ; s#idt_bits bits ; t#u16 offset_middle ; t#u32 offset_high ; t#u32 reserved ; }
s#gatt_mask struct gatt_mask { unsigned long mask ; t#u32 type ; }
s#gdt_page struct gdt_page { s#desc_struct gdt [ 16 ] ; }
s#gen_pool@87c358e6 struct gen_pool { UNKNOWN }
s#gen_pool@d712e204 struct gen_pool { t#spinlock_t lock ; s#list_head chunks ; int min_alloc_order ; t#genpool_algo_t algo ; void * data ; const char * name ; }
s#gendisk@5a9c6afa struct gendisk { int major ; int first_minor ; int minors ; char disk_name [ 32 ] ; char * ( * devnode ) ( s#gendisk * , t#umode_t * ) ; unsigned short events ; unsigned short event_flags ; s#disk_part_tbl * part_tbl ; s#hd_struct part0 ; const s#block_device_operations * fops ; s#request_queue * queue ; void * private_data ; int flags ; s#rw_semaphore lookup_sem ; s#kobject * slave_dir ; s#timer_rand_state * random ; t#atomic_t sync_io ; s#disk_events * ev ; s#kobject integrity_kobj ; int node_id ; s#badblocks * bb ; s#lockdep_map lockdep_map ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#gendisk@e24151d3 struct gendisk { UNKNOWN }
s#gnet_dump struct gnet_dump { t#spinlock_t * lock ; s#sk_buff * skb ; s#nlattr * tail ; int compat_tc_stats ; int compat_xstats ; int padattr ; void * xstats ; int xstats_len ; s#tc_stats tc_stats ; }
s#gnet_stats_basic_cpu struct gnet_stats_basic_cpu { s#gnet_stats_basic_packed bstats ; s#u64_stats_sync syncp ; }
s#gnet_stats_basic_packed struct gnet_stats_basic_packed { t#__u64 bytes ; t#__u32 packets ; }
s#gnet_stats_queue struct gnet_stats_queue { t#__u32 qlen ; t#__u32 backlog ; t#__u32 drops ; t#__u32 requeues ; t#__u32 overlimits ; }
s#gpio_chip struct gpio_chip { const char * label ; s#gpio_device * gpiodev ; s#device * parent ; s#module * owner ; int ( * request ) ( s#gpio_chip * , unsigned ) ; void ( * free ) ( s#gpio_chip * , unsigned ) ; int ( * get_direction ) ( s#gpio_chip * , unsigned ) ; int ( * direction_input ) ( s#gpio_chip * , unsigned ) ; int ( * direction_output ) ( s#gpio_chip * , unsigned , int ) ; int ( * get ) ( s#gpio_chip * , unsigned ) ; int ( * get_multiple ) ( s#gpio_chip * , unsigned long * , unsigned long * ) ; void ( * set ) ( s#gpio_chip * , unsigned , int ) ; void ( * set_multiple ) ( s#gpio_chip * , unsigned long * , unsigned long * ) ; int ( * set_config ) ( s#gpio_chip * , unsigned , unsigned long ) ; int ( * to_irq ) ( s#gpio_chip * , unsigned ) ; void ( * dbg_show ) ( s#seq_file * , s#gpio_chip * ) ; int ( * init_valid_mask ) ( s#gpio_chip * , unsigned long * , unsigned int ) ; int base ; t#u16 ngpio ; const char * const * names ; t#bool can_sleep ; unsigned long ( * read_reg ) ( void * ) ; void ( * write_reg ) ( void * , unsigned long ) ; t#bool be_bits ; void * reg_dat ; void * reg_set ; void * reg_clr ; void * reg_dir_out ; void * reg_dir_in ; t#bool bgpio_dir_unreadable ; int bgpio_bits ; t#spinlock_t bgpio_lock ; unsigned long bgpio_data ; unsigned long bgpio_dir ; s#gpio_irq_chip irq ; unsigned long * valid_mask ; }
s#gpio_desc@a4f484e7 struct gpio_desc { s#gpio_device * gdev ; unsigned long flags ; const char * label ; const char * name ; }
s#gpio_desc@b1bba9b1 struct gpio_desc { UNKNOWN }
s#gpio_device@3de97c5b struct gpio_device { int id ; s#device dev ; s#cdev chrdev ; s#device * mockdev ; s#module * owner ; s#gpio_chip * chip ; s#gpio_desc * descs ; int base ; t#u16 ngpio ; const char * label ; void * data ; s#list_head list ; s#list_head pin_ranges ; }
s#gpio_device@888eb96e struct gpio_device { UNKNOWN }
s#gpio_irq_chip struct gpio_irq_chip { s#irq_chip * chip ; s#irq_domain * domain ; const s#irq_domain_ops * domain_ops ; s#fwnode_handle * fwnode ; s#irq_domain * parent_domain ; int ( * child_to_parent_hwirq ) ( s#gpio_chip * , unsigned int , unsigned int , unsigned int * , unsigned int * ) ; void ( * populate_parent_fwspec ) ( s#gpio_chip * , s#irq_fwspec * , unsigned int , unsigned int ) ; unsigned int ( * child_offset_to_irq ) ( s#gpio_chip * , unsigned int ) ; s#irq_domain_ops child_irq_domain_ops ; t#irq_flow_handler_t handler ; unsigned int default_type ; s#lock_class_key * lock_key ; s#lock_class_key * request_key ; t#irq_flow_handler_t parent_handler ; void * parent_handler_data ; unsigned int num_parents ; unsigned int * parents ; unsigned int * map ; t#bool threaded ; int ( * init_hw ) ( s#gpio_chip * ) ; void ( * init_valid_mask ) ( s#gpio_chip * , unsigned long * , unsigned int ) ; unsigned long * valid_mask ; unsigned int first ; void ( * irq_enable ) ( s#irq_data * ) ; void ( * irq_disable ) ( s#irq_data * ) ; }
s#gro_list struct gro_list { s#list_head list ; int count ; }
s#group_info struct group_info { t#atomic_t usage ; int ngroups ; t#kgid_t gid [ 0 ] ; }
s#gss_api_mech struct gss_api_mech { s#list_head gm_list ; s#module * gm_owner ; s#rpcsec_gss_oid gm_oid ; char * gm_name ; const s#gss_api_ops * gm_ops ; int gm_pf_num ; s#pf_desc * gm_pfs ; const char * gm_upcall_enctypes ; }
s#gss_api_ops struct gss_api_ops { int ( * gss_import_sec_context ) ( const void * , t#size_t , s#gss_ctx * , t#time_t * , t#gfp_t ) ; t#u32 ( * gss_get_mic ) ( s#gss_ctx * , s#xdr_buf * , s#xdr_netobj * ) ; t#u32 ( * gss_verify_mic ) ( s#gss_ctx * , s#xdr_buf * , s#xdr_netobj * ) ; t#u32 ( * gss_wrap ) ( s#gss_ctx * , int , s#xdr_buf * , s#page * * ) ; t#u32 ( * gss_unwrap ) ( s#gss_ctx * , int , int , s#xdr_buf * ) ; void ( * gss_delete_sec_context ) ( void * ) ; }
s#gss_ctx struct gss_ctx { s#gss_api_mech * mech_type ; void * internal_ctx_id ; unsigned int slack , align ; }
s#hd_geometry@1fae69fd struct hd_geometry { UNKNOWN }
s#hd_geometry@cba8892d struct hd_geometry { unsigned char heads ; unsigned char sectors ; unsigned short cylinders ; unsigned long start ; }
s#hd_struct@1d7bc37c struct hd_struct { UNKNOWN }
s#hd_struct@332d8e6e struct hd_struct { t#sector_t start_sect ; t#sector_t nr_sects ; t#seqcount_t nr_sects_seq ; t#sector_t alignment_offset ; unsigned int discard_alignment ; s#device __dev ; s#kobject * holder_dir ; int policy , partno ; s#partition_meta_info * info ; int make_it_fail ; unsigned long stamp ; s#disk_stats * dkstats ; s#percpu_ref ref ; s#rcu_work rcu_work ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#hdr_sink_metadata struct hdr_sink_metadata { t#__u32 metadata_type ; union { s#hdr_static_metadata hdmi_type1 ; } ; }
s#hdr_static_metadata struct hdr_static_metadata { t#__u8 eotf ; t#__u8 metadata_type ; t#__u16 max_cll ; t#__u16 max_fall ; t#__u16 min_cll ; }
s#header_ops struct header_ops { int ( * create ) ( s#sk_buff * , s#net_device * , unsigned short , const void * , const void * , unsigned int ) ; int ( * parse ) ( const s#sk_buff * , unsigned char * ) ; int ( * cache ) ( const s#neighbour * , s#hh_cache * , t#__be16 ) ; void ( * cache_update ) ( s#hh_cache * , const s#net_device * , const unsigned char * ) ; t#bool ( * validate ) ( const char * , unsigned int ) ; t#__be16 ( * parse_protocol ) ( const s#sk_buff * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#held_lock struct held_lock { t#u64 prev_chain_key ; unsigned long acquire_ip ; s#lockdep_map * instance ; s#lockdep_map * nest_lock ; t#u64 waittime_stamp ; t#u64 holdtime_stamp ; unsigned int class_idx : 13 ; unsigned int irq_context : 2 ; unsigned int trylock : 1 ; unsigned int read : 2 ; unsigned int check : 1 ; unsigned int hardirqs_off : 1 ; unsigned int references : 12 ; unsigned int pin_count ; }
s#hh_cache struct hh_cache { unsigned int hh_len ; t#seqlock_t hh_lock ; unsigned long hh_data [ ( ( ( 128 ) + ( 16 - 1 ) ) & ~ ( 16 - 1 ) ) / sizeof ( long ) ] ; }
s#hlist_bl_head struct hlist_bl_head { s#hlist_bl_node * first ; }
s#hlist_bl_node struct hlist_bl_node { s#hlist_bl_node * next , * * pprev ; }
s#hlist_head struct hlist_head { s#hlist_node * first ; }
s#hlist_node struct hlist_node { s#hlist_node * next , * * pprev ; }
s#hlist_nulls_head struct hlist_nulls_head { s#hlist_nulls_node * first ; }
s#hlist_nulls_node struct hlist_nulls_node { s#hlist_nulls_node * next , * * pprev ; }
s#hotplug_slot@1b7da886 struct hotplug_slot { UNKNOWN }
s#hotplug_slot@83c3bbce struct hotplug_slot { const s#hotplug_slot_ops * ops ; s#list_head slot_list ; s#pci_slot * pci_slot ; s#module * owner ; const char * mod_name ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#hotplug_slot_ops struct hotplug_slot_ops { int ( * enable_slot ) ( s#hotplug_slot * ) ; int ( * disable_slot ) ( s#hotplug_slot * ) ; int ( * set_attention_status ) ( s#hotplug_slot * , t#u8 ) ; int ( * hardware_test ) ( s#hotplug_slot * , t#u32 ) ; int ( * get_power_status ) ( s#hotplug_slot * , t#u8 * ) ; int ( * get_attention_status ) ( s#hotplug_slot * , t#u8 * ) ; int ( * get_latch_status ) ( s#hotplug_slot * , t#u8 * ) ; int ( * get_adapter_status ) ( s#hotplug_slot * , t#u8 * ) ; int ( * reset_slot ) ( s#hotplug_slot * , int ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#hrtimer struct hrtimer { s#timerqueue_node node ; t#ktime_t _softexpires ; e#hrtimer_restart ( * function ) ( s#hrtimer * ) ; s#hrtimer_clock_base * base ; t#u8 state ; t#u8 is_rel ; t#u8 is_soft ; t#u8 is_hard ; }
s#hrtimer_clock_base struct hrtimer_clock_base { s#hrtimer_cpu_base * cpu_base ; unsigned int index ; t#clockid_t clockid ; t#seqcount_t seq ; s#hrtimer * running ; s#timerqueue_head active ; t#ktime_t ( * get_time ) ( void ) ; t#ktime_t offset ; }
s#hrtimer_cpu_base struct hrtimer_cpu_base { t#raw_spinlock_t lock ; unsigned int cpu ; unsigned int active_bases ; unsigned int clock_was_set_seq ; unsigned int hres_active : 1 , in_hrtirq : 1 , hang_detected : 1 , softirq_activated : 1 ; unsigned int nr_events ; unsigned short nr_retries ; unsigned short nr_hangs ; unsigned int max_hang_time ; t#ktime_t expires_next ; s#hrtimer * next_timer ; t#ktime_t softirq_expires_next ; s#hrtimer * softirq_next_timer ; s#hrtimer_clock_base clock_base [ E#HRTIMER_MAX_CLOCK_BASES ] ; }
s#hw_perf_event struct hw_perf_event { union { struct { t#u64 config ; t#u64 last_tag ; unsigned long config_base ; unsigned long event_base ; int event_base_rdpmc ; int idx ; int last_cpu ; int flags ; s#hw_perf_event_extra extra_reg ; s#hw_perf_event_extra branch_reg ; } ; struct { s#hrtimer hrtimer ; } ; struct { s#list_head tp_list ; } ; struct { t#u64 pwr_acc ; t#u64 ptsc ; } ; struct { s#arch_hw_breakpoint info ; s#list_head bp_list ; } ; struct { t#u8 iommu_bank ; t#u8 iommu_cntr ; t#u16 padding ; t#u64 conf ; t#u64 conf1 ; } ; } ; s#task_struct * target ; void * addr_filters ; unsigned long addr_filters_gen ; int state ; t#local64_t prev_count ; t#u64 sample_period ; t#u64 last_period ; t#local64_t period_left ; t#u64 interrupts_seq ; t#u64 interrupts ; t#u64 freq_time_stamp ; t#u64 freq_count_stamp ; }
s#hw_perf_event_extra struct hw_perf_event_extra { t#u64 config ; unsigned int reg ; int alloc ; int idx ; }
s#i2c_adapter@796d655d struct i2c_adapter { UNKNOWN }
s#i2c_adapter@bce1d587 struct i2c_adapter { s#module * owner ; unsigned int class ; const s#i2c_algorithm * algo ; void * algo_data ; const s#i2c_lock_operations * lock_ops ; s#rt_mutex bus_lock ; s#rt_mutex mux_lock ; int timeout ; int retries ; s#device dev ; unsigned long locked_flags ; int nr ; char name [ 48 ] ; s#completion dev_released ; s#mutex userspace_clients_lock ; s#list_head userspace_clients ; s#i2c_bus_recovery_info * bus_recovery_info ; const s#i2c_adapter_quirks * quirks ; s#irq_domain * host_notify_domain ; }
s#i2c_adapter_quirks struct i2c_adapter_quirks { t#u64 flags ; int max_num_msgs ; t#u16 max_write_len ; t#u16 max_read_len ; t#u16 max_comb_1st_msg_len ; t#u16 max_comb_2nd_msg_len ; }
s#i2c_algorithm struct i2c_algorithm { int ( * master_xfer ) ( s#i2c_adapter * , s#i2c_msg * , int ) ; int ( * master_xfer_atomic ) ( s#i2c_adapter * , s#i2c_msg * , int ) ; int ( * smbus_xfer ) ( s#i2c_adapter * , t#u16 , unsigned short , char , t#u8 , int , u#i2c_smbus_data * ) ; int ( * smbus_xfer_atomic ) ( s#i2c_adapter * , t#u16 , unsigned short , char , t#u8 , int , u#i2c_smbus_data * ) ; t#u32 ( * functionality ) ( s#i2c_adapter * ) ; }
s#i2c_bus_recovery_info struct i2c_bus_recovery_info { int ( * recover_bus ) ( s#i2c_adapter * ) ; int ( * get_scl ) ( s#i2c_adapter * ) ; void ( * set_scl ) ( s#i2c_adapter * , int ) ; int ( * get_sda ) ( s#i2c_adapter * ) ; void ( * set_sda ) ( s#i2c_adapter * , int ) ; int ( * get_bus_free ) ( s#i2c_adapter * ) ; void ( * prepare_recovery ) ( s#i2c_adapter * ) ; void ( * unprepare_recovery ) ( s#i2c_adapter * ) ; s#gpio_desc * scl_gpiod ; s#gpio_desc * sda_gpiod ; }
s#i2c_lock_operations struct i2c_lock_operations { void ( * lock_bus ) ( s#i2c_adapter * , unsigned int ) ; int ( * trylock_bus ) ( s#i2c_adapter * , unsigned int ) ; void ( * unlock_bus ) ( s#i2c_adapter * , unsigned int ) ; }
s#i2c_msg struct i2c_msg { t#__u16 addr ; t#__u16 flags ; t#__u16 len ; t#__u8 * buf ; }
s#iattr struct iattr { unsigned int ia_valid ; t#umode_t ia_mode ; t#kuid_t ia_uid ; t#kgid_t ia_gid ; t#loff_t ia_size ; s#timespec64 ia_atime ; s#timespec64 ia_mtime ; s#timespec64 ia_ctime ; s#file * ia_file ; }
s#icmp_mib struct icmp_mib { unsigned long mibs [ E#__ICMP_MIB_MAX ] ; }
s#icmpmsg_mib struct icmpmsg_mib { t#atomic_long_t mibs [ 512 ] ; }
s#icmpv6_mib struct icmpv6_mib { unsigned long mibs [ E#__ICMP6_MIB_MAX ] ; }
s#icmpv6_mib_device struct icmpv6_mib_device { t#atomic_long_t mibs [ E#__ICMP6_MIB_MAX ] ; }
s#icmpv6msg_mib struct icmpv6msg_mib { t#atomic_long_t mibs [ 512 ] ; }
s#icmpv6msg_mib_device struct icmpv6msg_mib_device { t#atomic_long_t mibs [ 512 ] ; }
s#ida struct ida { s#xarray xa ; }
s#idmap struct idmap { UNKNOWN }
s#idr struct idr { s#xarray idr_rt ; unsigned int idr_base ; unsigned int idr_next ; }
s#idt_bits struct idt_bits { t#u16 ist : 3 , zero : 5 , type : 5 , dpl : 2 , p : 1 ; }
s#ieee80211_channel struct ieee80211_channel { e#nl80211_band band ; t#u32 center_freq ; t#u16 hw_value ; t#u32 flags ; int max_antenna_gain ; int max_power ; int max_reg_power ; t#bool beacon_found ; t#u32 orig_flags ; int orig_mag , orig_mpwr ; e#nl80211_dfs_state dfs_state ; unsigned long dfs_state_entered ; unsigned int dfs_cac_ms ; }
s#ieee80211_edmg struct ieee80211_edmg { t#u8 channels ; e#ieee80211_edmg_bw_config bw_config ; }
s#ieee80211_freq_range struct ieee80211_freq_range { t#u32 start_freq_khz ; t#u32 end_freq_khz ; t#u32 max_bandwidth_khz ; }
s#ieee80211_he_cap_elem struct ieee80211_he_cap_elem { t#u8 mac_cap_info [ 6 ] ; t#u8 phy_cap_info [ 11 ] ; }
s#ieee80211_he_mcs_nss_supp struct ieee80211_he_mcs_nss_supp { t#__le16 rx_mcs_80 ; t#__le16 tx_mcs_80 ; t#__le16 rx_mcs_160 ; t#__le16 tx_mcs_160 ; t#__le16 rx_mcs_80p80 ; t#__le16 tx_mcs_80p80 ; }
s#ieee80211_ht_cap struct ieee80211_ht_cap { t#__le16 cap_info ; t#u8 ampdu_params_info ; s#ieee80211_mcs_info mcs ; t#__le16 extended_ht_cap_info ; t#__le32 tx_BF_cap_info ; t#u8 antenna_selection_info ; }
s#ieee80211_iface_combination struct ieee80211_iface_combination { const s#ieee80211_iface_limit * limits ; t#u32 num_different_channels ; t#u16 max_interfaces ; t#u8 n_limits ; t#bool beacon_int_infra_match ; t#u8 radar_detect_widths ; t#u8 radar_detect_regions ; t#u32 beacon_int_min_gcd ; }
s#ieee80211_iface_limit struct ieee80211_iface_limit { t#u16 max ; t#u16 types ; }
s#ieee80211_mcs_info struct ieee80211_mcs_info { t#u8 rx_mask [ 10 ] ; t#__le16 rx_highest ; t#u8 tx_params ; t#u8 reserved [ 3 ] ; }
s#ieee80211_power_rule struct ieee80211_power_rule { t#u32 max_antenna_gain ; t#u32 max_eirp ; }
s#ieee80211_rate struct ieee80211_rate { t#u32 flags ; t#u16 bitrate ; t#u16 hw_value , hw_value_short ; }
s#ieee80211_reg_rule struct ieee80211_reg_rule { s#ieee80211_freq_range freq_range ; s#ieee80211_power_rule power_rule ; s#ieee80211_wmm_rule wmm_rule ; t#u32 flags ; t#u32 dfs_cac_ms ; t#bool has_wmm ; }
s#ieee80211_regdomain struct ieee80211_regdomain { s#callback_head callback_head ; t#u32 n_reg_rules ; char alpha2 [ 3 ] ; e#nl80211_dfs_regions dfs_region ; s#ieee80211_reg_rule reg_rules [ ] ; }
s#ieee80211_sband_iftype_data struct ieee80211_sband_iftype_data { t#u16 types_mask ; s#ieee80211_sta_he_cap he_cap ; }
s#ieee80211_sta_he_cap struct ieee80211_sta_he_cap { t#bool has_he ; s#ieee80211_he_cap_elem he_cap_elem ; s#ieee80211_he_mcs_nss_supp he_mcs_nss_supp ; t#u8 ppe_thres [ 25 ] ; }
s#ieee80211_sta_ht_cap struct ieee80211_sta_ht_cap { t#u16 cap ; t#bool ht_supported ; t#u8 ampdu_factor ; t#u8 ampdu_density ; s#ieee80211_mcs_info mcs ; }
s#ieee80211_sta_vht_cap struct ieee80211_sta_vht_cap { t#bool vht_supported ; t#u32 cap ; s#ieee80211_vht_mcs_info vht_mcs ; }
s#ieee80211_supported_band struct ieee80211_supported_band { s#ieee80211_channel * channels ; s#ieee80211_rate * bitrates ; e#nl80211_band band ; int n_channels ; int n_bitrates ; s#ieee80211_sta_ht_cap ht_cap ; s#ieee80211_sta_vht_cap vht_cap ; s#ieee80211_edmg edmg_cap ; t#u16 n_iftype_data ; const s#ieee80211_sband_iftype_data * iftype_data ; }
s#ieee80211_txrx_stypes struct ieee80211_txrx_stypes { t#u16 tx , rx ; }
s#ieee80211_vht_cap struct ieee80211_vht_cap { t#__le32 vht_cap_info ; s#ieee80211_vht_mcs_info supp_mcs ; }
s#ieee80211_vht_mcs_info struct ieee80211_vht_mcs_info { t#__le16 rx_mcs_map ; t#__le16 rx_highest ; t#__le16 tx_mcs_map ; t#__le16 tx_highest ; }
s#ieee80211_wmm_ac struct ieee80211_wmm_ac { t#u16 cw_min ; t#u16 cw_max ; t#u16 cot ; t#u8 aifsn ; }
s#ieee80211_wmm_rule struct ieee80211_wmm_rule { s#ieee80211_wmm_ac client [ 4 ] ; s#ieee80211_wmm_ac ap [ 4 ] ; }
s#ieee802154_addr struct ieee802154_addr { t#u8 mode ; t#__le16 pan_id ; union { t#__le16 short_addr ; t#__le64 extended_addr ; } ; }
s#ieee_ets struct ieee_ets { t#__u8 willing ; t#__u8 ets_cap ; t#__u8 cbs ; t#__u8 tc_tx_bw [ 8 ] ; t#__u8 tc_rx_bw [ 8 ] ; t#__u8 tc_tsa [ 8 ] ; t#__u8 prio_tc [ 8 ] ; t#__u8 tc_reco_bw [ 8 ] ; t#__u8 tc_reco_tsa [ 8 ] ; t#__u8 reco_prio_tc [ 8 ] ; }
s#ieee_maxrate struct ieee_maxrate { t#__u64 tc_maxrate [ 8 ] ; }
s#ieee_pfc struct ieee_pfc { t#__u8 pfc_cap ; t#__u8 pfc_en ; t#__u8 mbc ; t#__u16 delay ; t#__u64 requests [ 8 ] ; t#__u64 indications [ 8 ] ; }
s#ieee_qcn struct ieee_qcn { t#__u8 rpg_enable [ 8 ] ; t#__u32 rppp_max_rps [ 8 ] ; t#__u32 rpg_time_reset [ 8 ] ; t#__u32 rpg_byte_reset [ 8 ] ; t#__u32 rpg_threshold [ 8 ] ; t#__u32 rpg_max_rate [ 8 ] ; t#__u32 rpg_ai_rate [ 8 ] ; t#__u32 rpg_hai_rate [ 8 ] ; t#__u32 rpg_gd [ 8 ] ; t#__u32 rpg_min_dec_fac [ 8 ] ; t#__u32 rpg_min_rate [ 8 ] ; t#__u32 cndd_state_machine [ 8 ] ; }
s#ieee_qcn_stats struct ieee_qcn_stats { t#__u64 rppp_rp_centiseconds [ 8 ] ; t#__u32 rppp_created_rps [ 8 ] ; }
s#if_settings struct if_settings { unsigned int type ; unsigned int size ; union { t#raw_hdlc_proto * raw_hdlc ; t#cisco_proto * cisco ; t#fr_proto * fr ; t#fr_proto_pvc * fr_pvc ; t#fr_proto_pvc_info * fr_pvc_info ; t#sync_serial_settings * sync ; t#te1_settings * te1 ; } ifs_ifsu ; }
s#ifacaddr6 struct ifacaddr6 { s#in6_addr aca_addr ; s#fib6_info * aca_rt ; s#ifacaddr6 * aca_next ; s#hlist_node aca_addr_lst ; int aca_users ; t#refcount_t aca_refcnt ; unsigned long aca_cstamp ; unsigned long aca_tstamp ; s#callback_head rcu ; }
s#ifla_vf_info struct ifla_vf_info { t#__u32 vf ; t#__u8 mac [ 32 ] ; t#__u32 vlan ; t#__u32 qos ; t#__u32 spoofchk ; t#__u32 linkstate ; t#__u32 min_tx_rate ; t#__u32 max_tx_rate ; t#__u32 rss_query_en ; t#__u32 trusted ; t#__be16 vlan_proto ; }
s#ifla_vf_stats struct ifla_vf_stats { t#__u64 rx_packets ; t#__u64 tx_packets ; t#__u64 rx_bytes ; t#__u64 tx_bytes ; t#__u64 broadcast ; t#__u64 multicast ; t#__u64 rx_dropped ; t#__u64 tx_dropped ; }
s#ifmap struct ifmap { unsigned long mem_start ; unsigned long mem_end ; unsigned short base_addr ; unsigned char irq ; unsigned char dma ; unsigned char port ; }
s#ifmcaddr6 struct ifmcaddr6 { s#in6_addr mca_addr ; s#inet6_dev * idev ; s#ifmcaddr6 * next ; s#ip6_sf_list * mca_sources ; s#ip6_sf_list * mca_tomb ; unsigned int mca_sfmode ; unsigned char mca_crcount ; unsigned long mca_sfcount [ 2 ] ; s#timer_list mca_timer ; unsigned int mca_flags ; int mca_users ; t#refcount_t mca_refcnt ; t#spinlock_t mca_lock ; unsigned long mca_cstamp ; unsigned long mca_tstamp ; }
s#ifreq struct ifreq { union { char ifrn_name [ 16 ] ; } ifr_ifrn ; union { s#sockaddr ifru_addr ; s#sockaddr ifru_dstaddr ; s#sockaddr ifru_broadaddr ; s#sockaddr ifru_netmask ; s#sockaddr ifru_hwaddr ; short ifru_flags ; int ifru_ivalue ; int ifru_mtu ; s#ifmap ifru_map ; char ifru_slave [ 16 ] ; char ifru_newname [ 16 ] ; void * ifru_data ; s#if_settings ifru_settings ; } ifr_ifru ; }
s#in6_addr@52a16b22 struct in6_addr { union { t#__u8 u6_addr8 [ 16 ] ; t#__be16 u6_addr16 [ 8 ] ; t#__be32 u6_addr32 [ 4 ] ; } in6_u ; }
s#in6_addr@d91c0c20 struct in6_addr { UNKNOWN }
s#in_addr struct in_addr { t#__be32 s_addr ; }
s#in_device@d6565e2d struct in_device { s#net_device * dev ; t#refcount_t refcnt ; int dead ; s#in_ifaddr * ifa_list ; s#ip_mc_list * mc_list ; s#ip_mc_list * * mc_hash ; int mc_count ; t#spinlock_t mc_tomb_lock ; s#ip_mc_list * mc_tomb ; unsigned long mr_v1_seen ; unsigned long mr_v2_seen ; unsigned long mr_maxdelay ; unsigned long mr_qi ; unsigned long mr_qri ; unsigned char mr_qrv ; unsigned char mr_gq_running ; unsigned char mr_ifc_count ; s#timer_list mr_gq_timer ; s#timer_list mr_ifc_timer ; s#neigh_parms * arp_parms ; s#ipv4_devconf cnf ; s#callback_head callback_head ; }
s#in_device@e840243a struct in_device { UNKNOWN }
s#in_ifaddr struct in_ifaddr { s#hlist_node hash ; s#in_ifaddr * ifa_next ; s#in_device * ifa_dev ; s#callback_head callback_head ; t#__be32 ifa_local ; t#__be32 ifa_address ; t#__be32 ifa_mask ; t#__u32 ifa_rt_priority ; t#__be32 ifa_broadcast ; unsigned char ifa_scope ; unsigned char ifa_prefixlen ; t#__u32 ifa_flags ; char ifa_label [ 16 ] ; t#__u32 ifa_valid_lft ; t#__u32 ifa_preferred_lft ; unsigned long ifa_cstamp ; unsigned long ifa_tstamp ; }
s#inet6_dev@0c18377d struct inet6_dev { s#net_device * dev ; s#list_head addr_list ; s#ifmcaddr6 * mc_list ; s#ifmcaddr6 * mc_tomb ; t#spinlock_t mc_lock ; unsigned char mc_qrv ; unsigned char mc_gq_running ; unsigned char mc_ifc_count ; unsigned char mc_dad_count ; unsigned long mc_v1_seen ; unsigned long mc_qi ; unsigned long mc_qri ; unsigned long mc_maxdelay ; s#timer_list mc_gq_timer ; s#timer_list mc_ifc_timer ; s#timer_list mc_dad_timer ; s#ifacaddr6 * ac_list ; t#rwlock_t lock ; t#refcount_t refcnt ; t#__u32 if_flags ; int dead ; t#u32 desync_factor ; t#u8 rndid [ 8 ] ; s#list_head tempaddr_list ; s#in6_addr token ; s#neigh_parms * nd_parms ; s#ipv6_devconf cnf ; s#ipv6_devstat stats ; s#timer_list rs_timer ; t#__s32 rs_interval ; t#__u8 rs_probes ; unsigned long tstamp ; s#callback_head rcu ; }
s#inet6_dev@fbc129b1 struct inet6_dev { UNKNOWN }
s#inet_bind_hashbucket struct inet_bind_hashbucket { t#spinlock_t lock ; s#hlist_head chain ; }
s#inet_ehash_bucket struct inet_ehash_bucket { s#hlist_nulls_head chain ; }
s#inet_frag_queue struct inet_frag_queue { s#rhash_head node ; union { s#frag_v4_compare_key v4 ; s#frag_v6_compare_key v6 ; } key ; s#timer_list timer ; t#spinlock_t lock ; t#refcount_t refcnt ; s#rb_root rb_fragments ; s#sk_buff * fragments_tail ; s#sk_buff * last_run_head ; t#ktime_t stamp ; int len ; int meat ; t#__u8 flags ; t#u16 max_size ; s#fqdir * fqdir ; s#callback_head rcu ; }
s#inet_frags struct inet_frags { unsigned int qsize ; void ( * constructor ) ( s#inet_frag_queue * , const void * ) ; void ( * destructor ) ( s#inet_frag_queue * ) ; void ( * frag_expire ) ( s#timer_list * ) ; s#kmem_cache * frags_cachep ; const char * frags_cache_name ; s#rhashtable_params rhash_params ; t#refcount_t refcnt ; s#completion completion ; }
s#inet_hashinfo@79948b29 struct inet_hashinfo { s#inet_ehash_bucket * ehash ; t#spinlock_t * ehash_locks ; unsigned int ehash_mask ; unsigned int ehash_locks_mask ; s#kmem_cache * bind_bucket_cachep ; s#inet_bind_hashbucket * bhash ; unsigned int bhash_size ; unsigned int lhash2_mask ; s#inet_listen_hashbucket * lhash2 ; s#inet_listen_hashbucket listening_hash [ 32 ] __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; }
s#inet_hashinfo@b8c86004 struct inet_hashinfo { UNKNOWN }
s#inet_listen_hashbucket struct inet_listen_hashbucket { t#spinlock_t lock ; unsigned int count ; union { s#hlist_head head ; s#hlist_nulls_head nulls_head ; } ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#inet_peer_base@34625d11 struct inet_peer_base { UNKNOWN }
s#inet_peer_base@b794a578 struct inet_peer_base { s#rb_root rb_root ; t#seqlock_t lock ; int total ; }
s#inet_timewait_death_row struct inet_timewait_death_row { t#atomic_t tw_count ; s#inet_hashinfo * hashinfo __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; int sysctl_max_tw_buckets ; }
s#inode@1197d713 struct inode { UNKNOWN }
s#inode@247ddf29 struct inode { t#umode_t i_mode ; unsigned short i_opflags ; t#kuid_t i_uid ; t#kgid_t i_gid ; unsigned int i_flags ; s#posix_acl * i_acl ; s#posix_acl * i_default_acl ; const s#inode_operations * i_op ; s#super_block * i_sb ; s#address_space * i_mapping ; void * i_security ; unsigned long i_ino ; union { const unsigned int i_nlink ; unsigned int __i_nlink ; } ; t#dev_t i_rdev ; t#loff_t i_size ; s#timespec64 i_atime ; s#timespec64 i_mtime ; s#timespec64 i_ctime ; t#spinlock_t i_lock ; unsigned short i_bytes ; t#u8 i_blkbits ; t#u8 i_write_hint ; t#blkcnt_t i_blocks ; unsigned long i_state ; s#rw_semaphore i_rwsem ; unsigned long dirtied_when ; unsigned long dirtied_time_when ; s#hlist_node i_hash ; s#list_head i_io_list ; s#bdi_writeback * i_wb ; int i_wb_frn_winner ; t#u16 i_wb_frn_avg_time ; t#u16 i_wb_frn_history ; s#list_head i_lru ; s#list_head i_sb_list ; s#list_head i_wb_list ; union { s#hlist_head i_dentry ; s#callback_head i_rcu ; } ; t#atomic64_t i_version ; t#atomic_t i_count ; t#atomic_t i_dio_count ; t#atomic_t i_writecount ; t#atomic_t i_readcount ; union { const s#file_operations * i_fop ; void ( * free_inode ) ( s#inode * ) ; } ; s#file_lock_context * i_flctx ; s#address_space i_data ; s#list_head i_devices ; union { s#pipe_inode_info * i_pipe ; s#block_device * i_bdev ; s#cdev * i_cdev ; char * i_link ; unsigned i_dir_seq ; } ; t#__u32 i_generation ; t#__u32 i_fsnotify_mask ; s#fsnotify_mark_connector * i_fsnotify_marks ; s#fscrypt_info * i_crypt_info ; void * i_private ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#inode_operations struct inode_operations { s#dentry * ( * lookup ) ( s#inode * , s#dentry * , unsigned int ) ; const char * ( * get_link ) ( s#dentry * , s#inode * , s#delayed_call * ) ; int ( * permission ) ( s#inode * , int ) ; s#posix_acl * ( * get_acl ) ( s#inode * , int ) ; int ( * readlink ) ( s#dentry * , char * , int ) ; int ( * create ) ( s#inode * , s#dentry * , t#umode_t , t#bool ) ; int ( * link ) ( s#dentry * , s#inode * , s#dentry * ) ; int ( * unlink ) ( s#inode * , s#dentry * ) ; int ( * symlink ) ( s#inode * , s#dentry * , const char * ) ; int ( * mkdir ) ( s#inode * , s#dentry * , t#umode_t ) ; int ( * rmdir ) ( s#inode * , s#dentry * ) ; int ( * mknod ) ( s#inode * , s#dentry * , t#umode_t , t#dev_t ) ; int ( * rename ) ( s#inode * , s#dentry * , s#inode * , s#dentry * , unsigned int ) ; int ( * setattr ) ( s#dentry * , s#iattr * ) ; int ( * getattr ) ( const s#path * , s#kstat * , t#u32 , unsigned int ) ; t#ssize_t ( * listxattr ) ( s#dentry * , char * , t#size_t ) ; int ( * fiemap ) ( s#inode * , s#fiemap_extent_info * , t#u64 , t#u64 ) ; int ( * update_time ) ( s#inode * , s#timespec64 * , int ) ; int ( * atomic_open ) ( s#inode * , s#dentry * , s#file * , unsigned , t#umode_t ) ; int ( * tmpfile ) ( s#inode * , s#dentry * , t#umode_t ) ; int ( * set_acl ) ( s#inode * , s#posix_acl * , int ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#input_absinfo struct input_absinfo { t#__s32 value ; t#__s32 minimum ; t#__s32 maximum ; t#__s32 fuzz ; t#__s32 flat ; t#__s32 resolution ; }
s#input_dev@23cd9473 struct input_dev { const char * name ; const char * phys ; const char * uniq ; s#input_id id ; unsigned long propbit [ ( ( ( ( 0x1f + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long evbit [ ( ( ( ( 0x1f + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long keybit [ ( ( ( ( 0x2ff + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long relbit [ ( ( ( ( 0x0f + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long absbit [ ( ( ( ( 0x3f + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long mscbit [ ( ( ( ( 0x07 + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long ledbit [ ( ( ( ( 0x0f + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long sndbit [ ( ( ( ( 0x07 + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long ffbit [ ( ( ( ( 0x7f + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long swbit [ ( ( ( ( 0x0f + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned int hint_events_per_packet ; unsigned int keycodemax ; unsigned int keycodesize ; void * keycode ; int ( * setkeycode ) ( s#input_dev * , const s#input_keymap_entry * , unsigned int * ) ; int ( * getkeycode ) ( s#input_dev * , s#input_keymap_entry * ) ; s#ff_device * ff ; s#input_dev_poller * poller ; unsigned int repeat_key ; s#timer_list timer ; int rep [ ( 0x01 + 1 ) ] ; s#input_mt * mt ; s#input_absinfo * absinfo ; unsigned long key [ ( ( ( ( 0x2ff + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long led [ ( ( ( ( 0x0f + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long snd [ ( ( ( ( 0x07 + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long sw [ ( ( ( ( 0x0f + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; int ( * open ) ( s#input_dev * ) ; void ( * close ) ( s#input_dev * ) ; int ( * flush ) ( s#input_dev * , s#file * ) ; int ( * event ) ( s#input_dev * , unsigned int , unsigned int , int ) ; s#input_handle * grab ; t#spinlock_t event_lock ; s#mutex mutex ; unsigned int users ; t#bool going_away ; s#device dev ; s#list_head h_list ; s#list_head node ; unsigned int num_vals ; unsigned int max_vals ; s#input_value * vals ; t#bool devres_managed ; t#ktime_t timestamp [ E#INPUT_CLK_MAX ] ; }
s#input_dev@ec02e1a5 struct input_dev { UNKNOWN }
s#input_dev_poller struct input_dev_poller { UNKNOWN }
s#input_device_id struct input_device_id { t#kernel_ulong_t flags ; t#__u16 bustype ; t#__u16 vendor ; t#__u16 product ; t#__u16 version ; t#kernel_ulong_t evbit [ 0x1f / 64 + 1 ] ; t#kernel_ulong_t keybit [ 0x2ff / 64 + 1 ] ; t#kernel_ulong_t relbit [ 0x0f / 64 + 1 ] ; t#kernel_ulong_t absbit [ 0x3f / 64 + 1 ] ; t#kernel_ulong_t mscbit [ 0x07 / 64 + 1 ] ; t#kernel_ulong_t ledbit [ 0x0f / 64 + 1 ] ; t#kernel_ulong_t sndbit [ 0x07 / 64 + 1 ] ; t#kernel_ulong_t ffbit [ 0x7f / 64 + 1 ] ; t#kernel_ulong_t swbit [ 0x0f / 64 + 1 ] ; t#kernel_ulong_t propbit [ 0x1f / 64 + 1 ] ; t#kernel_ulong_t driver_info ; }
s#input_handle struct input_handle { void * private ; int open ; const char * name ; s#input_dev * dev ; s#input_handler * handler ; s#list_head d_node ; s#list_head h_node ; }
s#input_handler struct input_handler { void * private ; void ( * event ) ( s#input_handle * , unsigned int , unsigned int , int ) ; void ( * events ) ( s#input_handle * , const s#input_value * , unsigned int ) ; t#bool ( * filter ) ( s#input_handle * , unsigned int , unsigned int , int ) ; t#bool ( * match ) ( s#input_handler * , s#input_dev * ) ; int ( * connect ) ( s#input_handler * , s#input_dev * , const s#input_device_id * ) ; void ( * disconnect ) ( s#input_handle * ) ; void ( * start ) ( s#input_handle * ) ; t#bool legacy_minors ; int minor ; const char * name ; const s#input_device_id * id_table ; s#list_head h_list ; s#list_head node ; }
s#input_id struct input_id { t#__u16 bustype ; t#__u16 vendor ; t#__u16 product ; t#__u16 version ; }
s#input_keymap_entry struct input_keymap_entry { t#__u8 flags ; t#__u8 len ; t#__u16 index ; t#__u32 keycode ; t#__u8 scancode [ 32 ] ; }
s#input_mt@4b7f3470 struct input_mt { int trkid ; int num_slots ; int slot ; unsigned int flags ; unsigned int frame ; int * red ; s#input_mt_slot slots [ ] ; }
s#input_mt@50557a0d struct input_mt { UNKNOWN }
s#input_mt_slot struct input_mt_slot { int abs [ 0x3d - 0x30 + 1 ] ; unsigned int frame ; unsigned int key ; }
s#input_value struct input_value { t#__u16 type ; t#__u16 code ; t#__s32 value ; }
s#io_context@3741925f struct io_context { UNKNOWN }
s#io_context@74d48535 struct io_context { t#atomic_long_t refcount ; t#atomic_t active_ref ; t#atomic_t nr_tasks ; t#spinlock_t lock ; unsigned short ioprio ; int nr_batch_requests ; unsigned long last_waited ; s#xarray icq_tree ; s#io_cq * icq_hint ; s#hlist_head icq_list ; s#work_struct release_work ; }
s#io_cq struct io_cq { s#request_queue * q ; s#io_context * ioc ; union { s#list_head q_node ; s#kmem_cache * __rcu_icq_cache ; } ; union { s#hlist_node ioc_node ; s#callback_head __rcu_head ; } ; unsigned int flags ; }
s#iomap@3288b49c struct iomap { UNKNOWN }
s#iomap@eb8c1f8e struct iomap { t#u64 addr ; t#loff_t offset ; t#u64 length ; t#u16 type ; t#u16 flags ; s#block_device * bdev ; s#dax_device * dax_dev ; void * inline_data ; void * private ; const s#iomap_page_ops * page_ops ; }
s#iomap_page_ops struct iomap_page_ops { int ( * page_prepare ) ( s#inode * , t#loff_t , unsigned , s#iomap * ) ; void ( * page_done ) ( s#inode * , t#loff_t , unsigned , s#page * , s#iomap * ) ; }
s#iommu_domain@3cbf842a struct iommu_domain { unsigned type ; const s#iommu_ops * ops ; unsigned long pgsize_bitmap ; t#iommu_fault_handler_t handler ; void * handler_token ; s#iommu_domain_geometry geometry ; void * iova_cookie ; }
s#iommu_domain@45bfc195 struct iommu_domain { UNKNOWN }
s#iommu_domain_geometry struct iommu_domain_geometry { t#dma_addr_t aperture_start ; t#dma_addr_t aperture_end ; t#bool force_aperture ; }
s#iommu_fault struct iommu_fault { t#__u32 type ; t#__u32 padding ; union { s#iommu_fault_unrecoverable event ; s#iommu_fault_page_request prm ; t#__u8 padding2 [ 56 ] ; } ; }
s#iommu_fault_event struct iommu_fault_event { s#iommu_fault fault ; s#list_head list ; }
s#iommu_fault_page_request struct iommu_fault_page_request { t#__u32 flags ; t#__u32 pasid ; t#__u32 grpid ; t#__u32 perm ; t#__u64 addr ; t#__u64 private_data [ 2 ] ; }
s#iommu_fault_param struct iommu_fault_param { t#iommu_dev_fault_handler_t handler ; void * data ; s#list_head faults ; s#mutex lock ; }
s#iommu_fault_unrecoverable struct iommu_fault_unrecoverable { t#__u32 reason ; t#__u32 flags ; t#__u32 pasid ; t#__u32 perm ; t#__u64 addr ; t#__u64 fetch_addr ; }
s#iommu_fwspec@0612b24b struct iommu_fwspec { const s#iommu_ops * ops ; s#fwnode_handle * iommu_fwnode ; void * iommu_priv ; t#u32 flags ; unsigned int num_ids ; t#u32 ids [ 1 ] ; }
s#iommu_fwspec@adc7e3b0 struct iommu_fwspec { UNKNOWN }
s#iommu_group struct iommu_group { UNKNOWN }
s#iommu_iotlb_gather struct iommu_iotlb_gather { unsigned long start ; unsigned long end ; t#size_t pgsize ; }
s#iommu_ops@1370663c struct iommu_ops { UNKNOWN }
s#iommu_ops@f490065f struct iommu_ops { t#bool ( * capable ) ( e#iommu_cap ) ; s#iommu_domain * ( * domain_alloc ) ( unsigned ) ; void ( * domain_free ) ( s#iommu_domain * ) ; int ( * attach_dev ) ( s#iommu_domain * , s#device * ) ; void ( * detach_dev ) ( s#iommu_domain * , s#device * ) ; int ( * map ) ( s#iommu_domain * , unsigned long , t#phys_addr_t , t#size_t , int ) ; t#size_t ( * unmap ) ( s#iommu_domain * , unsigned long , t#size_t , s#iommu_iotlb_gather * ) ; void ( * flush_iotlb_all ) ( s#iommu_domain * ) ; void ( * iotlb_sync_map ) ( s#iommu_domain * ) ; void ( * iotlb_sync ) ( s#iommu_domain * , s#iommu_iotlb_gather * ) ; t#phys_addr_t ( * iova_to_phys ) ( s#iommu_domain * , t#dma_addr_t ) ; int ( * add_device ) ( s#device * ) ; void ( * remove_device ) ( s#device * ) ; s#iommu_group * ( * device_group ) ( s#device * ) ; int ( * domain_get_attr ) ( s#iommu_domain * , e#iommu_attr , void * ) ; int ( * domain_set_attr ) ( s#iommu_domain * , e#iommu_attr , void * ) ; void ( * get_resv_regions ) ( s#device * , s#list_head * ) ; void ( * put_resv_regions ) ( s#device * , s#list_head * ) ; void ( * apply_resv_region ) ( s#device * , s#iommu_domain * , s#iommu_resv_region * ) ; int ( * domain_window_enable ) ( s#iommu_domain * , t#u32 , t#phys_addr_t , t#u64 , int ) ; void ( * domain_window_disable ) ( s#iommu_domain * , t#u32 ) ; int ( * of_xlate ) ( s#device * , s#of_phandle_args * ) ; t#bool ( * is_attach_deferred ) ( s#iommu_domain * , s#device * ) ; t#bool ( * dev_has_feat ) ( s#device * , e#iommu_dev_features ) ; t#bool ( * dev_feat_enabled ) ( s#device * , e#iommu_dev_features ) ; int ( * dev_enable_feat ) ( s#device * , e#iommu_dev_features ) ; int ( * dev_disable_feat ) ( s#device * , e#iommu_dev_features ) ; int ( * aux_attach_dev ) ( s#iommu_domain * , s#device * ) ; void ( * aux_detach_dev ) ( s#iommu_domain * , s#device * ) ; int ( * aux_get_pasid ) ( s#iommu_domain * , s#device * ) ; s#iommu_sva * ( * sva_bind ) ( s#device * , s#mm_struct * , void * ) ; void ( * sva_unbind ) ( s#iommu_sva * ) ; int ( * sva_get_pasid ) ( s#iommu_sva * ) ; int ( * page_response ) ( s#device * , s#iommu_fault_event * , s#iommu_page_response * ) ; unsigned long pgsize_bitmap ; }
s#iommu_page_response struct iommu_page_response { t#__u32 version ; t#__u32 flags ; t#__u32 pasid ; t#__u32 grpid ; t#__u32 code ; }
s#iommu_param@ac3bc360 struct iommu_param { UNKNOWN }
s#iommu_param@b3fd8593 struct iommu_param { s#mutex lock ; s#iommu_fault_param * fault_param ; }
s#iommu_resv_region struct iommu_resv_region { s#list_head list ; t#phys_addr_t start ; t#size_t length ; int prot ; e#iommu_resv_type type ; }
s#iommu_sva struct iommu_sva { s#device * dev ; const s#iommu_sva_ops * ops ; }
s#iommu_sva_ops struct iommu_sva_ops { t#iommu_mm_exit_handler_t mm_exit ; }
s#iov_iter@76413666 struct iov_iter { UNKNOWN }
s#iov_iter@b9bbae00 struct iov_iter { unsigned int type ; t#size_t iov_offset ; t#size_t count ; union { const s#iovec * iov ; const s#kvec * kvec ; const s#bio_vec * bvec ; s#pipe_inode_info * pipe ; } ; union { unsigned long nr_segs ; struct { int idx ; int start_idx ; } ; } ; }
s#iovec struct iovec { void * iov_base ; t#__kernel_size_t iov_len ; }
s#ip6_sf_list struct ip6_sf_list { s#ip6_sf_list * sf_next ; s#in6_addr sf_addr ; unsigned long sf_count [ 2 ] ; unsigned char sf_gsresp ; unsigned char sf_oldin ; unsigned char sf_crcount ; }
s#ip_conntrack_stat struct ip_conntrack_stat { unsigned int found ; unsigned int invalid ; unsigned int ignore ; unsigned int insert ; unsigned int insert_failed ; unsigned int drop ; unsigned int early_drop ; unsigned int error ; unsigned int expect_new ; unsigned int expect_create ; unsigned int expect_delete ; unsigned int search_restart ; }
s#ip_ct_sctp struct ip_ct_sctp { e#sctp_conntrack state ; t#__be32 vtag [ E#IP_CT_DIR_MAX ] ; t#u8 last_dir ; t#u8 flags ; }
s#ip_ct_tcp struct ip_ct_tcp { s#ip_ct_tcp_state seen [ 2 ] ; t#u_int8_t state ; t#u_int8_t last_dir ; t#u_int8_t retrans ; t#u_int8_t last_index ; t#u_int32_t last_seq ; t#u_int32_t last_ack ; t#u_int32_t last_end ; t#u_int16_t last_win ; t#u_int8_t last_wscale ; t#u_int8_t last_flags ; }
s#ip_ct_tcp_state struct ip_ct_tcp_state { t#u_int32_t td_end ; t#u_int32_t td_maxend ; t#u_int32_t td_maxwin ; t#u_int32_t td_maxack ; t#u_int8_t td_scale ; t#u_int8_t flags ; }
s#ip_mc_list@055d3767 struct ip_mc_list { s#in_device * interface ; t#__be32 multiaddr ; unsigned int sfmode ; s#ip_sf_list * sources ; s#ip_sf_list * tomb ; unsigned long sfcount [ 2 ] ; union { s#ip_mc_list * next ; s#ip_mc_list * next_rcu ; } ; s#ip_mc_list * next_hash ; s#timer_list timer ; int users ; t#refcount_t refcnt ; t#spinlock_t lock ; char tm_running ; char reporter ; char unsolicit_count ; char loaded ; unsigned char gsquery ; unsigned char crcount ; s#callback_head rcu ; }
s#ip_mc_list@f9cf7620 struct ip_mc_list { UNKNOWN }
s#ip_ra_chain@9f3c7244 struct ip_ra_chain { UNKNOWN }
s#ip_ra_chain@b9bbe5c8 struct ip_ra_chain { s#ip_ra_chain * next ; s#sock * sk ; union { void ( * destructor ) ( s#sock * ) ; s#sock * saved_sk ; } ; s#callback_head rcu ; }
s#ip_sf_list struct ip_sf_list { s#ip_sf_list * sf_next ; unsigned long sf_count [ 2 ] ; t#__be32 sf_inaddr ; unsigned char sf_gsresp ; unsigned char sf_oldin ; unsigned char sf_crcount ; }
s#ip_vs_app struct ip_vs_app { s#list_head a_list ; int type ; char * name ; t#__u16 protocol ; s#module * module ; s#list_head incs_list ; s#list_head p_list ; s#ip_vs_app * app ; t#__be16 port ; t#atomic_t usecnt ; s#callback_head callback_head ; int ( * pkt_out ) ( s#ip_vs_app * , s#ip_vs_conn * , s#sk_buff * , int * , s#ip_vs_iphdr * ) ; int ( * pkt_in ) ( s#ip_vs_app * , s#ip_vs_conn * , s#sk_buff * , int * , s#ip_vs_iphdr * ) ; int ( * init_conn ) ( s#ip_vs_app * , s#ip_vs_conn * ) ; int ( * done_conn ) ( s#ip_vs_app * , s#ip_vs_conn * ) ; int ( * bind_conn ) ( s#ip_vs_app * , s#ip_vs_conn * , s#ip_vs_protocol * ) ; void ( * unbind_conn ) ( s#ip_vs_app * , s#ip_vs_conn * ) ; int * timeout_table ; int * timeouts ; int timeouts_size ; int ( * conn_schedule ) ( s#sk_buff * , s#ip_vs_app * , int * , s#ip_vs_conn * * ) ; s#ip_vs_conn * ( * conn_in_get ) ( const s#sk_buff * , s#ip_vs_app * , const s#iphdr * , int ) ; s#ip_vs_conn * ( * conn_out_get ) ( const s#sk_buff * , s#ip_vs_app * , const s#iphdr * , int ) ; int ( * state_transition ) ( s#ip_vs_conn * , int , const s#sk_buff * , s#ip_vs_app * ) ; void ( * timeout_change ) ( s#ip_vs_app * , int ) ; }
s#ip_vs_conn struct ip_vs_conn { s#hlist_node c_list ; t#__be16 cport ; t#__be16 dport ; t#__be16 vport ; t#u16 af ; u#nf_inet_addr caddr ; u#nf_inet_addr vaddr ; u#nf_inet_addr daddr ; volatile t#__u32 flags ; t#__u16 protocol ; t#__u16 daf ; s#netns_ipvs * ipvs ; t#refcount_t refcnt ; s#timer_list timer ; volatile unsigned long timeout ; t#spinlock_t lock ; volatile t#__u16 state ; volatile t#__u16 old_state ; t#__u32 fwmark ; unsigned long sync_endtime ; s#ip_vs_conn * control ; t#atomic_t n_control ; s#ip_vs_dest * dest ; t#atomic_t in_pkts ; int ( * packet_xmit ) ( s#sk_buff * , s#ip_vs_conn * , s#ip_vs_protocol * , s#ip_vs_iphdr * ) ; s#ip_vs_app * app ; void * app_data ; s#ip_vs_seq in_seq ; s#ip_vs_seq out_seq ; const s#ip_vs_pe * pe ; char * pe_data ; t#__u8 pe_data_len ; s#callback_head callback_head ; }
s#ip_vs_conn_param struct ip_vs_conn_param { s#netns_ipvs * ipvs ; const u#nf_inet_addr * caddr ; const u#nf_inet_addr * vaddr ; t#__be16 cport ; t#__be16 vport ; t#__u16 protocol ; t#u16 af ; const s#ip_vs_pe * pe ; char * pe_data ; t#__u8 pe_data_len ; }
s#ip_vs_counters struct ip_vs_counters { t#__u64 conns ; t#__u64 inpkts ; t#__u64 outpkts ; t#__u64 inbytes ; t#__u64 outbytes ; }
s#ip_vs_cpu_stats struct ip_vs_cpu_stats { s#ip_vs_counters cnt ; s#u64_stats_sync syncp ; }
s#ip_vs_dest struct ip_vs_dest { s#list_head n_list ; s#hlist_node d_list ; t#u16 af ; t#__be16 port ; u#nf_inet_addr addr ; volatile unsigned int flags ; t#atomic_t conn_flags ; t#atomic_t weight ; t#atomic_t last_weight ; t#__u16 tun_type ; t#__be16 tun_port ; t#__u16 tun_flags ; t#refcount_t refcnt ; s#ip_vs_stats stats ; unsigned long idle_start ; t#atomic_t activeconns ; t#atomic_t inactconns ; t#atomic_t persistconns ; t#__u32 u_threshold ; t#__u32 l_threshold ; t#spinlock_t dst_lock ; s#ip_vs_dest_dst * dest_dst ; s#ip_vs_service * svc ; t#__u16 protocol ; t#__be16 vport ; u#nf_inet_addr vaddr ; t#__u32 vfwmark ; s#list_head t_list ; unsigned int in_rs_table : 1 ; }
s#ip_vs_dest_dst struct ip_vs_dest_dst { s#dst_entry * dst_cache ; t#u32 dst_cookie ; u#nf_inet_addr dst_saddr ; s#callback_head callback_head ; }
s#ip_vs_estimator struct ip_vs_estimator { s#list_head list ; t#u64 last_inbytes ; t#u64 last_outbytes ; t#u64 last_conns ; t#u64 last_inpkts ; t#u64 last_outpkts ; t#u64 cps ; t#u64 inpps ; t#u64 outpps ; t#u64 inbps ; t#u64 outbps ; }
s#ip_vs_iphdr struct ip_vs_iphdr { int hdr_flags ; t#__u32 off ; t#__u32 len ; t#__u16 fragoffs ; t#__s16 protocol ; t#__s32 flags ; u#nf_inet_addr saddr ; u#nf_inet_addr daddr ; }
s#ip_vs_kstats struct ip_vs_kstats { t#u64 conns ; t#u64 inpkts ; t#u64 outpkts ; t#u64 inbytes ; t#u64 outbytes ; t#u64 cps ; t#u64 inpps ; t#u64 outpps ; t#u64 inbps ; t#u64 outbps ; }
s#ip_vs_pe struct ip_vs_pe { s#list_head n_list ; char * name ; t#atomic_t refcnt ; s#module * module ; int ( * fill_param ) ( s#ip_vs_conn_param * , s#sk_buff * ) ; t#bool ( * ct_match ) ( const s#ip_vs_conn_param * , s#ip_vs_conn * ) ; t#u32 ( * hashkey_raw ) ( const s#ip_vs_conn_param * , t#u32 , t#bool ) ; int ( * show_pe_data ) ( const s#ip_vs_conn * , char * ) ; s#ip_vs_conn * ( * conn_out ) ( s#ip_vs_service * , s#ip_vs_dest * , s#sk_buff * , const s#ip_vs_iphdr * , t#__be16 , t#__be16 ) ; }
s#ip_vs_proto_data struct ip_vs_proto_data { s#ip_vs_proto_data * next ; s#ip_vs_protocol * pp ; int * timeout_table ; t#atomic_t appcnt ; s#tcp_states_t * tcp_state_table ; }
s#ip_vs_protocol struct ip_vs_protocol { s#ip_vs_protocol * next ; char * name ; t#u16 protocol ; t#u16 num_states ; int dont_defrag ; void ( * init ) ( s#ip_vs_protocol * ) ; void ( * exit ) ( s#ip_vs_protocol * ) ; int ( * init_netns ) ( s#netns_ipvs * , s#ip_vs_proto_data * ) ; void ( * exit_netns ) ( s#netns_ipvs * , s#ip_vs_proto_data * ) ; int ( * conn_schedule ) ( s#netns_ipvs * , int , s#sk_buff * , s#ip_vs_proto_data * , int * , s#ip_vs_conn * * , s#ip_vs_iphdr * ) ; s#ip_vs_conn * ( * conn_in_get ) ( s#netns_ipvs * , int , const s#sk_buff * , const s#ip_vs_iphdr * ) ; s#ip_vs_conn * ( * conn_out_get ) ( s#netns_ipvs * , int , const s#sk_buff * , const s#ip_vs_iphdr * ) ; int ( * snat_handler ) ( s#sk_buff * , s#ip_vs_protocol * , s#ip_vs_conn * , s#ip_vs_iphdr * ) ; int ( * dnat_handler ) ( s#sk_buff * , s#ip_vs_protocol * , s#ip_vs_conn * , s#ip_vs_iphdr * ) ; const char * ( * state_name ) ( int ) ; void ( * state_transition ) ( s#ip_vs_conn * , int , const s#sk_buff * , s#ip_vs_proto_data * ) ; int ( * register_app ) ( s#netns_ipvs * , s#ip_vs_app * ) ; void ( * unregister_app ) ( s#netns_ipvs * , s#ip_vs_app * ) ; int ( * app_conn_bind ) ( s#ip_vs_conn * ) ; void ( * debug_packet ) ( int , s#ip_vs_protocol * , const s#sk_buff * , int , const char * ) ; void ( * timeout_change ) ( s#ip_vs_proto_data * , int ) ; }
s#ip_vs_scheduler struct ip_vs_scheduler { s#list_head n_list ; char * name ; t#atomic_t refcnt ; s#module * module ; int ( * init_service ) ( s#ip_vs_service * ) ; void ( * done_service ) ( s#ip_vs_service * ) ; int ( * add_dest ) ( s#ip_vs_service * , s#ip_vs_dest * ) ; int ( * del_dest ) ( s#ip_vs_service * , s#ip_vs_dest * ) ; int ( * upd_dest ) ( s#ip_vs_service * , s#ip_vs_dest * ) ; s#ip_vs_dest * ( * schedule ) ( s#ip_vs_service * , const s#sk_buff * , s#ip_vs_iphdr * ) ; }
s#ip_vs_seq struct ip_vs_seq { t#__u32 init_seq ; t#__u32 delta ; t#__u32 previous_delta ; }
s#ip_vs_service struct ip_vs_service { s#hlist_node s_list ; s#hlist_node f_list ; t#atomic_t refcnt ; t#u16 af ; t#__u16 protocol ; u#nf_inet_addr addr ; t#__be16 port ; t#__u32 fwmark ; unsigned int flags ; unsigned int timeout ; t#__be32 netmask ; s#netns_ipvs * ipvs ; s#list_head destinations ; t#__u32 num_dests ; s#ip_vs_stats stats ; s#ip_vs_scheduler * scheduler ; t#spinlock_t sched_lock ; void * sched_data ; s#ip_vs_pe * pe ; int conntrack_afmask ; s#callback_head callback_head ; }
s#ip_vs_stats struct ip_vs_stats { s#ip_vs_kstats kstats ; s#ip_vs_estimator est ; s#ip_vs_cpu_stats * cpustats ; t#spinlock_t lock ; s#ip_vs_kstats kstats0 ; }
s#ip_vs_sync_buff struct ip_vs_sync_buff { UNKNOWN }
s#ip_vs_sync_thread_data struct ip_vs_sync_thread_data { UNKNOWN }
s#ipc_namespace struct ipc_namespace { UNKNOWN }
s#iphdr struct iphdr { t#__u8 ihl : 4 , version : 4 ; t#__u8 tos ; t#__be16 tot_len ; t#__be16 id ; t#__be16 frag_off ; t#__u8 ttl ; t#__u8 protocol ; t#__sum16 check ; t#__be32 saddr ; t#__be32 daddr ; }
s#ipstats_mib struct ipstats_mib { t#u64 mibs [ E#__IPSTATS_MIB_MAX ] ; s#u64_stats_sync syncp ; }
s#ipv4_devconf@565485a8 struct ipv4_devconf { void * sysctl ; int data [ ( E#__IPV4_DEVCONF_MAX - 1 ) ] ; unsigned long state [ ( ( ( ( E#__IPV4_DEVCONF_MAX - 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; }
s#ipv4_devconf@97093f25 struct ipv4_devconf { UNKNOWN }
s#ipv6_devconf@7893195b struct ipv6_devconf { UNKNOWN }
s#ipv6_devconf@894cddd6 struct ipv6_devconf { t#__s32 forwarding ; t#__s32 hop_limit ; t#__s32 mtu6 ; t#__s32 accept_ra ; t#__s32 accept_redirects ; t#__s32 autoconf ; t#__s32 dad_transmits ; t#__s32 rtr_solicits ; t#__s32 rtr_solicit_interval ; t#__s32 rtr_solicit_max_interval ; t#__s32 rtr_solicit_delay ; t#__s32 force_mld_version ; t#__s32 mldv1_unsolicited_report_interval ; t#__s32 mldv2_unsolicited_report_interval ; t#__s32 use_tempaddr ; t#__s32 temp_valid_lft ; t#__s32 temp_prefered_lft ; t#__s32 regen_max_retry ; t#__s32 max_desync_factor ; t#__s32 max_addresses ; t#__s32 accept_ra_defrtr ; t#__s32 accept_ra_min_hop_limit ; t#__s32 accept_ra_pinfo ; t#__s32 ignore_routes_with_linkdown ; t#__s32 accept_ra_rtr_pref ; t#__s32 rtr_probe_interval ; t#__s32 accept_ra_rt_info_min_plen ; t#__s32 accept_ra_rt_info_max_plen ; t#__s32 proxy_ndp ; t#__s32 accept_source_route ; t#__s32 accept_ra_from_local ; t#__s32 optimistic_dad ; t#__s32 use_optimistic ; t#__s32 mc_forwarding ; t#__s32 disable_ipv6 ; t#__s32 drop_unicast_in_l2_multicast ; t#__s32 accept_dad ; t#__s32 force_tllao ; t#__s32 ndisc_notify ; t#__s32 suppress_frag_ndisc ; t#__s32 accept_ra_mtu ; t#__s32 drop_unsolicited_na ; s#ipv6_stable_secret stable_secret ; t#__s32 use_oif_addrs_only ; t#__s32 keep_addr_on_down ; t#__s32 seg6_enabled ; t#__u32 enhanced_dad ; t#__u32 addr_gen_mode ; t#__s32 disable_policy ; t#__s32 ndisc_tclass ; s#ctl_table_header * sysctl_header ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; unsigned long uek_reserved9 ; unsigned long uek_reserved10 ; unsigned long uek_reserved11 ; unsigned long uek_reserved12 ; unsigned long uek_reserved13 ; unsigned long uek_reserved14 ; unsigned long uek_reserved15 ; unsigned long uek_reserved16 ; }
s#ipv6_devstat struct ipv6_devstat { s#proc_dir_entry * proc_dir_entry ; __typeof__ ( s#ipstats_mib ) * ipv6 ; __typeof__ ( s#icmpv6_mib_device ) * icmpv6dev ; __typeof__ ( s#icmpv6msg_mib_device ) * icmpv6msgdev ; }
s#ipv6_stable_secret struct ipv6_stable_secret { t#bool initialized ; s#in6_addr secret ; }
s#ipvs_master_sync_state struct ipvs_master_sync_state { s#list_head sync_queue ; s#ip_vs_sync_buff * sync_buff ; unsigned long sync_queue_len ; unsigned int sync_queue_delay ; s#delayed_work master_wakeup_work ; s#netns_ipvs * ipvs ; }
s#ipvs_sync_daemon_cfg struct ipvs_sync_daemon_cfg { u#nf_inet_addr mcast_group ; int syncid ; t#u16 sync_maxlen ; t#u16 mcast_port ; t#u8 mcast_af ; t#u8 mcast_ttl ; char mcast_ifn [ 16 ] ; }
s#irq_affinity@12985fe6 struct irq_affinity { UNKNOWN }
s#irq_affinity@5ea67367 struct irq_affinity { unsigned int pre_vectors ; unsigned int post_vectors ; unsigned int nr_sets ; unsigned int set_size [ 4 ] ; void ( * calc_sets ) ( s#irq_affinity * , unsigned int ) ; void * priv ; }
s#irq_affinity_desc@55f280c4 struct irq_affinity_desc { UNKNOWN }
s#irq_affinity_desc@fe1e4133 struct irq_affinity_desc { s#cpumask mask ; unsigned int is_managed : 1 ; }
s#irq_affinity_notify@2a9cac88 struct irq_affinity_notify { unsigned int irq ; s#kref kref ; s#work_struct work ; void ( * notify ) ( s#irq_affinity_notify * , const t#cpumask_t * ) ; void ( * release ) ( s#kref * ) ; }
s#irq_affinity_notify@7c091feb struct irq_affinity_notify { UNKNOWN }
s#irq_chip struct irq_chip { s#device * parent_device ; const char * name ; unsigned int ( * irq_startup ) ( s#irq_data * ) ; void ( * irq_shutdown ) ( s#irq_data * ) ; void ( * irq_enable ) ( s#irq_data * ) ; void ( * irq_disable ) ( s#irq_data * ) ; void ( * irq_ack ) ( s#irq_data * ) ; void ( * irq_mask ) ( s#irq_data * ) ; void ( * irq_mask_ack ) ( s#irq_data * ) ; void ( * irq_unmask ) ( s#irq_data * ) ; void ( * irq_eoi ) ( s#irq_data * ) ; int ( * irq_set_affinity ) ( s#irq_data * , const s#cpumask * , t#bool ) ; int ( * irq_retrigger ) ( s#irq_data * ) ; int ( * irq_set_type ) ( s#irq_data * , unsigned int ) ; int ( * irq_set_wake ) ( s#irq_data * , unsigned int ) ; void ( * irq_bus_lock ) ( s#irq_data * ) ; void ( * irq_bus_sync_unlock ) ( s#irq_data * ) ; void ( * irq_cpu_online ) ( s#irq_data * ) ; void ( * irq_cpu_offline ) ( s#irq_data * ) ; void ( * irq_suspend ) ( s#irq_data * ) ; void ( * irq_resume ) ( s#irq_data * ) ; void ( * irq_pm_shutdown ) ( s#irq_data * ) ; void ( * irq_calc_mask ) ( s#irq_data * ) ; void ( * irq_print_chip ) ( s#irq_data * , s#seq_file * ) ; int ( * irq_request_resources ) ( s#irq_data * ) ; void ( * irq_release_resources ) ( s#irq_data * ) ; void ( * irq_compose_msi_msg ) ( s#irq_data * , s#msi_msg * ) ; void ( * irq_write_msi_msg ) ( s#irq_data * , s#msi_msg * ) ; int ( * irq_get_irqchip_state ) ( s#irq_data * , e#irqchip_irq_state , t#bool * ) ; int ( * irq_set_irqchip_state ) ( s#irq_data * , e#irqchip_irq_state , t#bool ) ; int ( * irq_set_vcpu_affinity ) ( s#irq_data * , void * ) ; void ( * ipi_send_single ) ( s#irq_data * , unsigned int ) ; void ( * ipi_send_mask ) ( s#irq_data * , const s#cpumask * ) ; int ( * irq_nmi_setup ) ( s#irq_data * ) ; void ( * irq_nmi_teardown ) ( s#irq_data * ) ; unsigned long flags ; }
s#irq_chip_generic struct irq_chip_generic { t#raw_spinlock_t lock ; void * reg_base ; t#u32 ( * reg_readl ) ( void * ) ; void ( * reg_writel ) ( t#u32 , void * ) ; void ( * suspend ) ( s#irq_chip_generic * ) ; void ( * resume ) ( s#irq_chip_generic * ) ; unsigned int irq_base ; unsigned int irq_cnt ; t#u32 mask_cache ; t#u32 type_cache ; t#u32 polarity_cache ; t#u32 wake_enabled ; t#u32 wake_active ; unsigned int num_ct ; void * private ; unsigned long installed ; unsigned long unused ; s#irq_domain * domain ; s#list_head list ; s#irq_chip_type chip_types [ 0 ] ; }
s#irq_chip_regs struct irq_chip_regs { unsigned long enable ; unsigned long disable ; unsigned long mask ; unsigned long ack ; unsigned long eoi ; unsigned long type ; unsigned long polarity ; }
s#irq_chip_type struct irq_chip_type { s#irq_chip chip ; s#irq_chip_regs regs ; t#irq_flow_handler_t handler ; t#u32 type ; t#u32 mask_cache_priv ; t#u32 * mask_cache ; }
s#irq_common_data struct irq_common_data { unsigned int state_use_accessors ; unsigned int node ; void * handler_data ; s#msi_desc * msi_desc ; t#cpumask_var_t affinity ; t#cpumask_var_t effective_affinity ; }
s#irq_data@93dca921 struct irq_data { t#u32 mask ; unsigned int irq ; unsigned long hwirq ; s#irq_common_data * common ; s#irq_chip * chip ; s#irq_domain * domain ; s#irq_data * parent_data ; void * chip_data ; }
s#irq_data@d5e32130 struct irq_data { UNKNOWN }
s#irq_desc struct irq_desc { s#irq_common_data irq_common_data ; s#irq_data irq_data ; unsigned int * kstat_irqs ; t#irq_flow_handler_t handle_irq ; s#irqaction * action ; unsigned int status_use_accessors ; unsigned int core_internal_state__do_not_mess_with_it ; unsigned int depth ; unsigned int wake_depth ; unsigned int tot_count ; unsigned int irq_count ; unsigned long last_unhandled ; unsigned int irqs_unhandled ; t#atomic_t threads_handled ; int threads_handled_last ; t#raw_spinlock_t lock ; s#cpumask * percpu_enabled ; const s#cpumask * percpu_affinity ; const s#cpumask * affinity_hint ; s#irq_affinity_notify * affinity_notify ; t#cpumask_var_t pending_mask ; unsigned long threads_oneshot ; t#atomic_t threads_active ; t#wait_queue_head_t wait_for_threads ; unsigned int nr_actions ; unsigned int no_suspend_depth ; unsigned int cond_suspend_depth ; unsigned int force_resume_depth ; s#proc_dir_entry * dir ; s#dentry * debugfs_file ; const char * dev_name ; s#callback_head rcu ; s#kobject kobj ; s#mutex request_mutex ; int parent_irq ; s#module * owner ; const char * name ; }
s#irq_domain@27204fc0 struct irq_domain { UNKNOWN }
s#irq_domain@4f911733 struct irq_domain { s#list_head link ; const char * name ; const s#irq_domain_ops * ops ; void * host_data ; unsigned int flags ; unsigned int mapcount ; s#fwnode_handle * fwnode ; e#irq_domain_bus_token bus_token ; s#irq_domain_chip_generic * gc ; s#irq_domain * parent ; s#dentry * debugfs_file ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; t#irq_hw_number_t hwirq_max ; unsigned int revmap_direct_max_irq ; unsigned int revmap_size ; s#xarray revmap_tree ; s#mutex revmap_tree_mutex ; unsigned int linear_revmap [ ] ; }
s#irq_domain_chip_generic@67f6e6bd struct irq_domain_chip_generic { unsigned int irqs_per_chip ; unsigned int num_chips ; unsigned int irq_flags_to_clear ; unsigned int irq_flags_to_set ; e#irq_gc_flags gc_flags ; s#irq_chip_generic * gc [ 0 ] ; }
s#irq_domain_chip_generic@a950c4c2 struct irq_domain_chip_generic { UNKNOWN }
s#irq_domain_ops struct irq_domain_ops { int ( * match ) ( s#irq_domain * , s#device_node * , e#irq_domain_bus_token ) ; int ( * select ) ( s#irq_domain * , s#irq_fwspec * , e#irq_domain_bus_token ) ; int ( * map ) ( s#irq_domain * , unsigned int , t#irq_hw_number_t ) ; void ( * unmap ) ( s#irq_domain * , unsigned int ) ; int ( * xlate ) ( s#irq_domain * , s#device_node * , const t#u32 * , unsigned int , unsigned long * , unsigned int * ) ; int ( * alloc ) ( s#irq_domain * , unsigned int , unsigned int , void * ) ; void ( * free ) ( s#irq_domain * , unsigned int , unsigned int ) ; int ( * activate ) ( s#irq_domain * , s#irq_data * , t#bool ) ; void ( * deactivate ) ( s#irq_domain * , s#irq_data * ) ; int ( * translate ) ( s#irq_domain * , s#irq_fwspec * , unsigned long * , unsigned int * ) ; void ( * debug_show ) ( s#seq_file * , s#irq_domain * , s#irq_data * , int ) ; }
s#irq_fwspec struct irq_fwspec { s#fwnode_handle * fwnode ; int param_count ; t#u32 param [ 16 ] ; }
s#irq_work struct irq_work { unsigned long flags ; s#llist_node llnode ; void ( * func ) ( s#irq_work * ) ; }
s#irqaction@ba286ba9 struct irqaction { t#irq_handler_t handler ; void * dev_id ; void * percpu_dev_id ; s#irqaction * next ; t#irq_handler_t thread_fn ; s#task_struct * thread ; s#irqaction * secondary ; unsigned int irq ; unsigned int flags ; unsigned long thread_flags ; unsigned long thread_mask ; const char * name ; s#proc_dir_entry * dir ; }
s#irqaction@d1da71ce struct irqaction { UNKNOWN }
s#iw_discarded struct iw_discarded { t#__u32 nwid ; t#__u32 code ; t#__u32 fragment ; t#__u32 retries ; t#__u32 misc ; }
s#iw_freq struct iw_freq { t#__s32 m ; t#__s16 e ; t#__u8 i ; t#__u8 flags ; }
s#iw_handler_def@2758a185 struct iw_handler_def { const t#iw_handler * standard ; t#__u16 num_standard ; t#__u16 num_private ; t#__u16 num_private_args ; const t#iw_handler * private ; const s#iw_priv_args * private_args ; s#iw_statistics * ( * get_wireless_stats ) ( s#net_device * ) ; }
s#iw_handler_def@c89ad982 struct iw_handler_def { UNKNOWN }
s#iw_missed struct iw_missed { t#__u32 beacon ; }
s#iw_param struct iw_param { t#__s32 value ; t#__u8 fixed ; t#__u8 disabled ; t#__u16 flags ; }
s#iw_point struct iw_point { void * pointer ; t#__u16 length ; t#__u16 flags ; }
s#iw_priv_args struct iw_priv_args { t#__u32 cmd ; t#__u16 set_args ; t#__u16 get_args ; char name [ 16 ] ; }
s#iw_public_data@301f3163 struct iw_public_data { s#iw_spy_data * spy_data ; s#libipw_device * libipw ; }
s#iw_public_data@41c9989c struct iw_public_data { UNKNOWN }
s#iw_quality struct iw_quality { t#__u8 qual ; t#__u8 level ; t#__u8 noise ; t#__u8 updated ; }
s#iw_request_info struct iw_request_info { t#__u16 cmd ; t#__u16 flags ; }
s#iw_spy_data struct iw_spy_data { int spy_number ; t#u_char spy_address [ 8 ] [ 6 ] ; s#iw_quality spy_stat [ 8 ] ; s#iw_quality spy_thr_low ; s#iw_quality spy_thr_high ; t#u_char spy_thr_under [ 8 ] ; }
s#iw_statistics struct iw_statistics { t#__u16 status ; s#iw_quality qual ; s#iw_discarded discard ; s#iw_missed miss ; }
s#jump_entry struct jump_entry { t#s32 code ; t#s32 target ; long key ; }
s#k_sigaction struct k_sigaction { s#sigaction sa ; }
s#kernel_cap_struct struct kernel_cap_struct { t#__u32 cap [ 2 ] ; }
s#kernel_param struct kernel_param { const char * name ; s#module * mod ; const s#kernel_param_ops * ops ; const t#u16 perm ; t#s8 level ; t#u8 flags ; union { void * arg ; const s#kparam_string * str ; const s#kparam_array * arr ; } ; }
s#kernel_param_ops struct kernel_param_ops { unsigned int flags ; int ( * set ) ( const char * , const s#kernel_param * ) ; int ( * get ) ( char * , const s#kernel_param * ) ; void ( * free ) ( void * ) ; }
s#kernel_pkey_params@1ee022fb struct kernel_pkey_params { UNKNOWN }
s#kernel_pkey_params@96107994 struct kernel_pkey_params { s#key * key ; const char * encoding ; const char * hash_algo ; char * info ; t#__u32 in_len ; union { t#__u32 out_len ; t#__u32 in2_len ; } ; e#kernel_pkey_operation op : 8 ; }
s#kernel_pkey_query@dc358d8c struct kernel_pkey_query { t#__u32 supported_ops ; t#__u32 key_size ; t#__u16 max_data_size ; t#__u16 max_sig_size ; t#__u16 max_enc_size ; t#__u16 max_dec_size ; }
s#kernel_pkey_query@e83d355e struct kernel_pkey_query { UNKNOWN }
s#kernel_siginfo struct kernel_siginfo { struct { int si_signo ; int si_errno ; int si_code ; u#__sifields _sifields ; } ; }
s#kernel_symbol struct kernel_symbol { int value_offset ; int name_offset ; int namespace_offset ; }
s#kernfs_elem_attr struct kernfs_elem_attr { const s#kernfs_ops * ops ; s#kernfs_open_node * open ; t#loff_t size ; s#kernfs_node * notify_next ; }
s#kernfs_elem_dir struct kernfs_elem_dir { unsigned long subdirs ; s#rb_root children ; s#kernfs_root * root ; }
s#kernfs_elem_symlink struct kernfs_elem_symlink { s#kernfs_node * target_kn ; }
s#kernfs_iattrs@04e7ad1b struct kernfs_iattrs { t#kuid_t ia_uid ; t#kgid_t ia_gid ; s#timespec64 ia_atime ; s#timespec64 ia_mtime ; s#timespec64 ia_ctime ; s#simple_xattrs xattrs ; }
s#kernfs_iattrs@58e69d36 struct kernfs_iattrs { UNKNOWN }
s#kernfs_node struct kernfs_node { t#atomic_t count ; t#atomic_t active ; s#lockdep_map dep_map ; s#kernfs_node * parent ; const char * name ; s#rb_node rb ; const void * ns ; unsigned int hash ; union { s#kernfs_elem_dir dir ; s#kernfs_elem_symlink symlink ; s#kernfs_elem_attr attr ; } ; void * priv ; u#kernfs_node_id id ; unsigned short flags ; t#umode_t mode ; s#kernfs_iattrs * iattr ; }
s#kernfs_open_file struct kernfs_open_file { s#kernfs_node * kn ; s#file * file ; s#seq_file * seq_file ; void * priv ; s#mutex mutex ; s#mutex prealloc_mutex ; int event ; s#list_head list ; char * prealloc_buf ; t#size_t atomic_write_len ; t#bool mmapped : 1 ; t#bool released : 1 ; const s#vm_operations_struct * vm_ops ; }
s#kernfs_open_node struct kernfs_open_node { UNKNOWN }
s#kernfs_ops struct kernfs_ops { int ( * open ) ( s#kernfs_open_file * ) ; void ( * release ) ( s#kernfs_open_file * ) ; int ( * seq_show ) ( s#seq_file * , void * ) ; void * ( * seq_start ) ( s#seq_file * , t#loff_t * ) ; void * ( * seq_next ) ( s#seq_file * , void * , t#loff_t * ) ; void ( * seq_stop ) ( s#seq_file * , void * ) ; t#ssize_t ( * read ) ( s#kernfs_open_file * , char * , t#size_t , t#loff_t ) ; t#size_t atomic_write_len ; t#bool prealloc ; t#ssize_t ( * write ) ( s#kernfs_open_file * , char * , t#size_t , t#loff_t ) ; t#__poll_t ( * poll ) ( s#kernfs_open_file * , s#poll_table_struct * ) ; int ( * mmap ) ( s#kernfs_open_file * , s#vm_area_struct * ) ; s#lock_class_key lockdep_key ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#kernfs_root struct kernfs_root { s#kernfs_node * kn ; unsigned int flags ; s#idr ino_idr ; t#u32 last_ino ; t#u32 next_generation ; s#kernfs_syscall_ops * syscall_ops ; s#list_head supers ; t#wait_queue_head_t deactivate_waitq ; }
s#kernfs_syscall_ops struct kernfs_syscall_ops { int ( * show_options ) ( s#seq_file * , s#kernfs_root * ) ; int ( * mkdir ) ( s#kernfs_node * , const char * , t#umode_t ) ; int ( * rmdir ) ( s#kernfs_node * ) ; int ( * rename ) ( s#kernfs_node * , s#kernfs_node * , const char * ) ; int ( * show_path ) ( s#seq_file * , s#kernfs_node * , s#kernfs_root * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#key@3d33306b struct key { UNKNOWN }
s#key@bd80406c struct key { t#refcount_t usage ; t#key_serial_t serial ; union { s#list_head graveyard_link ; s#rb_node serial_node ; } ; s#rw_semaphore sem ; s#key_user * user ; void * security ; union { t#time64_t expiry ; t#time64_t revoked_at ; } ; t#time64_t last_used_at ; t#kuid_t uid ; t#kgid_t gid ; t#key_perm_t perm ; unsigned short quotalen ; unsigned short datalen ; short state ; unsigned long flags ; union { s#keyring_index_key index_key ; struct { unsigned long hash ; unsigned long len_desc ; s#key_type * type ; s#key_tag * domain_tag ; char * description ; } ; } ; union { u#key_payload payload ; struct { s#list_head name_link ; s#assoc_array keys ; } ; } ; s#key_restriction * restrict_link ; }
s#key_match_data struct key_match_data { t#bool ( * cmp ) ( const s#key * , const s#key_match_data * ) ; const void * raw_data ; void * preparsed ; unsigned lookup_type ; }
s#key_params struct key_params { const t#u8 * key ; const t#u8 * seq ; int key_len ; int seq_len ; t#u32 cipher ; e#nl80211_key_mode mode ; }
s#key_preparsed_payload struct key_preparsed_payload { char * description ; u#key_payload payload ; const void * data ; t#size_t datalen ; t#size_t quotalen ; t#time64_t expiry ; }
s#key_restriction struct key_restriction { t#key_restrict_link_func_t check ; s#key * key ; s#key_type * keytype ; }
s#key_tag struct key_tag { s#callback_head rcu ; t#refcount_t usage ; t#bool removed ; }
s#key_type@856c83c0 struct key_type { UNKNOWN }
s#key_type@d979dd54 struct key_type { const char * name ; t#size_t def_datalen ; unsigned int flags ; int ( * vet_description ) ( const char * ) ; int ( * preparse ) ( s#key_preparsed_payload * ) ; void ( * free_preparse ) ( s#key_preparsed_payload * ) ; int ( * instantiate ) ( s#key * , s#key_preparsed_payload * ) ; int ( * update ) ( s#key * , s#key_preparsed_payload * ) ; int ( * match_preparse ) ( s#key_match_data * ) ; void ( * match_free ) ( s#key_match_data * ) ; void ( * revoke ) ( s#key * ) ; void ( * destroy ) ( s#key * ) ; void ( * describe ) ( const s#key * , s#seq_file * ) ; long ( * read ) ( const s#key * , char * , t#size_t ) ; t#request_key_actor_t request_key ; s#key_restriction * ( * lookup_restriction ) ( const char * ) ; int ( * asym_query ) ( const s#kernel_pkey_params * , s#kernel_pkey_query * ) ; int ( * asym_eds_op ) ( s#kernel_pkey_params * , const void * , void * ) ; int ( * asym_verify_signature ) ( s#kernel_pkey_params * , const void * , const void * ) ; s#list_head link ; s#lock_class_key lock_class ; }
s#key_user@35e5d8d6 struct key_user { UNKNOWN }
s#key_user@ce2adfb1 struct key_user { s#rb_node node ; s#mutex cons_lock ; t#spinlock_t lock ; t#refcount_t usage ; t#atomic_t nkeys ; t#atomic_t nikeys ; t#kuid_t uid ; int qnkeys ; int qnbytes ; }
s#keyring_index_key struct keyring_index_key { unsigned long hash ; union { struct { t#u16 desc_len ; char desc [ sizeof ( long ) - 2 ] ; } ; unsigned long x ; } ; s#key_type * type ; s#key_tag * domain_tag ; const char * description ; }
s#kiocb struct kiocb { s#file * ki_filp ; t#loff_t ki_pos ; void ( * ki_complete ) ( s#kiocb * , long , long ) ; void * private ; int ki_flags ; t#u16 ki_hint ; t#u16 ki_ioprio ; unsigned int ki_cookie ; }
s#kioctx_table struct kioctx_table { UNKNOWN }
s#klist struct klist { t#spinlock_t k_lock ; s#list_head k_list ; void ( * get ) ( s#klist_node * ) ; void ( * put ) ( s#klist_node * ) ; }
s#klist_node struct klist_node { void * n_klist ; s#list_head n_node ; s#kref n_ref ; }
s#kmem_cache@b98becec struct kmem_cache { s#kmem_cache_cpu * cpu_slab ; t#slab_flags_t flags ; unsigned long min_partial ; unsigned int size ; unsigned int object_size ; unsigned int offset ; unsigned int cpu_partial ; s#kmem_cache_order_objects oo ; s#kmem_cache_order_objects max ; s#kmem_cache_order_objects min ; t#gfp_t allocflags ; int refcount ; void ( * ctor ) ( void * ) ; unsigned int inuse ; unsigned int align ; unsigned int red_left_pad ; const char * name ; s#list_head list ; s#kobject kobj ; s#work_struct kobj_remove_work ; s#memcg_cache_params memcg_params ; unsigned int max_attr_size ; s#kset * memcg_kset ; unsigned long random ; unsigned int remote_node_defrag_ratio ; unsigned int * random_seq ; unsigned int useroffset ; unsigned int usersize ; s#kmem_cache_node * node [ ( 1 << 10 ) ] ; }
s#kmem_cache@bb73f614 struct kmem_cache { UNKNOWN }
s#kmem_cache_cpu struct kmem_cache_cpu { void * * freelist ; unsigned long tid ; s#page * page ; s#page * partial ; unsigned stat [ E#NR_SLUB_STAT_ITEMS ] ; }
s#kmem_cache_node struct kmem_cache_node { t#spinlock_t list_lock ; unsigned long nr_partial ; s#list_head partial ; t#atomic_long_t nr_slabs ; t#atomic_long_t total_objects ; s#list_head full ; }
s#kmem_cache_order_objects struct kmem_cache_order_objects { unsigned int x ; }
s#kobj_ns_type_operations struct kobj_ns_type_operations { e#kobj_ns_type type ; t#bool ( * current_may_mount ) ( void ) ; void * ( * grab_current_ns ) ( void ) ; const void * ( * netlink_ns ) ( s#sock * ) ; const void * ( * initial_ns ) ( void ) ; void ( * drop_ns ) ( void * ) ; }
s#kobj_type struct kobj_type { void ( * release ) ( s#kobject * ) ; const s#sysfs_ops * sysfs_ops ; s#attribute * * default_attrs ; const s#attribute_group * * default_groups ; const s#kobj_ns_type_operations * ( * child_ns_type ) ( s#kobject * ) ; const void * ( * namespace ) ( s#kobject * ) ; void ( * get_ownership ) ( s#kobject * , t#kuid_t * , t#kgid_t * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#kobj_uevent_env struct kobj_uevent_env { char * argv [ 3 ] ; char * envp [ 32 ] ; int envp_idx ; char buf [ 2048 ] ; int buflen ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#kobject@bfa79cfb struct kobject { const char * name ; s#list_head entry ; s#kobject * parent ; s#kset * kset ; s#kobj_type * ktype ; s#kernfs_node * sd ; s#kref kref ; unsigned int state_initialized : 1 ; unsigned int state_in_sysfs : 1 ; unsigned int state_add_uevent_sent : 1 ; unsigned int state_remove_uevent_sent : 1 ; unsigned int uevent_suppress : 1 ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#kobject@e7f858ef struct kobject { UNKNOWN }
s#kparam_array struct kparam_array { unsigned int max ; unsigned int elemsize ; unsigned int * num ; const s#kernel_param_ops * ops ; void * elem ; }
s#kparam_string struct kparam_string { unsigned int maxlen ; char * string ; }
s#kqid struct kqid { union { t#kuid_t uid ; t#kgid_t gid ; t#kprojid_t projid ; } ; e#quota_type type ; }
s#kref struct kref { t#refcount_t refcount ; }
s#kset struct kset { s#list_head list ; t#spinlock_t list_lock ; s#kobject kobj ; const s#kset_uevent_ops * uevent_ops ; }
s#kset_uevent_ops struct kset_uevent_ops { int ( * const filter ) ( s#kset * , s#kobject * ) ; const char * ( * const name ) ( s#kset * , s#kobject * ) ; int ( * const uevent ) ( s#kset * , s#kobject * , s#kobj_uevent_env * ) ; }
s#kstat struct kstat { t#u32 result_mask ; t#umode_t mode ; unsigned int nlink ; t#uint32_t blksize ; t#u64 attributes ; t#u64 attributes_mask ; t#u64 ino ; t#dev_t dev ; t#dev_t rdev ; t#kuid_t uid ; t#kgid_t gid ; t#loff_t size ; s#timespec64 atime ; s#timespec64 mtime ; s#timespec64 ctime ; s#timespec64 btime ; t#u64 blocks ; }
s#kstatfs@195c0481 struct kstatfs { UNKNOWN }
s#kstatfs@3663e9fd struct kstatfs { long f_type ; long f_bsize ; t#u64 f_blocks ; t#u64 f_bfree ; t#u64 f_bavail ; t#u64 f_files ; t#u64 f_ffree ; t#__kernel_fsid_t f_fsid ; long f_namelen ; long f_frsize ; long f_flags ; long f_spare [ 4 ] ; }
s#ktermios struct ktermios { t#tcflag_t c_iflag ; t#tcflag_t c_oflag ; t#tcflag_t c_cflag ; t#tcflag_t c_lflag ; t#cc_t c_line ; t#cc_t c_cc [ 19 ] ; t#speed_t c_ispeed ; t#speed_t c_ospeed ; }
s#kthread_delayed_work struct kthread_delayed_work { s#kthread_work work ; s#timer_list timer ; }
s#kthread_work struct kthread_work { s#list_head node ; t#kthread_work_func_t func ; s#kthread_worker * worker ; int canceling ; }
s#kthread_worker struct kthread_worker { unsigned int flags ; t#raw_spinlock_t lock ; s#list_head work_list ; s#list_head delayed_work_list ; s#task_struct * task ; s#kthread_work * current_work ; }
s#kvec struct kvec { void * iov_base ; t#size_t iov_len ; }
s#l3mdev_ops@705e73d8 struct l3mdev_ops { t#u32 ( * l3mdev_fib_table ) ( const s#net_device * ) ; s#sk_buff * ( * l3mdev_l3_rcv ) ( s#net_device * , s#sk_buff * , t#u16 ) ; s#sk_buff * ( * l3mdev_l3_out ) ( s#net_device * , s#sock * , s#sk_buff * , t#u16 ) ; s#dst_entry * ( * l3mdev_link_scope_lookup ) ( const s#net_device * , s#flowi6 * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; }
s#l3mdev_ops@957f97dc struct l3mdev_ops { UNKNOWN }
s#latch_tree_node struct latch_tree_node { s#rb_node node [ 2 ] ; }
s#latency_record struct latency_record { unsigned long backtrace [ 12 ] ; unsigned int count ; unsigned long time ; unsigned long max ; }
s#ld_semaphore struct ld_semaphore { t#atomic_long_t count ; t#raw_spinlock_t wait_lock ; unsigned int wait_readers ; s#list_head read_wait ; s#list_head write_wait ; s#lockdep_map dep_map ; }
s#ldt_struct@408584e6 struct ldt_struct { UNKNOWN }
s#ldt_struct@b304f10d struct ldt_struct { s#desc_struct * entries ; unsigned int nr_entries ; int slot ; }
s#led_classdev struct led_classdev { const char * name ; e#led_brightness brightness ; e#led_brightness max_brightness ; int flags ; unsigned long work_flags ; void ( * brightness_set ) ( s#led_classdev * , e#led_brightness ) ; int ( * brightness_set_blocking ) ( s#led_classdev * , e#led_brightness ) ; e#led_brightness ( * brightness_get ) ( s#led_classdev * ) ; int ( * blink_set ) ( s#led_classdev * , unsigned long * , unsigned long * ) ; int ( * pattern_set ) ( s#led_classdev * , s#led_pattern * , t#u32 , int ) ; int ( * pattern_clear ) ( s#led_classdev * ) ; s#device * dev ; const s#attribute_group * * groups ; s#list_head node ; const char * default_trigger ; unsigned long blink_delay_on , blink_delay_off ; s#timer_list blink_timer ; int blink_brightness ; int new_blink_brightness ; void ( * flash_resume ) ( s#led_classdev * ) ; s#work_struct set_brightness_work ; int delayed_set_value ; s#rw_semaphore trigger_lock ; s#led_trigger * trigger ; s#list_head trig_list ; void * trigger_data ; t#bool activated ; s#mutex led_access ; }
s#led_pattern struct led_pattern { t#u32 delta_t ; int brightness ; }
s#led_trigger@40e385d6 struct led_trigger { const char * name ; int ( * activate ) ( s#led_classdev * ) ; void ( * deactivate ) ( s#led_classdev * ) ; t#rwlock_t leddev_list_lock ; s#list_head led_cdevs ; s#list_head next_trig ; const s#attribute_group * * groups ; }
s#led_trigger@44943f2b struct led_trigger { UNKNOWN }
s#lib80211_crypt_data struct lib80211_crypt_data { s#list_head list ; s#lib80211_crypto_ops * ops ; void * priv ; t#atomic_t refcnt ; }
s#lib80211_crypt_info struct lib80211_crypt_info { char * name ; t#spinlock_t * lock ; s#lib80211_crypt_data * crypt [ 4 ] ; int tx_keyidx ; s#list_head crypt_deinit_list ; s#timer_list crypt_deinit_timer ; int crypt_quiesced ; }
s#lib80211_crypto_ops struct lib80211_crypto_ops { const char * name ; s#list_head list ; void * ( * init ) ( int ) ; void ( * deinit ) ( void * ) ; int ( * encrypt_mpdu ) ( s#sk_buff * , int , void * ) ; int ( * decrypt_mpdu ) ( s#sk_buff * , int , void * ) ; int ( * encrypt_msdu ) ( s#sk_buff * , int , void * ) ; int ( * decrypt_msdu ) ( s#sk_buff * , int , int , void * ) ; int ( * set_key ) ( void * , int , t#u8 * , void * ) ; int ( * get_key ) ( void * , int , t#u8 * , void * ) ; void ( * print_stats ) ( s#seq_file * , void * ) ; unsigned long ( * get_flags ) ( void * ) ; unsigned long ( * set_flags ) ( unsigned long , void * ) ; int extra_mpdu_prefix_len , extra_mpdu_postfix_len ; int extra_msdu_prefix_len , extra_msdu_postfix_len ; s#module * owner ; }
s#libipw_action struct libipw_action { s#libipw_hdr_3addr header ; t#u8 category ; t#u8 action ; union { s#libipw_action_exchange exchange ; s#libipw_channel_switch channel_switch ; } format ; }
s#libipw_action_exchange struct libipw_action_exchange { t#u8 token ; s#libipw_info_element info_element [ 0 ] ; }
s#libipw_assoc_response struct libipw_assoc_response { s#libipw_hdr_3addr header ; t#__le16 capability ; t#__le16 status ; t#__le16 aid ; s#libipw_info_element info_element [ 0 ] ; }
s#libipw_auth struct libipw_auth { s#libipw_hdr_3addr header ; t#__le16 algorithm ; t#__le16 transaction ; t#__le16 status ; s#libipw_info_element info_element [ 0 ] ; }
s#libipw_channel struct libipw_channel { t#u32 freq ; t#u8 channel ; t#u8 flags ; t#u8 max_power ; }
s#libipw_channel_switch struct libipw_channel_switch { t#u8 id ; t#u8 len ; t#u8 mode ; t#u8 channel ; t#u8 count ; }
s#libipw_csa struct libipw_csa { t#u8 mode ; t#u8 channel ; t#u8 count ; }
s#libipw_device@70ed142f struct libipw_device { UNKNOWN }
s#libipw_device@e067e9ac struct libipw_device { s#net_device * dev ; s#wireless_dev wdev ; s#libipw_security sec ; s#libipw_stats ieee_stats ; s#libipw_geo geo ; s#ieee80211_supported_band bg_band ; s#ieee80211_supported_band a_band ; s#list_head network_free_list ; s#list_head network_list ; s#libipw_network * networks [ 128 ] ; int scans ; int scan_age ; int iw_mode ; s#iw_spy_data spy_data ; t#spinlock_t lock ; int tx_headroom ; t#u32 config ; int open_wep ; int host_encrypt ; int host_encrypt_msdu ; int host_decrypt ; int host_mc_decrypt ; int host_strip_iv_icv ; int host_open_frag ; int ieee802_1x ; int wpa_enabled ; int drop_unencrypted ; int privacy_invoked ; t#size_t wpa_ie_len ; t#u8 * wpa_ie ; s#lib80211_crypt_info crypt_info ; int bcrx_sta_key ; s#libipw_frag_entry frag_cache [ 4 ] ; unsigned int frag_next_idx ; t#u16 fts ; t#u16 rts ; t#u8 bssid [ 6 ] ; e#libipw_state state ; int mode ; int modulation ; int freq_band ; int abg_true ; int perfect_rssi ; int worst_rssi ; t#u16 prev_seq_ctl ; void ( * set_security ) ( s#net_device * , s#libipw_security * ) ; t#netdev_tx_t ( * hard_start_xmit ) ( s#libipw_txb * , s#net_device * , int ) ; int ( * is_queue_full ) ( s#net_device * , int ) ; int ( * handle_management ) ( s#net_device * , s#libipw_network * , t#u16 ) ; int ( * is_qos_active ) ( s#net_device * , s#sk_buff * ) ; int ( * handle_auth ) ( s#net_device * , s#libipw_auth * ) ; int ( * handle_deauth ) ( s#net_device * , s#libipw_disassoc * ) ; int ( * handle_action ) ( s#net_device * , s#libipw_action * , s#libipw_rx_stats * ) ; int ( * handle_disassoc ) ( s#net_device * , s#libipw_disassoc * ) ; int ( * handle_beacon ) ( s#net_device * , s#libipw_probe_response * , s#libipw_network * ) ; int ( * handle_probe_response ) ( s#net_device * , s#libipw_probe_response * , s#libipw_network * ) ; int ( * handle_probe_request ) ( s#net_device * , s#libipw_probe_request * , s#libipw_rx_stats * ) ; int ( * handle_assoc_response ) ( s#net_device * , s#libipw_assoc_response * , s#libipw_network * ) ; int ( * handle_assoc_request ) ( s#net_device * ) ; int ( * handle_reassoc_request ) ( s#net_device * , s#libipw_reassoc_request * ) ; t#u8 priv [ 0 ] ; }
s#libipw_disassoc struct libipw_disassoc { s#libipw_hdr_3addr header ; t#__le16 reason ; }
s#libipw_frag_entry struct libipw_frag_entry { unsigned long first_frag_time ; unsigned int seq ; unsigned int last_frag ; s#sk_buff * skb ; t#u8 src_addr [ 6 ] ; t#u8 dst_addr [ 6 ] ; }
s#libipw_geo struct libipw_geo { t#u8 name [ 4 ] ; t#u8 bg_channels ; t#u8 a_channels ; s#libipw_channel bg [ ( 14 - 1 + 1 ) ] ; s#libipw_channel a [ ( 165 - 34 + 1 ) ] ; }
s#libipw_hdr_3addr struct libipw_hdr_3addr { t#__le16 frame_ctl ; t#__le16 duration_id ; t#u8 addr1 [ 6 ] ; t#u8 addr2 [ 6 ] ; t#u8 addr3 [ 6 ] ; t#__le16 seq_ctl ; t#u8 payload [ 0 ] ; }
s#libipw_info_element struct libipw_info_element { t#u8 id ; t#u8 len ; t#u8 data [ 0 ] ; }
s#libipw_network struct libipw_network { t#u8 bssid [ 6 ] ; t#u8 channel ; t#u8 ssid [ 32 + 1 ] ; t#u8 ssid_len ; s#libipw_qos_data qos_data ; s#libipw_rx_stats stats ; t#u16 capability ; t#u8 rates [ ( ( u8 ) 12 ) ] ; t#u8 rates_len ; t#u8 rates_ex [ ( ( u8 ) 16 ) ] ; t#u8 rates_ex_len ; unsigned long last_scanned ; t#u8 mode ; t#u32 flags ; t#u32 last_associate ; t#u32 time_stamp [ 2 ] ; t#u16 beacon_interval ; t#u16 listen_interval ; t#u16 atim_window ; t#u8 erp_value ; t#u8 wpa_ie [ 64 ] ; t#size_t wpa_ie_len ; t#u8 rsn_ie [ 64 ] ; t#size_t rsn_ie_len ; s#libipw_tim_parameters tim ; t#u8 power_constraint ; s#libipw_tpc_report tpc_report ; s#libipw_csa csa ; s#libipw_quiet quiet ; s#list_head list ; }
s#libipw_probe_request struct libipw_probe_request { s#libipw_hdr_3addr header ; s#libipw_info_element info_element [ 0 ] ; }
s#libipw_probe_response struct libipw_probe_response { s#libipw_hdr_3addr header ; t#__le32 time_stamp [ 2 ] ; t#__le16 beacon_interval ; t#__le16 capability ; s#libipw_info_element info_element [ 0 ] ; }
s#libipw_qos_data struct libipw_qos_data { s#libipw_qos_parameters parameters ; int active ; int supported ; t#u8 param_count ; t#u8 old_param_count ; }
s#libipw_qos_parameters struct libipw_qos_parameters { t#__le16 cw_min [ 4 ] ; t#__le16 cw_max [ 4 ] ; t#u8 aifs [ 4 ] ; t#u8 flag [ 4 ] ; t#__le16 tx_op_limit [ 4 ] ; }
s#libipw_quiet struct libipw_quiet { t#u8 count ; t#u8 period ; t#u8 duration ; t#u8 offset ; }
s#libipw_reassoc_request struct libipw_reassoc_request { s#libipw_hdr_3addr header ; t#__le16 capability ; t#__le16 listen_interval ; t#u8 current_ap [ 6 ] ; s#libipw_info_element info_element [ 0 ] ; }
s#libipw_rx_stats struct libipw_rx_stats { t#u32 mac_time ; t#s8 rssi ; t#u8 signal ; t#u8 noise ; t#u16 rate ; t#u8 received_channel ; t#u8 control ; t#u8 mask ; t#u8 freq ; t#u16 len ; t#u64 tsf ; t#u32 beacon_time ; }
s#libipw_security struct libipw_security { t#u16 active_key : 2 , enabled : 1 , unicast_uses_group : 1 , encrypt : 1 ; t#u8 auth_mode ; t#u8 encode_alg [ 4 ] ; t#u8 key_sizes [ 4 ] ; t#u8 keys [ 4 ] [ 32 ] ; t#u8 level ; t#u16 flags ; }
s#libipw_stats struct libipw_stats { unsigned int tx_unicast_frames ; unsigned int tx_multicast_frames ; unsigned int tx_fragments ; unsigned int tx_unicast_octets ; unsigned int tx_multicast_octets ; unsigned int tx_deferred_transmissions ; unsigned int tx_single_retry_frames ; unsigned int tx_multiple_retry_frames ; unsigned int tx_retry_limit_exceeded ; unsigned int tx_discards ; unsigned int rx_unicast_frames ; unsigned int rx_multicast_frames ; unsigned int rx_fragments ; unsigned int rx_unicast_octets ; unsigned int rx_multicast_octets ; unsigned int rx_fcs_errors ; unsigned int rx_discards_no_buffer ; unsigned int tx_discards_wrong_sa ; unsigned int rx_discards_undecryptable ; unsigned int rx_message_in_msg_fragments ; unsigned int rx_message_in_bad_msg_fragments ; }
s#libipw_tim_parameters struct libipw_tim_parameters { t#u8 tim_count ; t#u8 tim_period ; }
s#libipw_tpc_report struct libipw_tpc_report { t#u8 transmit_power ; t#u8 link_margin ; }
s#libipw_txb struct libipw_txb { t#u8 nr_frags ; t#u8 encrypted ; t#u8 rts_included ; t#u8 reserved ; t#u16 frag_size ; t#u16 payload_size ; s#sk_buff * fragments [ 0 ] ; }
s#linux_binfmt@aef01ecd struct linux_binfmt { UNKNOWN }
s#linux_binfmt@c068fab7 struct linux_binfmt { s#list_head lh ; s#module * module ; int ( * load_binary ) ( s#linux_binprm * ) ; int ( * load_shlib ) ( s#file * ) ; int ( * core_dump ) ( s#coredump_params * ) ; unsigned long min_coredump ; }
s#linux_binprm struct linux_binprm { s#vm_area_struct * vma ; unsigned long vma_pages ; s#mm_struct * mm ; unsigned long p ; unsigned long argmin ; unsigned int called_set_creds : 1 , cap_elevated : 1 , secureexec : 1 ; unsigned int recursion_depth ; s#file * file ; s#cred * cred ; int unsafe ; unsigned int per_clear ; int argc , envc ; const char * filename ; const char * interp ; unsigned interp_flags ; unsigned interp_data ; unsigned long loader , exec ; s#rlimit rlim_stack ; char buf [ 256 ] ; }
s#linux_mib struct linux_mib { unsigned long mibs [ E#__LINUX_MIB_MAX ] ; }
s#linux_xfrm_mib struct linux_xfrm_mib { unsigned long mibs [ E#__LINUX_MIB_XFRMMAX ] ; }
s#list_head struct list_head { s#list_head * next , * prev ; }
s#list_lru struct list_lru { s#list_lru_node * node ; s#list_head list ; int shrinker_id ; t#bool memcg_aware ; }
s#list_lru_memcg struct list_lru_memcg { s#callback_head rcu ; s#list_lru_one * lru [ 0 ] ; }
s#list_lru_node struct list_lru_node { t#spinlock_t lock ; s#list_lru_one lru ; s#list_lru_memcg * memcg_lrus ; long nr_items ; }
s#list_lru_one struct list_lru_one { s#list_head list ; long nr_items ; }
s#llist_head struct llist_head { s#llist_node * first ; }
s#llist_node struct llist_node { s#llist_node * next ; }
s#load_weight struct load_weight { unsigned long weight ; t#u32 inv_weight ; }
s#local_ports struct local_ports { t#seqlock_t lock ; int range [ 2 ] ; t#bool warned ; }
s#lock_class struct lock_class { s#hlist_node hash_entry ; s#list_head lock_entry ; s#list_head locks_after , locks_before ; const s#lockdep_subclass_key * key ; unsigned int subclass ; unsigned int dep_gen_id ; unsigned long usage_mask ; const s#lock_trace * usage_traces [ ( 1 + 2 * 4 ) ] ; int name_version ; const char * name ; unsigned long contention_point [ 4 ] ; unsigned long contending_point [ 4 ] ; }
s#lock_class_key struct lock_class_key { union { s#hlist_node hash_entry ; s#lockdep_subclass_key subkeys [ 8UL ] ; } ; }
s#lock_manager_operations struct lock_manager_operations { t#fl_owner_t ( * lm_get_owner ) ( t#fl_owner_t ) ; void ( * lm_put_owner ) ( t#fl_owner_t ) ; void ( * lm_notify ) ( s#file_lock * ) ; int ( * lm_grant ) ( s#file_lock * , int ) ; t#bool ( * lm_break ) ( s#file_lock * ) ; int ( * lm_change ) ( s#file_lock * , int , s#list_head * ) ; void ( * lm_setup ) ( s#file_lock * , void * * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#lock_trace struct lock_trace { UNKNOWN }
s#lockdep_map struct lockdep_map { s#lock_class_key * key ; s#lock_class * class_cache [ 2 ] ; const char * name ; int cpu ; unsigned long ip ; }
s#lockdep_subclass_key struct lockdep_subclass_key { char __one_byte ; }
s#lockref struct lockref { union { struct { t#spinlock_t lock ; int count ; } ; } ; }
s#lruvec struct lruvec { s#list_head lists [ E#NR_LRU_LISTS ] ; s#zone_reclaim_stat reclaim_stat ; t#atomic_long_t inactive_age ; unsigned long refaults ; s#pglist_data * pgdat ; }
s#lruvec_stat struct lruvec_stat { long count [ E#NR_VM_NODE_STAT_ITEMS ] ; }
s#lwtunnel_state@6ca8743b struct lwtunnel_state { t#__u16 type ; t#__u16 flags ; t#__u16 headroom ; t#atomic_t refcnt ; int ( * orig_output ) ( s#net * , s#sock * , s#sk_buff * ) ; int ( * orig_input ) ( s#sk_buff * ) ; s#callback_head rcu ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; t#__u8 data [ 0 ] ; }
s#lwtunnel_state@c2751f5a struct lwtunnel_state { UNKNOWN }
s#mac_address struct mac_address { t#u8 addr [ 6 ] ; }
s#match_token struct match_token { int token ; const char * pattern ; }
s#math_emu_info struct math_emu_info { long ___orig_eip ; s#pt_regs * regs ; }
s#mdio_device struct mdio_device { s#device dev ; s#mii_bus * bus ; char modalias [ 32 ] ; int ( * bus_match ) ( s#device * , s#device_driver * ) ; void ( * device_free ) ( s#mdio_device * ) ; void ( * device_remove ) ( s#mdio_device * ) ; int addr ; int flags ; s#gpio_desc * reset_gpio ; s#reset_control * reset_ctrl ; unsigned int reset_assert_delay ; unsigned int reset_deassert_delay ; }
s#mdio_driver_common struct mdio_driver_common { s#device_driver driver ; int flags ; }
s#mem_cgroup@3b7d487b struct mem_cgroup { UNKNOWN }
s#mem_cgroup@404c556b struct mem_cgroup { s#cgroup_subsys_state css ; s#mem_cgroup_id id ; s#page_counter memory ; s#page_counter swap ; s#page_counter memsw ; s#page_counter kmem ; s#page_counter tcpmem ; unsigned long high ; s#work_struct high_work ; unsigned long soft_limit ; s#vmpressure vmpressure ; t#bool use_hierarchy ; t#bool oom_group ; t#bool oom_lock ; int under_oom ; int swappiness ; int oom_kill_disable ; s#cgroup_file events_file ; s#cgroup_file events_local_file ; s#cgroup_file swap_events_file ; s#mutex thresholds_lock ; s#mem_cgroup_thresholds thresholds ; s#mem_cgroup_thresholds memsw_thresholds ; s#list_head oom_notify ; unsigned long move_charge_at_immigrate ; t#spinlock_t move_lock ; unsigned long move_lock_flags ; s#memcg_padding _pad1_ ; ; t#atomic_t moving_account ; s#task_struct * move_lock_task ; s#memcg_vmstats_percpu * vmstats_local ; s#memcg_vmstats_percpu * vmstats_percpu ; s#memcg_padding _pad2_ ; ; t#atomic_long_t vmstats [ E#MEMCG_NR_STAT ] ; t#atomic_long_t vmevents [ E#NR_VM_EVENT_ITEMS ] ; t#atomic_long_t memory_events [ E#MEMCG_NR_MEMORY_EVENTS ] ; t#atomic_long_t memory_events_local [ E#MEMCG_NR_MEMORY_EVENTS ] ; unsigned long socket_pressure ; t#bool tcpmem_active ; int tcpmem_pressure ; int kmemcg_id ; e#memcg_kmem_state kmem_state ; s#list_head kmem_caches ; int last_scanned_node ; t#nodemask_t scan_nodes ; t#atomic_t numainfo_events ; t#atomic_t numainfo_updating ; s#list_head cgwb_list ; s#wb_domain cgwb_domain ; s#memcg_cgwb_frn cgwb_frn [ 4 ] ; s#list_head event_list ; t#spinlock_t event_list_lock ; s#deferred_split deferred_split_queue ; s#mem_cgroup_per_node * nodeinfo [ 0 ] ; }
s#mem_cgroup_id struct mem_cgroup_id { int id ; t#refcount_t ref ; }
s#mem_cgroup_per_node struct mem_cgroup_per_node { s#lruvec lruvec ; s#lruvec_stat * lruvec_stat_local ; s#lruvec_stat * lruvec_stat_cpu ; t#atomic_long_t lruvec_stat [ E#NR_VM_NODE_STAT_ITEMS ] ; unsigned long lru_zone_size [ 5 ] [ E#NR_LRU_LISTS ] ; s#mem_cgroup_reclaim_iter iter [ 12 + 1 ] ; s#memcg_shrinker_map * shrinker_map ; s#rb_node tree_node ; unsigned long usage_in_excess ; t#bool on_tree ; t#bool congested ; s#mem_cgroup * memcg ; }
s#mem_cgroup_reclaim_iter struct mem_cgroup_reclaim_iter { s#mem_cgroup * position ; unsigned int generation ; }
s#mem_cgroup_threshold struct mem_cgroup_threshold { s#eventfd_ctx * eventfd ; unsigned long threshold ; }
s#mem_cgroup_threshold_ary struct mem_cgroup_threshold_ary { int current_threshold ; unsigned int size ; s#mem_cgroup_threshold entries [ 0 ] ; }
s#mem_cgroup_thresholds struct mem_cgroup_thresholds { s#mem_cgroup_threshold_ary * primary ; s#mem_cgroup_threshold_ary * spare ; }
s#mem_dqblk struct mem_dqblk { t#qsize_t dqb_bhardlimit ; t#qsize_t dqb_bsoftlimit ; t#qsize_t dqb_curspace ; t#qsize_t dqb_rsvspace ; t#qsize_t dqb_ihardlimit ; t#qsize_t dqb_isoftlimit ; t#qsize_t dqb_curinodes ; t#time64_t dqb_btime ; t#time64_t dqb_itime ; }
s#mem_dqinfo struct mem_dqinfo { s#quota_format_type * dqi_format ; int dqi_fmt_id ; s#list_head dqi_dirty_list ; unsigned long dqi_flags ; unsigned int dqi_bgrace ; unsigned int dqi_igrace ; t#qsize_t dqi_max_spc_limit ; t#qsize_t dqi_max_ino_limit ; void * dqi_priv ; }
s#mem_section struct mem_section { unsigned long section_mem_map ; s#mem_section_usage * usage ; s#page_ext * page_ext ; unsigned long pad ; }
s#mem_section_usage struct mem_section_usage { unsigned long subsection_map [ ( ( ( ( 1UL << ( 27 - 21 ) ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long pageblock_flags [ 0 ] ; }
s#memcg_cache_array struct memcg_cache_array { s#callback_head rcu ; s#kmem_cache * entries [ 0 ] ; }
s#memcg_cache_params struct memcg_cache_params { s#kmem_cache * root_cache ; union { struct { s#memcg_cache_array * memcg_caches ; s#list_head __root_caches_node ; s#list_head children ; t#bool dying ; } ; struct { s#mem_cgroup * memcg ; s#list_head children_node ; s#list_head kmem_caches_node ; s#percpu_ref refcnt ; void ( * work_fn ) ( s#kmem_cache * ) ; union { s#callback_head callback_head ; s#work_struct work ; } ; } ; } ; }
s#memcg_cgwb_frn struct memcg_cgwb_frn { t#u64 bdi_id ; int memcg_id ; t#u64 at ; s#wb_completion done ; }
s#memcg_padding struct memcg_padding { char x [ 0 ] ; }
s#memcg_shrinker_map struct memcg_shrinker_map { s#callback_head rcu ; unsigned long map [ 0 ] ; }
s#memcg_vmstats_percpu struct memcg_vmstats_percpu { long stat [ E#MEMCG_NR_STAT ] ; unsigned long events [ E#NR_VM_EVENT_ITEMS ] ; unsigned long nr_page_events ; unsigned long targets [ E#MEM_CGROUP_NTARGETS ] ; }
s#mempolicy@66376883 struct mempolicy { UNKNOWN }
s#mempolicy@d15df970 struct mempolicy { t#atomic_t refcnt ; unsigned short mode ; unsigned short flags ; union { short preferred_node ; t#nodemask_t nodes ; } v ; union { t#nodemask_t cpuset_mems_allowed ; t#nodemask_t user_nodemask ; } w ; }
s#mempool_s struct mempool_s { t#spinlock_t lock ; int min_nr ; int curr_nr ; void * * elements ; void * pool_data ; t#mempool_alloc_t * alloc ; t#mempool_free_t * free ; t#wait_queue_head_t wait ; }
s#mfd_cell@237d3e98 struct mfd_cell { const char * name ; int id ; t#atomic_t * usage_count ; int ( * enable ) ( s#platform_device * ) ; int ( * disable ) ( s#platform_device * ) ; int ( * suspend ) ( s#platform_device * ) ; int ( * resume ) ( s#platform_device * ) ; void * platform_data ; t#size_t pdata_size ; s#property_entry * properties ; const char * of_compatible ; const s#mfd_cell_acpi_match * acpi_match ; int num_resources ; const s#resource * resources ; t#bool ignore_resource_conflicts ; t#bool pm_runtime_no_callbacks ; const char * const * parent_supplies ; int num_parent_supplies ; }
s#mfd_cell@f317b0fa struct mfd_cell { UNKNOWN }
s#mfd_cell_acpi_match struct mfd_cell_acpi_match { const char * pnpid ; const unsigned long long adr ; }
s#mii_bus struct mii_bus { s#module * owner ; const char * name ; char id [ 61 ] ; void * priv ; int ( * read ) ( s#mii_bus * , int , int ) ; int ( * write ) ( s#mii_bus * , int , int , t#u16 ) ; int ( * reset ) ( s#mii_bus * ) ; s#mutex mdio_lock ; s#device * parent ; enum { MDIOBUS_ALLOCATED = 1 , MDIOBUS_REGISTERED , MDIOBUS_UNREGISTERED , MDIOBUS_RELEASED , } state ; s#device dev ; s#mdio_device * mdio_map [ 32 ] ; t#u32 phy_mask ; t#u32 phy_ignore_ta_mask ; int irq [ 32 ] ; int reset_delay_us ; s#gpio_desc * reset_gpiod ; }
s#mini_Qdisc@6baae82b struct mini_Qdisc { UNKNOWN }
s#mini_Qdisc@bab43749 struct mini_Qdisc { s#tcf_proto * filter_list ; s#gnet_stats_basic_cpu * cpu_bstats ; s#gnet_stats_queue * cpu_qstats ; s#callback_head rcu ; }
s#miscdevice struct miscdevice { int minor ; const char * name ; const s#file_operations * fops ; s#list_head list ; s#device * parent ; s#device * this_device ; const s#attribute_group * * groups ; const char * nodename ; t#umode_t mode ; }
s#mm_rss_stat struct mm_rss_stat { t#atomic_long_t count [ E#NR_MM_COUNTERS ] ; }
s#mm_struct struct mm_struct { struct { s#vm_area_struct * mmap ; s#rb_root mm_rb ; t#u64 vmacache_seqnum ; unsigned long ( * get_unmapped_area ) ( s#file * , unsigned long , unsigned long , unsigned long , unsigned long ) ; unsigned long mmap_base ; unsigned long mmap_legacy_base ; unsigned long mmap_compat_base ; unsigned long mmap_compat_legacy_base ; unsigned long task_size ; unsigned long highest_vm_end ; t#pgd_t * pgd ; t#atomic_t membarrier_state ; t#atomic_t mm_users ; t#atomic_t mm_count ; t#atomic_long_t pgtables_bytes ; int map_count ; t#spinlock_t page_table_lock ; s#rw_semaphore mmap_sem ; s#list_head mmlist ; unsigned long hiwater_rss ; unsigned long hiwater_vm ; unsigned long total_vm ; unsigned long locked_vm ; t#atomic64_t pinned_vm ; unsigned long data_vm ; unsigned long exec_vm ; unsigned long stack_vm ; unsigned long def_flags ; t#spinlock_t arg_lock ; unsigned long start_code , end_code , start_data , end_data ; unsigned long start_brk , brk , start_stack ; unsigned long arg_start , arg_end , env_start , env_end ; unsigned long saved_auxv [ ( 2 * ( 2 + 20 + 1 ) ) ] ; s#mm_rss_stat rss_stat ; s#linux_binfmt * binfmt ; t#mm_context_t context ; unsigned long flags ; s#core_state * core_state ; t#spinlock_t ioctx_lock ; s#kioctx_table * ioctx_table ; s#task_struct * owner ; s#user_namespace * user_ns ; s#file * exe_file ; s#mmu_notifier_mm * mmu_notifier_mm ; unsigned long numa_next_scan ; unsigned long numa_scan_offset ; int numa_scan_seq ; t#atomic_t tlb_flush_pending ; t#bool tlb_flush_batched ; s#uprobes_state uprobes_state ; t#atomic_long_t hugetlb_usage ; s#work_struct async_put_work ; } __attribute__ ( ( __designated_init__ ) ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; unsigned long cpu_bitmap [ ] ; }
s#mmu_gather struct mmu_gather { s#mm_struct * mm ; s#mmu_table_batch * batch ; unsigned long start ; unsigned long end ; unsigned int fullmm : 1 ; unsigned int need_flush_all : 1 ; unsigned int freed_tables : 1 ; unsigned int cleared_ptes : 1 ; unsigned int cleared_pmds : 1 ; unsigned int cleared_puds : 1 ; unsigned int cleared_p4ds : 1 ; unsigned int vma_exec : 1 ; unsigned int vma_huge : 1 ; unsigned int batch_count ; s#mmu_gather_batch * active ; s#mmu_gather_batch local ; s#page * __pages [ 8 ] ; }
s#mmu_gather_batch struct mmu_gather_batch { s#mmu_gather_batch * next ; unsigned int nr ; unsigned int max ; s#page * pages [ 0 ] ; }
s#mmu_notifier struct mmu_notifier { s#hlist_node hlist ; const s#mmu_notifier_ops * ops ; s#mm_struct * mm ; s#callback_head rcu ; unsigned int users ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#mmu_notifier_mm@2ba1f463 struct mmu_notifier_mm { s#hlist_head list ; t#spinlock_t lock ; }
s#mmu_notifier_mm@e39c2669 struct mmu_notifier_mm { UNKNOWN }
s#mmu_notifier_ops struct mmu_notifier_ops { void ( * release ) ( s#mmu_notifier * , s#mm_struct * ) ; int ( * clear_flush_young ) ( s#mmu_notifier * , s#mm_struct * , unsigned long , unsigned long ) ; int ( * clear_young ) ( s#mmu_notifier * , s#mm_struct * , unsigned long , unsigned long ) ; int ( * test_young ) ( s#mmu_notifier * , s#mm_struct * , unsigned long ) ; void ( * change_pte ) ( s#mmu_notifier * , s#mm_struct * , unsigned long , t#pte_t ) ; int ( * invalidate_range_start ) ( s#mmu_notifier * , const s#mmu_notifier_range * ) ; void ( * invalidate_range_end ) ( s#mmu_notifier * , const s#mmu_notifier_range * ) ; void ( * invalidate_range ) ( s#mmu_notifier * , s#mm_struct * , unsigned long , unsigned long ) ; s#mmu_notifier * ( * alloc_notifier ) ( s#mm_struct * ) ; void ( * free_notifier ) ( s#mmu_notifier * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#mmu_notifier_range struct mmu_notifier_range { s#vm_area_struct * vma ; s#mm_struct * mm ; unsigned long start ; unsigned long end ; unsigned flags ; e#mmu_notifier_event event ; }
s#mmu_table_batch struct mmu_table_batch { s#callback_head rcu ; unsigned int nr ; void * tables [ 0 ] ; }
s#mnt_namespace@13467d86 struct mnt_namespace { UNKNOWN }
s#mnt_namespace@ac4fda29 struct mnt_namespace { t#atomic_t count ; s#ns_common ns ; s#mount * root ; s#list_head list ; s#user_namespace * user_ns ; s#ucounts * ucounts ; t#u64 seq ; t#wait_queue_head_t poll ; t#u64 event ; unsigned int mounts ; unsigned int pending_mounts ; }
s#mnt_pcp struct mnt_pcp { int mnt_count ; int mnt_writers ; }
s#mod_arch_specific struct mod_arch_specific { }
s#mod_kallsyms struct mod_kallsyms { t#Elf64_Sym * symtab ; unsigned int num_symtab ; char * strtab ; char * typetab ; }
s#mod_tree_node struct mod_tree_node { s#module * mod ; s#latch_tree_node node ; }
s#module@21b68714 struct module { e#module_state state ; s#list_head list ; char name [ ( 64 - sizeof ( unsigned long ) ) ] ; s#module_kobject mkobj ; s#module_attribute * modinfo_attrs ; const char * version ; const char * srcversion ; s#kobject * holders_dir ; const s#kernel_symbol * syms ; const t#s32 * crcs ; unsigned int num_syms ; s#mutex param_lock ; s#kernel_param * kp ; unsigned int num_kp ; unsigned int num_gpl_syms ; const s#kernel_symbol * gpl_syms ; const t#s32 * gpl_crcs ; t#bool sig_ok ; t#bool async_probe_requested ; const s#kernel_symbol * gpl_future_syms ; const t#s32 * gpl_future_crcs ; unsigned int num_gpl_future_syms ; unsigned int num_exentries ; s#exception_table_entry * extable ; int ( * init ) ( void ) ; s#module_layout core_layout __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; s#module_layout init_layout ; s#mod_arch_specific arch ; unsigned long taints ; unsigned num_bugs ; s#list_head bug_list ; s#bug_entry * bug_table ; s#mod_kallsyms * kallsyms ; s#mod_kallsyms core_kallsyms ; s#module_sect_attrs * sect_attrs ; s#module_notes_attrs * notes_attrs ; char * args ; void * percpu ; unsigned int percpu_size ; unsigned int num_tracepoints ; t#tracepoint_ptr_t * tracepoints_ptrs ; unsigned int num_srcu_structs ; s#srcu_struct * * srcu_struct_ptrs ; unsigned int num_bpf_raw_events ; s#bpf_raw_event_map * bpf_raw_events ; s#jump_entry * jump_entries ; unsigned int num_jump_entries ; unsigned int num_trace_bprintk_fmt ; const char * * trace_bprintk_fmt_start ; s#trace_event_call * * trace_events ; unsigned int num_trace_events ; s#trace_eval_map * * trace_evals ; unsigned int num_trace_evals ; unsigned int num_ftrace_callsites ; unsigned long * ftrace_callsites ; s#list_head source_list ; s#list_head target_list ; void ( * exit ) ( void ) ; t#atomic_t refcnt ; s#error_injection_entry * ei_funcs ; unsigned int num_ei_funcs ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#module@689a97e0 struct module { UNKNOWN }
s#module_attribute struct module_attribute { s#attribute attr ; t#ssize_t ( * show ) ( s#module_attribute * , s#module_kobject * , char * ) ; t#ssize_t ( * store ) ( s#module_attribute * , s#module_kobject * , const char * , t#size_t ) ; void ( * setup ) ( s#module * , const char * ) ; int ( * test ) ( s#module * ) ; void ( * free ) ( s#module * ) ; }
s#module_kobject@091e288e struct module_kobject { s#kobject kobj ; s#module * mod ; s#kobject * drivers_dir ; s#module_param_attrs * mp ; s#completion * kobj_completion ; }
s#module_kobject@e588e4ad struct module_kobject { UNKNOWN }
s#module_layout struct module_layout { void * base ; unsigned int size ; unsigned int text_size ; unsigned int ro_size ; unsigned int ro_after_init_size ; s#mod_tree_node mtn ; }
s#module_notes_attrs struct module_notes_attrs { UNKNOWN }
s#module_param_attrs struct module_param_attrs { UNKNOWN }
s#module_sect_attrs struct module_sect_attrs { UNKNOWN }
s#mount struct mount { s#hlist_node mnt_hash ; s#mount * mnt_parent ; s#dentry * mnt_mountpoint ; s#vfsmount mnt ; union { s#callback_head mnt_rcu ; s#llist_node mnt_llist ; } ; s#mnt_pcp * mnt_pcp ; s#list_head mnt_mounts ; s#list_head mnt_child ; s#list_head mnt_instance ; const char * mnt_devname ; s#list_head mnt_list ; s#list_head mnt_expire ; s#list_head mnt_share ; s#list_head mnt_slave_list ; s#list_head mnt_slave ; s#mount * mnt_master ; s#mnt_namespace * mnt_ns ; s#mountpoint * mnt_mp ; union { s#hlist_node mnt_mp_list ; s#hlist_node mnt_umount ; } ; s#list_head mnt_umounting ; s#fsnotify_mark_connector * mnt_fsnotify_marks ; t#__u32 mnt_fsnotify_mask ; int mnt_id ; int mnt_group_id ; int mnt_expiry_mark ; s#hlist_head mnt_pins ; s#hlist_head mnt_stuck_children ; }
s#mountpoint struct mountpoint { s#hlist_node m_hash ; s#dentry * m_dentry ; s#hlist_head m_list ; int m_count ; }
s#mpls_dev@2c594785 struct mpls_dev { int input_enabled ; s#net_device * dev ; s#mpls_pcpu_stats * stats ; s#ctl_table_header * sysctl ; s#callback_head rcu ; }
s#mpls_dev@ecb506b0 struct mpls_dev { UNKNOWN }
s#mpls_link_stats struct mpls_link_stats { t#__u64 rx_packets ; t#__u64 tx_packets ; t#__u64 rx_bytes ; t#__u64 tx_bytes ; t#__u64 rx_errors ; t#__u64 tx_errors ; t#__u64 rx_dropped ; t#__u64 tx_dropped ; t#__u64 rx_noroute ; }
s#mpls_nh struct mpls_nh { s#net_device * nh_dev ; unsigned int nh_flags ; t#u8 nh_labels ; t#u8 nh_via_alen ; t#u8 nh_via_table ; t#u8 nh_reserved1 ; t#u32 nh_label [ 0 ] ; }
s#mpls_pcpu_stats struct mpls_pcpu_stats { s#mpls_link_stats stats ; s#u64_stats_sync syncp ; }
s#mpls_route@6bce9b55 struct mpls_route { UNKNOWN }
s#mpls_route@a2ff7ef3 struct mpls_route { s#callback_head rt_rcu ; t#u8 rt_protocol ; t#u8 rt_payload_type ; t#u8 rt_max_alen ; t#u8 rt_ttl_propagate ; t#u8 rt_nhn ; t#u8 rt_nhn_alive ; t#u8 rt_nh_size ; t#u8 rt_via_offset ; t#u8 rt_reserved1 ; s#mpls_nh rt_nh [ 0 ] ; }
s#mq_attr struct mq_attr { t#__kernel_long_t mq_flags ; t#__kernel_long_t mq_maxmsg ; t#__kernel_long_t mq_msgsize ; t#__kernel_long_t mq_curmsgs ; t#__kernel_long_t __reserved [ 4 ] ; }
s#mrp_applicant struct mrp_applicant { s#mrp_application * app ; s#net_device * dev ; s#timer_list join_timer ; s#timer_list periodic_timer ; t#spinlock_t lock ; s#sk_buff_head queue ; s#sk_buff * pdu ; s#rb_root mad ; s#callback_head rcu ; t#bool active ; }
s#mrp_application struct mrp_application { e#mrp_applications type ; unsigned int maxattr ; s#packet_type pkttype ; unsigned char group_address [ 6 ] ; t#u8 version ; }
s#mrp_port@670475f3 struct mrp_port { s#mrp_applicant * applicants [ ( E#__MRP_APPLICATION_MAX - 1 ) + 1 ] ; s#callback_head rcu ; }
s#mrp_port@e05e7d57 struct mrp_port { UNKNOWN }
s#msghdr struct msghdr { void * msg_name ; int msg_namelen ; s#iov_iter msg_iter ; void * msg_control ; t#__kernel_size_t msg_controllen ; unsigned int msg_flags ; s#kiocb * msg_iocb ; }
s#msi_controller@6e4dfcd1 struct msi_controller { s#module * owner ; s#device * dev ; s#device_node * of_node ; s#list_head list ; int ( * setup_irq ) ( s#msi_controller * , s#pci_dev * , s#msi_desc * ) ; int ( * setup_irqs ) ( s#msi_controller * , s#pci_dev * , int , int ) ; void ( * teardown_irq ) ( s#msi_controller * , unsigned int ) ; }
s#msi_controller@89001ff4 struct msi_controller { UNKNOWN }
s#msi_desc@9f5aa3f4 struct msi_desc { UNKNOWN }
s#msi_desc@d0a9f3ca struct msi_desc { s#list_head list ; unsigned int irq ; unsigned int nvec_used ; s#device * dev ; s#msi_msg msg ; s#irq_affinity_desc * affinity ; void ( * write_msi_msg ) ( s#msi_desc * , void * ) ; void * write_msi_msg_data ; union { struct { t#u32 masked ; struct { t#u8 is_msix : 1 ; t#u8 multiple : 3 ; t#u8 multi_cap : 3 ; t#u8 maskbit : 1 ; t#u8 is_64 : 1 ; t#u8 is_virtual : 1 ; t#u16 entry_nr ; unsigned default_irq ; } msi_attrib ; union { t#u8 mask_pos ; void * mask_base ; } ; } ; s#platform_msi_desc platform ; s#fsl_mc_msi_desc fsl_mc ; s#ti_sci_inta_msi_desc inta ; } ; }
s#msi_msg@32144411 struct msi_msg { UNKNOWN }
s#msi_msg@32c26c35 struct msi_msg { t#u32 address_lo ; t#u32 address_hi ; t#u32 data ; }
s#msix_entry@354c1fd8 struct msix_entry { t#u32 vector ; t#u16 entry ; }
s#msix_entry@51b4b0c7 struct msix_entry { UNKNOWN }
s#mtd_debug_info struct mtd_debug_info { s#dentry * dfs_dir ; const char * partname ; const char * partid ; }
s#mtd_ecc_stats struct mtd_ecc_stats { t#__u32 corrected ; t#__u32 failed ; t#__u32 badblocks ; t#__u32 bbtblocks ; }
s#mtd_erase_region_info struct mtd_erase_region_info { t#uint64_t offset ; t#uint32_t erasesize ; t#uint32_t numblocks ; unsigned long * lockmap ; }
s#mtd_info@36d8117b struct mtd_info { t#u_char type ; t#uint32_t flags ; t#uint32_t orig_flags ; t#uint64_t size ; t#uint32_t erasesize ; t#uint32_t writesize ; t#uint32_t writebufsize ; t#uint32_t oobsize ; t#uint32_t oobavail ; unsigned int erasesize_shift ; unsigned int writesize_shift ; unsigned int erasesize_mask ; unsigned int writesize_mask ; unsigned int bitflip_threshold ; const char * name ; int index ; const s#mtd_ooblayout_ops * ooblayout ; const s#mtd_pairing_scheme * pairing ; unsigned int ecc_step_size ; unsigned int ecc_strength ; int numeraseregions ; s#mtd_erase_region_info * eraseregions ; int ( * _erase ) ( s#mtd_info * , s#erase_info * ) ; int ( * _point ) ( s#mtd_info * , t#loff_t , t#size_t , t#size_t * , void * * , t#resource_size_t * ) ; int ( * _unpoint ) ( s#mtd_info * , t#loff_t , t#size_t ) ; int ( * _read ) ( s#mtd_info * , t#loff_t , t#size_t , t#size_t * , t#u_char * ) ; int ( * _write ) ( s#mtd_info * , t#loff_t , t#size_t , t#size_t * , const t#u_char * ) ; int ( * _panic_write ) ( s#mtd_info * , t#loff_t , t#size_t , t#size_t * , const t#u_char * ) ; int ( * _read_oob ) ( s#mtd_info * , t#loff_t , s#mtd_oob_ops * ) ; int ( * _write_oob ) ( s#mtd_info * , t#loff_t , s#mtd_oob_ops * ) ; int ( * _get_fact_prot_info ) ( s#mtd_info * , t#size_t , t#size_t * , s#otp_info * ) ; int ( * _read_fact_prot_reg ) ( s#mtd_info * , t#loff_t , t#size_t , t#size_t * , t#u_char * ) ; int ( * _get_user_prot_info ) ( s#mtd_info * , t#size_t , t#size_t * , s#otp_info * ) ; int ( * _read_user_prot_reg ) ( s#mtd_info * , t#loff_t , t#size_t , t#size_t * , t#u_char * ) ; int ( * _write_user_prot_reg ) ( s#mtd_info * , t#loff_t , t#size_t , t#size_t * , t#u_char * ) ; int ( * _lock_user_prot_reg ) ( s#mtd_info * , t#loff_t , t#size_t ) ; int ( * _writev ) ( s#mtd_info * , const s#kvec * , unsigned long , t#loff_t , t#size_t * ) ; void ( * _sync ) ( s#mtd_info * ) ; int ( * _lock ) ( s#mtd_info * , t#loff_t , t#uint64_t ) ; int ( * _unlock ) ( s#mtd_info * , t#loff_t , t#uint64_t ) ; int ( * _is_locked ) ( s#mtd_info * , t#loff_t , t#uint64_t ) ; int ( * _block_isreserved ) ( s#mtd_info * , t#loff_t ) ; int ( * _block_isbad ) ( s#mtd_info * , t#loff_t ) ; int ( * _block_markbad ) ( s#mtd_info * , t#loff_t ) ; int ( * _max_bad_blocks ) ( s#mtd_info * , t#loff_t , t#size_t ) ; int ( * _suspend ) ( s#mtd_info * ) ; void ( * _resume ) ( s#mtd_info * ) ; void ( * _reboot ) ( s#mtd_info * ) ; int ( * _get_device ) ( s#mtd_info * ) ; void ( * _put_device ) ( s#mtd_info * ) ; t#bool oops_panic_write ; s#notifier_block reboot_notifier ; s#mtd_ecc_stats ecc_stats ; int subpage_sft ; void * priv ; s#module * owner ; s#device dev ; int usecount ; s#mtd_debug_info dbg ; s#nvmem_device * nvmem ; }
s#mtd_info@8095bfdb struct mtd_info { UNKNOWN }
s#mtd_oob_ops struct mtd_oob_ops { unsigned int mode ; t#size_t len ; t#size_t retlen ; t#size_t ooblen ; t#size_t oobretlen ; t#uint32_t ooboffs ; t#uint8_t * datbuf ; t#uint8_t * oobbuf ; }
s#mtd_oob_region struct mtd_oob_region { t#u32 offset ; t#u32 length ; }
s#mtd_ooblayout_ops struct mtd_ooblayout_ops { int ( * ecc ) ( s#mtd_info * , int , s#mtd_oob_region * ) ; int ( * free ) ( s#mtd_info * , int , s#mtd_oob_region * ) ; }
s#mtd_pairing_info struct mtd_pairing_info { int pair ; int group ; }
s#mtd_pairing_scheme struct mtd_pairing_scheme { int ngroups ; int ( * get_info ) ( s#mtd_info * , int , s#mtd_pairing_info * ) ; int ( * get_wunit ) ( s#mtd_info * , const s#mtd_pairing_info * ) ; }
s#mutex struct mutex { t#atomic_long_t owner ; t#spinlock_t wait_lock ; s#optimistic_spin_queue osq ; s#list_head wait_list ; void * magic ; s#lockdep_map dep_map ; }
s#mutex_waiter struct mutex_waiter { s#list_head list ; s#task_struct * task ; s#ww_acquire_ctx * ww_ctx ; void * magic ; }
s#nameidata struct nameidata { UNKNOWN }
s#napi_struct struct napi_struct { s#list_head poll_list ; unsigned long state ; int weight ; unsigned long gro_bitmask ; int ( * poll ) ( s#napi_struct * , int ) ; int poll_owner ; s#net_device * dev ; s#gro_list gro_hash [ 8 ] ; s#sk_buff * skb ; s#list_head rx_list ; int rx_count ; s#hrtimer timer ; s#list_head dev_list ; s#hlist_node napi_hash_node ; unsigned int napi_id ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; }
s#nd_opt_hdr struct nd_opt_hdr { t#__u8 nd_opt_type ; t#__u8 nd_opt_len ; }
s#ndisc_ops@116b278b struct ndisc_ops { int ( * is_useropt ) ( t#u8 ) ; int ( * parse_options ) ( const s#net_device * , s#nd_opt_hdr * , s#ndisc_options * ) ; void ( * update ) ( const s#net_device * , s#neighbour * , t#u32 , t#u8 , const s#ndisc_options * ) ; int ( * opt_addr_space ) ( const s#net_device * , t#u8 , s#neighbour * , t#u8 * , t#u8 * * ) ; void ( * fill_addr_option ) ( const s#net_device * , s#sk_buff * , t#u8 , const t#u8 * ) ; void ( * prefix_rcv_add_addr ) ( s#net * , s#net_device * , const s#prefix_info * , s#inet6_dev * , s#in6_addr * , int , t#u32 , t#bool , t#bool , t#__u32 , t#u32 , t#bool ) ; }
s#ndisc_ops@397a4195 struct ndisc_ops { UNKNOWN }
s#ndisc_options struct ndisc_options { s#nd_opt_hdr * nd_opt_array [ E#__ND_OPT_ARRAY_MAX ] ; s#nd_opt_hdr * nd_opts_ri ; s#nd_opt_hdr * nd_opts_ri_end ; s#nd_opt_hdr * nd_useropts ; s#nd_opt_hdr * nd_useropts_end ; s#nd_opt_hdr * nd_802154_opt_array [ E#ND_OPT_TARGET_LL_ADDR + 1 ] ; }
s#ndmsg struct ndmsg { t#__u8 ndm_family ; t#__u8 ndm_pad1 ; t#__u16 ndm_pad2 ; t#__s32 ndm_ifindex ; t#__u16 ndm_state ; t#__u8 ndm_flags ; t#__u8 ndm_type ; }
s#neigh_hash_table struct neigh_hash_table { s#neighbour * * hash_buckets ; unsigned int hash_shift ; t#__u32 hash_rnd [ 4 ] ; s#callback_head rcu ; }
s#neigh_ops struct neigh_ops { int family ; void ( * solicit ) ( s#neighbour * , s#sk_buff * ) ; void ( * error_report ) ( s#neighbour * , s#sk_buff * ) ; int ( * output ) ( s#neighbour * , s#sk_buff * ) ; int ( * connected_output ) ( s#neighbour * , s#sk_buff * ) ; }
s#neigh_parms@3fe62c7d struct neigh_parms { UNKNOWN }
s#neigh_parms@628b99fe struct neigh_parms { t#possible_net_t net ; s#net_device * dev ; s#list_head list ; int ( * neigh_setup ) ( s#neighbour * ) ; s#neigh_table * tbl ; void * sysctl_table ; int dead ; t#refcount_t refcnt ; s#callback_head callback_head ; int reachable_time ; int data [ ( E#NEIGH_VAR_LOCKTIME + 1 ) ] ; unsigned long data_state [ ( ( ( ( E#NEIGH_VAR_LOCKTIME + 1 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; }
s#neigh_statistics struct neigh_statistics { unsigned long allocs ; unsigned long destroys ; unsigned long hash_grows ; unsigned long res_failed ; unsigned long lookups ; unsigned long hits ; unsigned long rcv_probes_mcast ; unsigned long rcv_probes_ucast ; unsigned long periodic_gc_runs ; unsigned long forced_gc_runs ; unsigned long unres_discards ; unsigned long table_fulls ; }
s#neigh_table struct neigh_table { int family ; unsigned int entry_size ; unsigned int key_len ; t#__be16 protocol ; t#__u32 ( * hash ) ( const void * , const s#net_device * , t#__u32 * ) ; t#bool ( * key_eq ) ( const s#neighbour * , const void * ) ; int ( * constructor ) ( s#neighbour * ) ; int ( * pconstructor ) ( s#pneigh_entry * ) ; void ( * pdestructor ) ( s#pneigh_entry * ) ; void ( * proxy_redo ) ( s#sk_buff * ) ; t#bool ( * allow_add ) ( const s#net_device * , s#netlink_ext_ack * ) ; char * id ; s#neigh_parms parms ; s#list_head parms_list ; int gc_interval ; int gc_thresh1 ; int gc_thresh2 ; int gc_thresh3 ; unsigned long last_flush ; s#delayed_work gc_work ; s#timer_list proxy_timer ; s#sk_buff_head proxy_queue ; t#atomic_t entries ; t#atomic_t gc_entries ; s#list_head gc_list ; t#rwlock_t lock ; unsigned long last_rand ; s#neigh_statistics * stats ; s#neigh_hash_table * nht ; s#pneigh_entry * * phash_buckets ; }
s#neighbour@8167d134 struct neighbour { UNKNOWN }
s#neighbour@c02c9362 struct neighbour { s#neighbour * next ; s#neigh_table * tbl ; s#neigh_parms * parms ; unsigned long confirmed ; unsigned long updated ; t#rwlock_t lock ; t#refcount_t refcnt ; unsigned int arp_queue_len_bytes ; s#sk_buff_head arp_queue ; s#timer_list timer ; unsigned long used ; t#atomic_t probes ; t#__u8 flags ; t#__u8 nud_state ; t#__u8 type ; t#__u8 dead ; t#u8 protocol ; t#seqlock_t ha_lock ; unsigned char ha [ ( ( ( ( 32 ) ) + ( ( typeof ( ( 32 ) ) ) ( ( sizeof ( unsigned long ) ) ) - 1 ) ) & ~ ( ( typeof ( ( 32 ) ) ) ( ( sizeof ( unsigned long ) ) ) - 1 ) ) ] __attribute__ ( ( __aligned__ ( 8 ) ) ) ; s#hh_cache hh ; int ( * output ) ( s#neighbour * , s#sk_buff * ) ; const s#neigh_ops * ops ; s#list_head gc_list ; s#callback_head rcu ; s#net_device * dev ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; t#u8 primary_key [ 0 ] ; }
s#net@13fb33f5 struct net { t#refcount_t passive ; t#refcount_t count ; t#spinlock_t rules_mod_lock ; unsigned int dev_unreg_count ; unsigned int dev_base_seq ; int ifindex ; t#spinlock_t nsid_lock ; t#atomic_t fnhe_genid ; s#list_head list ; s#list_head exit_list ; s#llist_node cleanup_list ; s#key_tag * key_domain ; s#user_namespace * user_ns ; s#ucounts * ucounts ; s#idr netns_ids ; s#ns_common ns ; s#list_head dev_base_head ; s#proc_dir_entry * proc_net ; s#proc_dir_entry * proc_net_stat ; s#ctl_table_set sysctls ; s#sock * rtnl ; s#sock * genl_sock ; s#uevent_sock * uevent_sock ; s#hlist_head * dev_name_head ; s#hlist_head * dev_index_head ; t#u32 hash_mix ; s#net_device * loopback_dev ; s#list_head rules_ops ; s#netns_core core ; s#netns_mib mib ; s#netns_packet packet ; s#netns_unix unx ; s#netns_nexthop nexthop ; s#netns_ipv4 ipv4 ; s#netns_ipv6 ipv6 ; s#netns_ieee802154_lowpan ieee802154_lowpan ; s#netns_sctp sctp ; s#netns_nf nf ; s#netns_xt xt ; s#netns_ct ct ; s#netns_nftables nft ; s#netns_nf_frag nf_frag ; s#ctl_table_header * nf_frag_frags_hdr ; s#sock * nfnl ; s#sock * nfnl_stash ; s#list_head nfnl_acct_list ; s#list_head nfct_timeout_list ; s#sk_buff_head wext_nlevents ; s#net_generic * gen ; s#bpf_prog * flow_dissector_prog ; s#netns_xfrm xfrm ; s#netns_ipvs * ipvs ; s#netns_mpls mpls ; s#netns_can can ; s#netns_xdp xdp ; s#sock * crypto_nlsk ; s#sock * diag_nlsk ; }
s#net@be3f1911 struct net { UNKNOWN }
s#net_device@253381a9 struct net_device { char name [ 16 ] ; s#hlist_node name_hlist ; s#dev_ifalias * ifalias ; unsigned long mem_end ; unsigned long mem_start ; unsigned long base_addr ; int irq ; unsigned long state ; s#list_head dev_list ; s#list_head napi_list ; s#list_head unreg_list ; s#list_head close_list ; s#list_head ptype_all ; s#list_head ptype_specific ; struct { s#list_head upper ; s#list_head lower ; } adj_list ; t#netdev_features_t features ; t#netdev_features_t hw_features ; t#netdev_features_t wanted_features ; t#netdev_features_t vlan_features ; t#netdev_features_t hw_enc_features ; t#netdev_features_t mpls_features ; t#netdev_features_t gso_partial_features ; int ifindex ; int group ; s#net_device_stats stats ; t#atomic_long_t rx_dropped ; t#atomic_long_t tx_dropped ; t#atomic_long_t rx_nohandler ; t#atomic_t carrier_up_count ; t#atomic_t carrier_down_count ; const s#iw_handler_def * wireless_handlers ; s#iw_public_data * wireless_data ; const s#net_device_ops * netdev_ops ; const s#ethtool_ops * ethtool_ops ; const s#l3mdev_ops * l3mdev_ops ; const s#ndisc_ops * ndisc_ops ; const s#xfrmdev_ops * xfrmdev_ops ; const s#tlsdev_ops * tlsdev_ops ; const s#header_ops * header_ops ; unsigned int flags ; unsigned int priv_flags ; unsigned short gflags ; unsigned short padded ; unsigned char operstate ; unsigned char link_mode ; unsigned char if_port ; unsigned char dma ; unsigned int mtu ; unsigned int min_mtu ; unsigned int max_mtu ; unsigned short type ; unsigned short hard_header_len ; unsigned char min_header_len ; unsigned short needed_headroom ; unsigned short needed_tailroom ; unsigned char perm_addr [ 32 ] ; unsigned char addr_assign_type ; unsigned char addr_len ; unsigned char upper_level ; unsigned char lower_level ; unsigned short neigh_priv_len ; unsigned short dev_id ; unsigned short dev_port ; t#spinlock_t addr_list_lock ; unsigned char name_assign_type ; t#bool uc_promisc ; s#netdev_hw_addr_list uc ; s#netdev_hw_addr_list mc ; s#netdev_hw_addr_list dev_addrs ; s#kset * queues_kset ; unsigned int promiscuity ; unsigned int allmulti ; s#vlan_info * vlan_info ; s#dsa_port * dsa_ptr ; s#tipc_bearer * tipc_ptr ; s#in_device * ip_ptr ; s#inet6_dev * ip6_ptr ; s#wireless_dev * ieee80211_ptr ; s#wpan_dev * ieee802154_ptr ; s#mpls_dev * mpls_ptr ; unsigned char * dev_addr ; s#netdev_rx_queue * _rx ; unsigned int num_rx_queues ; unsigned int real_num_rx_queues ; s#bpf_prog * xdp_prog ; unsigned long gro_flush_timeout ; t#rx_handler_func_t * rx_handler ; void * rx_handler_data ; s#mini_Qdisc * miniq_ingress ; s#netdev_queue * ingress_queue ; s#nf_hook_entries * nf_hooks_ingress ; unsigned char broadcast [ 32 ] ; s#cpu_rmap * rx_cpu_rmap ; s#hlist_node index_hlist ; s#netdev_queue * _tx __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; unsigned int num_tx_queues ; unsigned int real_num_tx_queues ; s#Qdisc * qdisc ; s#hlist_head qdisc_hash [ 1 << ( 4 ) ] ; unsigned int tx_queue_len ; t#spinlock_t tx_global_lock ; int watchdog_timeo ; s#xps_dev_maps * xps_cpus_map ; s#xps_dev_maps * xps_rxqs_map ; s#mini_Qdisc * miniq_egress ; s#timer_list watchdog_timer ; int * pcpu_refcnt ; s#list_head todo_list ; s#list_head link_watch_list ; enum { NETREG_UNINITIALIZED = 0 , NETREG_REGISTERED , NETREG_UNREGISTERING , NETREG_UNREGISTERED , NETREG_RELEASED , NETREG_DUMMY , } reg_state : 8 ; t#bool dismantle ; enum { RTNL_LINK_INITIALIZED , RTNL_LINK_INITIALIZING , } rtnl_link_state : 16 ; t#bool needs_free_netdev ; void ( * priv_destructor ) ( s#net_device * ) ; s#netpoll_info * npinfo ; t#possible_net_t nd_net ; union { void * ml_priv ; s#pcpu_lstats * lstats ; s#pcpu_sw_netstats * tstats ; s#pcpu_dstats * dstats ; } ; s#garp_port * garp_port ; s#mrp_port * mrp_port ; s#device dev ; const s#attribute_group * sysfs_groups [ 4 ] ; const s#attribute_group * sysfs_rx_queue_group ; const s#rtnl_link_ops * rtnl_link_ops ; unsigned int gso_max_size ; t#u16 gso_max_segs ; const s#dcbnl_rtnl_ops * dcbnl_ops ; t#s16 num_tc ; s#netdev_tc_txq tc_to_txq [ 16 ] ; t#u8 prio_tc_map [ 15 + 1 ] ; unsigned int fcoe_ddp_xid ; s#netprio_map * priomap ; s#phy_device * phydev ; s#sfp_bus * sfp_bus ; s#lock_class_key qdisc_tx_busylock_key ; s#lock_class_key qdisc_running_key ; s#lock_class_key qdisc_xmit_lock_key ; s#lock_class_key addr_list_lock_key ; t#bool proto_down ; unsigned wol_enabled : 1 ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#net_device@f8d214a7 struct net_device { UNKNOWN }
s#net_device_ops struct net_device_ops { int ( * ndo_init ) ( s#net_device * ) ; void ( * ndo_uninit ) ( s#net_device * ) ; int ( * ndo_open ) ( s#net_device * ) ; int ( * ndo_stop ) ( s#net_device * ) ; t#netdev_tx_t ( * ndo_start_xmit ) ( s#sk_buff * , s#net_device * ) ; t#netdev_features_t ( * ndo_features_check ) ( s#sk_buff * , s#net_device * , t#netdev_features_t ) ; t#u16 ( * ndo_select_queue ) ( s#net_device * , s#sk_buff * , s#net_device * ) ; void ( * ndo_change_rx_flags ) ( s#net_device * , int ) ; void ( * ndo_set_rx_mode ) ( s#net_device * ) ; int ( * ndo_set_mac_address ) ( s#net_device * , void * ) ; int ( * ndo_validate_addr ) ( s#net_device * ) ; int ( * ndo_do_ioctl ) ( s#net_device * , s#ifreq * , int ) ; int ( * ndo_set_config ) ( s#net_device * , s#ifmap * ) ; int ( * ndo_change_mtu ) ( s#net_device * , int ) ; int ( * ndo_neigh_setup ) ( s#net_device * , s#neigh_parms * ) ; void ( * ndo_tx_timeout ) ( s#net_device * ) ; void ( * ndo_get_stats64 ) ( s#net_device * , s#rtnl_link_stats64 * ) ; t#bool ( * ndo_has_offload_stats ) ( const s#net_device * , int ) ; int ( * ndo_get_offload_stats ) ( int , const s#net_device * , void * ) ; s#net_device_stats * ( * ndo_get_stats ) ( s#net_device * ) ; int ( * ndo_vlan_rx_add_vid ) ( s#net_device * , t#__be16 , t#u16 ) ; int ( * ndo_vlan_rx_kill_vid ) ( s#net_device * , t#__be16 , t#u16 ) ; void ( * ndo_poll_controller ) ( s#net_device * ) ; int ( * ndo_netpoll_setup ) ( s#net_device * , s#netpoll_info * ) ; void ( * ndo_netpoll_cleanup ) ( s#net_device * ) ; int ( * ndo_set_vf_mac ) ( s#net_device * , int , t#u8 * ) ; int ( * ndo_set_vf_vlan ) ( s#net_device * , int , t#u16 , t#u8 , t#__be16 ) ; int ( * ndo_set_vf_rate ) ( s#net_device * , int , int , int ) ; int ( * ndo_set_vf_spoofchk ) ( s#net_device * , int , t#bool ) ; int ( * ndo_set_vf_trust ) ( s#net_device * , int , t#bool ) ; int ( * ndo_get_vf_config ) ( s#net_device * , int , s#ifla_vf_info * ) ; int ( * ndo_set_vf_link_state ) ( s#net_device * , int , int ) ; int ( * ndo_get_vf_stats ) ( s#net_device * , int , s#ifla_vf_stats * ) ; int ( * ndo_set_vf_port ) ( s#net_device * , int , s#nlattr * [ ] ) ; int ( * ndo_get_vf_port ) ( s#net_device * , int , s#sk_buff * ) ; int ( * ndo_set_vf_guid ) ( s#net_device * , int , t#u64 , int ) ; int ( * ndo_set_vf_rss_query_en ) ( s#net_device * , int , t#bool ) ; int ( * ndo_setup_tc ) ( s#net_device * , e#tc_setup_type , void * ) ; int ( * ndo_fcoe_enable ) ( s#net_device * ) ; int ( * ndo_fcoe_disable ) ( s#net_device * ) ; int ( * ndo_fcoe_ddp_setup ) ( s#net_device * , t#u16 , s#scatterlist * , unsigned int ) ; int ( * ndo_fcoe_ddp_done ) ( s#net_device * , t#u16 ) ; int ( * ndo_fcoe_ddp_target ) ( s#net_device * , t#u16 , s#scatterlist * , unsigned int ) ; int ( * ndo_fcoe_get_hbainfo ) ( s#net_device * , s#netdev_fcoe_hbainfo * ) ; int ( * ndo_fcoe_get_wwn ) ( s#net_device * , t#u64 * , int ) ; int ( * ndo_rx_flow_steer ) ( s#net_device * , const s#sk_buff * , t#u16 , t#u32 ) ; int ( * ndo_add_slave ) ( s#net_device * , s#net_device * , s#netlink_ext_ack * ) ; int ( * ndo_del_slave ) ( s#net_device * , s#net_device * ) ; t#netdev_features_t ( * ndo_fix_features ) ( s#net_device * , t#netdev_features_t ) ; int ( * ndo_set_features ) ( s#net_device * , t#netdev_features_t ) ; int ( * ndo_neigh_construct ) ( s#net_device * , s#neighbour * ) ; void ( * ndo_neigh_destroy ) ( s#net_device * , s#neighbour * ) ; int ( * ndo_fdb_add ) ( s#ndmsg * , s#nlattr * [ ] , s#net_device * , const unsigned char * , t#u16 , t#u16 , s#netlink_ext_ack * ) ; int ( * ndo_fdb_del ) ( s#ndmsg * , s#nlattr * [ ] , s#net_device * , const unsigned char * , t#u16 ) ; int ( * ndo_fdb_dump ) ( s#sk_buff * , s#netlink_callback * , s#net_device * , s#net_device * , int * ) ; int ( * ndo_fdb_get ) ( s#sk_buff * , s#nlattr * [ ] , s#net_device * , const unsigned char * , t#u16 , t#u32 , t#u32 , s#netlink_ext_ack * ) ; int ( * ndo_bridge_setlink ) ( s#net_device * , s#nlmsghdr * , t#u16 , s#netlink_ext_ack * ) ; int ( * ndo_bridge_getlink ) ( s#sk_buff * , t#u32 , t#u32 , s#net_device * , t#u32 , int ) ; int ( * ndo_bridge_dellink ) ( s#net_device * , s#nlmsghdr * , t#u16 ) ; int ( * ndo_change_carrier ) ( s#net_device * , t#bool ) ; int ( * ndo_get_phys_port_id ) ( s#net_device * , s#netdev_phys_item_id * ) ; int ( * ndo_get_port_parent_id ) ( s#net_device * , s#netdev_phys_item_id * ) ; int ( * ndo_get_phys_port_name ) ( s#net_device * , char * , t#size_t ) ; void ( * ndo_udp_tunnel_add ) ( s#net_device * , s#udp_tunnel_info * ) ; void ( * ndo_udp_tunnel_del ) ( s#net_device * , s#udp_tunnel_info * ) ; void * ( * ndo_dfwd_add_station ) ( s#net_device * , s#net_device * ) ; void ( * ndo_dfwd_del_station ) ( s#net_device * , void * ) ; int ( * ndo_set_tx_maxrate ) ( s#net_device * , int , t#u32 ) ; int ( * ndo_get_iflink ) ( const s#net_device * ) ; int ( * ndo_change_proto_down ) ( s#net_device * , t#bool ) ; int ( * ndo_fill_metadata_dst ) ( s#net_device * , s#sk_buff * ) ; void ( * ndo_set_rx_headroom ) ( s#net_device * , int ) ; int ( * ndo_bpf ) ( s#net_device * , s#netdev_bpf * ) ; int ( * ndo_xdp_xmit ) ( s#net_device * , int , s#xdp_frame * * , t#u32 ) ; int ( * ndo_xsk_wakeup ) ( s#net_device * , t#u32 , t#u32 ) ; s#devlink_port * ( * ndo_get_devlink_port ) ( s#net_device * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#net_device_stats struct net_device_stats { unsigned long rx_packets ; unsigned long tx_packets ; unsigned long rx_bytes ; unsigned long tx_bytes ; unsigned long rx_errors ; unsigned long tx_errors ; unsigned long rx_dropped ; unsigned long tx_dropped ; unsigned long multicast ; unsigned long collisions ; unsigned long rx_length_errors ; unsigned long rx_over_errors ; unsigned long rx_crc_errors ; unsigned long rx_frame_errors ; unsigned long rx_fifo_errors ; unsigned long rx_missed_errors ; unsigned long tx_aborted_errors ; unsigned long tx_carrier_errors ; unsigned long tx_fifo_errors ; unsigned long tx_heartbeat_errors ; unsigned long tx_window_errors ; unsigned long rx_compressed ; unsigned long tx_compressed ; }
s#net_generic@1d11e6c7 struct net_generic { UNKNOWN }
s#net_generic@2448a600 struct net_generic { union { struct { unsigned int len ; s#callback_head rcu ; } s ; void * ptr [ 0 ] ; } ; }
s#net_rate_estimator struct net_rate_estimator { UNKNOWN }
s#netdev_bpf struct netdev_bpf { e#bpf_netdev_command command ; union { struct { t#u32 flags ; s#bpf_prog * prog ; s#netlink_ext_ack * extack ; } ; struct { t#u32 prog_id ; t#u32 prog_flags ; } ; struct { s#bpf_offloaded_map * offmap ; } ; struct { s#xdp_umem * umem ; t#u16 queue_id ; } xsk ; } ; }
s#netdev_fcoe_hbainfo struct netdev_fcoe_hbainfo { char manufacturer [ 64 ] ; char serial_number [ 64 ] ; char hardware_version [ 64 ] ; char driver_version [ 64 ] ; char optionrom_version [ 64 ] ; char firmware_version [ 64 ] ; char model [ 256 ] ; char model_description [ 256 ] ; }
s#netdev_hw_addr_list struct netdev_hw_addr_list { s#list_head list ; int count ; }
s#netdev_phys_item_id struct netdev_phys_item_id { unsigned char id [ 32 ] ; unsigned char id_len ; }
s#netdev_queue struct netdev_queue { s#net_device * dev ; s#Qdisc * qdisc ; s#Qdisc * qdisc_sleeping ; s#kobject kobj ; int numa_node ; unsigned long tx_maxrate ; unsigned long trans_timeout ; s#net_device * sb_dev ; s#xdp_umem * umem ; t#spinlock_t _xmit_lock __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; int xmit_lock_owner ; unsigned long trans_start ; unsigned long state ; s#dql dql ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#netdev_rx_queue struct netdev_rx_queue { s#rps_map * rps_map ; s#rps_dev_flow_table * rps_flow_table ; s#kobject kobj ; s#net_device * dev ; s#xdp_rxq_info xdp_rxq ; s#xdp_umem * umem ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#netdev_tc_txq struct netdev_tc_txq { t#u16 count ; t#u16 offset ; }
s#netlink_callback struct netlink_callback { s#sk_buff * skb ; const s#nlmsghdr * nlh ; int ( * dump ) ( s#sk_buff * , s#netlink_callback * ) ; int ( * done ) ( s#netlink_callback * ) ; void * data ; s#module * module ; s#netlink_ext_ack * extack ; t#u16 family ; t#u16 min_dump_alloc ; t#bool strict_check ; t#u16 answer_flags ; unsigned int prev_seq , seq ; union { t#u8 ctx [ 48 ] ; long args [ 6 ] ; } ; }
s#netlink_ext_ack struct netlink_ext_ack { const char * _msg ; const s#nlattr * bad_attr ; t#u8 cookie [ 20 ] ; t#u8 cookie_len ; }
s#netlink_kernel_cfg struct netlink_kernel_cfg { unsigned int groups ; unsigned int flags ; void ( * input ) ( s#sk_buff * ) ; s#mutex * cb_mutex ; int ( * bind ) ( s#net * , int ) ; void ( * unbind ) ( s#net * , int ) ; t#bool ( * compare ) ( s#net * , s#sock * ) ; }
s#netns_can struct netns_can { s#proc_dir_entry * proc_dir ; s#proc_dir_entry * pde_version ; s#proc_dir_entry * pde_stats ; s#proc_dir_entry * pde_reset_stats ; s#proc_dir_entry * pde_rcvlist_all ; s#proc_dir_entry * pde_rcvlist_fil ; s#proc_dir_entry * pde_rcvlist_inv ; s#proc_dir_entry * pde_rcvlist_sff ; s#proc_dir_entry * pde_rcvlist_eff ; s#proc_dir_entry * pde_rcvlist_err ; s#proc_dir_entry * bcmproc_dir ; s#can_dev_rcv_lists * rx_alldev_list ; t#spinlock_t rcvlists_lock ; s#timer_list stattimer ; s#can_pkg_stats * pkg_stats ; s#can_rcv_lists_stats * rcv_lists_stats ; s#hlist_head cgw_list ; }
s#netns_core struct netns_core { s#ctl_table_header * sysctl_hdr ; int sysctl_somaxconn ; int * sock_inuse ; s#prot_inuse * prot_inuse ; }
s#netns_ct struct netns_ct { t#atomic_t count ; unsigned int expect_count ; s#delayed_work ecache_dwork ; t#bool ecache_dwork_pending ; t#bool auto_assign_helper_warned ; s#ctl_table_header * sysctl_header ; unsigned int sysctl_log_invalid ; int sysctl_events ; int sysctl_acct ; int sysctl_auto_assign_helper ; int sysctl_tstamp ; int sysctl_checksum ; s#ct_pcpu * pcpu_lists ; s#ip_conntrack_stat * stat ; s#nf_ct_event_notifier * nf_conntrack_event_cb ; s#nf_exp_event_notifier * nf_expect_event_cb ; s#nf_ip_net nf_ct_proto ; unsigned int labels_used ; }
s#netns_ieee802154_lowpan struct netns_ieee802154_lowpan { s#netns_sysctl_lowpan sysctl ; s#fqdir * fqdir ; }
s#netns_ipv4 struct netns_ipv4 { s#ctl_table_header * forw_hdr ; s#ctl_table_header * frags_hdr ; s#ctl_table_header * ipv4_hdr ; s#ctl_table_header * route_hdr ; s#ctl_table_header * xfrm4_hdr ; s#ipv4_devconf * devconf_all ; s#ipv4_devconf * devconf_dflt ; s#ip_ra_chain * ra_chain ; s#mutex ra_mutex ; s#fib_rules_ops * rules_ops ; t#bool fib_has_custom_rules ; unsigned int fib_rules_require_fldissect ; s#fib_table * fib_main ; s#fib_table * fib_default ; t#bool fib_has_custom_local_routes ; int fib_num_tclassid_users ; s#hlist_head * fib_table_hash ; t#bool fib_offload_disabled ; s#sock * fibnl ; s#sock * * icmp_sk ; s#sock * mc_autojoin_sk ; s#inet_peer_base * peers ; s#sock * * tcp_sk ; s#fqdir * fqdir ; s#xt_table * iptable_filter ; s#xt_table * iptable_mangle ; s#xt_table * iptable_raw ; s#xt_table * arptable_filter ; s#xt_table * iptable_security ; s#xt_table * nat_table ; int sysctl_icmp_echo_ignore_all ; int sysctl_icmp_echo_ignore_broadcasts ; int sysctl_icmp_ignore_bogus_error_responses ; int sysctl_icmp_ratelimit ; int sysctl_icmp_ratemask ; int sysctl_icmp_errors_use_inbound_ifaddr ; s#local_ports ip_local_ports ; int sysctl_tcp_ecn ; int sysctl_tcp_ecn_fallback ; int sysctl_ip_default_ttl ; int sysctl_ip_no_pmtu_disc ; int sysctl_ip_fwd_use_pmtu ; int sysctl_ip_fwd_update_priority ; int sysctl_ip_nonlocal_bind ; int sysctl_ip_dynaddr ; int sysctl_ip_early_demux ; int sysctl_raw_l3mdev_accept ; int sysctl_tcp_early_demux ; int sysctl_udp_early_demux ; int sysctl_fwmark_reflect ; int sysctl_tcp_fwmark_accept ; int sysctl_tcp_l3mdev_accept ; int sysctl_tcp_mtu_probing ; int sysctl_tcp_mtu_probe_floor ; int sysctl_tcp_base_mss ; int sysctl_tcp_min_snd_mss ; int sysctl_tcp_probe_threshold ; t#u32 sysctl_tcp_probe_interval ; int sysctl_tcp_keepalive_time ; int sysctl_tcp_keepalive_probes ; int sysctl_tcp_keepalive_intvl ; int sysctl_tcp_syn_retries ; int sysctl_tcp_synack_retries ; int sysctl_tcp_syncookies ; int sysctl_tcp_reordering ; int sysctl_tcp_retries1 ; int sysctl_tcp_retries2 ; int sysctl_tcp_orphan_retries ; int sysctl_tcp_fin_timeout ; unsigned int sysctl_tcp_notsent_lowat ; int sysctl_tcp_tw_reuse ; int sysctl_tcp_sack ; int sysctl_tcp_window_scaling ; int sysctl_tcp_timestamps ; int sysctl_tcp_early_retrans ; int sysctl_tcp_recovery ; int sysctl_tcp_thin_linear_timeouts ; int sysctl_tcp_slow_start_after_idle ; int sysctl_tcp_retrans_collapse ; int sysctl_tcp_stdurg ; int sysctl_tcp_rfc1337 ; int sysctl_tcp_abort_on_overflow ; int sysctl_tcp_fack ; int sysctl_tcp_max_reordering ; int sysctl_tcp_dsack ; int sysctl_tcp_app_win ; int sysctl_tcp_adv_win_scale ; int sysctl_tcp_frto ; int sysctl_tcp_nometrics_save ; int sysctl_tcp_moderate_rcvbuf ; int sysctl_tcp_tso_win_divisor ; int sysctl_tcp_workaround_signed_windows ; int sysctl_tcp_limit_output_bytes ; int sysctl_tcp_challenge_ack_limit ; int sysctl_tcp_min_tso_segs ; int sysctl_tcp_min_rtt_wlen ; int sysctl_tcp_autocorking ; int sysctl_tcp_invalid_ratelimit ; int sysctl_tcp_pacing_ss_ratio ; int sysctl_tcp_pacing_ca_ratio ; int sysctl_tcp_wmem [ 3 ] ; int sysctl_tcp_rmem [ 3 ] ; int sysctl_tcp_comp_sack_nr ; unsigned long sysctl_tcp_comp_sack_delay_ns ; s#inet_timewait_death_row tcp_death_row ; int sysctl_max_syn_backlog ; int sysctl_tcp_fastopen ; const s#tcp_congestion_ops * tcp_congestion_control ; s#tcp_fastopen_context * tcp_fastopen_ctx ; t#spinlock_t tcp_fastopen_ctx_lock ; unsigned int sysctl_tcp_fastopen_blackhole_timeout ; t#atomic_t tfo_active_disable_times ; unsigned long tfo_active_disable_stamp ; int sysctl_udp_wmem_min ; int sysctl_udp_rmem_min ; int sysctl_udp_l3mdev_accept ; int sysctl_igmp_max_memberships ; int sysctl_igmp_max_msf ; int sysctl_igmp_llm_reports ; int sysctl_igmp_qrv ; s#ping_group_range ping_group_range ; t#atomic_t dev_addr_genid ; unsigned long * sysctl_local_reserved_ports ; int sysctl_ip_prot_sock ; s#list_head mr_tables ; s#fib_rules_ops * mr_rules_ops ; int sysctl_fib_multipath_use_neigh ; int sysctl_fib_multipath_hash_policy ; s#fib_notifier_ops * notifier_ops ; unsigned int fib_seq ; s#fib_notifier_ops * ipmr_notifier_ops ; unsigned int ipmr_seq ; t#atomic_t rt_genid ; t#siphash_key_t ip_id_key ; }
s#netns_ipv6 struct netns_ipv6 { s#netns_sysctl_ipv6 sysctl ; s#ipv6_devconf * devconf_all ; s#ipv6_devconf * devconf_dflt ; s#inet_peer_base * peers ; s#fqdir * fqdir ; s#xt_table * ip6table_filter ; s#xt_table * ip6table_mangle ; s#xt_table * ip6table_raw ; s#xt_table * ip6table_security ; s#xt_table * ip6table_nat ; s#fib6_info * fib6_null_entry ; s#rt6_info * ip6_null_entry ; s#rt6_statistics * rt6_stats ; s#timer_list ip6_fib_timer ; s#hlist_head * fib_table_hash ; s#fib6_table * fib6_main_tbl ; s#list_head fib6_walkers ; s#dst_ops ip6_dst_ops ; t#rwlock_t fib6_walker_lock ; t#spinlock_t fib6_gc_lock ; unsigned int ip6_rt_gc_expire ; unsigned long ip6_rt_last_gc ; unsigned int fib6_rules_require_fldissect ; t#bool fib6_has_custom_rules ; s#rt6_info * ip6_prohibit_entry ; s#rt6_info * ip6_blk_hole_entry ; s#fib6_table * fib6_local_tbl ; s#fib_rules_ops * fib6_rules_ops ; s#sock * * icmp_sk ; s#sock * ndisc_sk ; s#sock * tcp_sk ; s#sock * igmp_sk ; s#sock * mc_autojoin_sk ; s#list_head mr6_tables ; s#fib_rules_ops * mr6_rules_ops ; t#atomic_t dev_addr_genid ; t#atomic_t fib6_sernum ; s#seg6_pernet_data * seg6_data ; s#fib_notifier_ops * notifier_ops ; s#fib_notifier_ops * ip6mr_notifier_ops ; unsigned int ipmr_seq ; struct { s#hlist_head head ; t#spinlock_t lock ; t#u32 seq ; } ip6addrlbl_table ; }
s#netns_ipvs@44694bf2 struct netns_ipvs { UNKNOWN }
s#netns_ipvs@c05a8aa4 struct netns_ipvs { int gen ; int enable ; s#hlist_head rs_table [ ( 1 << 4 ) ] ; s#list_head app_list ; s#ip_vs_proto_data * proto_data_table [ 32 ] ; s#list_head tcp_apps [ ( 1 << 4 ) ] ; s#list_head udp_apps [ ( 1 << 4 ) ] ; s#list_head sctp_apps [ ( 1 << 4 ) ] ; t#atomic_t conn_count ; s#ip_vs_stats tot_stats ; int num_services ; s#list_head dest_trash ; t#spinlock_t dest_trash_lock ; s#timer_list dest_trash_timer ; t#atomic_t ftpsvc_counter ; t#atomic_t nullsvc_counter ; t#atomic_t conn_out_counter ; s#delayed_work defense_work ; int drop_rate ; int drop_counter ; int old_secure_tcp ; t#atomic_t dropentry ; t#spinlock_t dropentry_lock ; t#spinlock_t droppacket_lock ; t#spinlock_t securetcp_lock ; s#ctl_table_header * sysctl_hdr ; s#ctl_table * sysctl_tbl ; int sysctl_amemthresh ; int sysctl_am_droprate ; int sysctl_drop_entry ; int sysctl_drop_packet ; int sysctl_secure_tcp ; int sysctl_conntrack ; int sysctl_snat_reroute ; int sysctl_sync_ver ; int sysctl_sync_ports ; int sysctl_sync_persist_mode ; unsigned long sysctl_sync_qlen_max ; int sysctl_sync_sock_size ; int sysctl_cache_bypass ; int sysctl_expire_nodest_conn ; int sysctl_sloppy_tcp ; int sysctl_sloppy_sctp ; int sysctl_expire_quiescent_template ; int sysctl_sync_threshold [ 2 ] ; unsigned int sysctl_sync_refresh_period ; int sysctl_sync_retries ; int sysctl_nat_icmp_send ; int sysctl_pmtu_disc ; int sysctl_backup_only ; int sysctl_conn_reuse_mode ; int sysctl_schedule_icmp ; int sysctl_ignore_tunneled ; int sysctl_lblc_expiration ; s#ctl_table_header * lblc_ctl_header ; s#ctl_table * lblc_ctl_table ; int sysctl_lblcr_expiration ; s#ctl_table_header * lblcr_ctl_header ; s#ctl_table * lblcr_ctl_table ; s#list_head est_list ; t#spinlock_t est_lock ; s#timer_list est_timer ; t#spinlock_t sync_lock ; s#ipvs_master_sync_state * ms ; t#spinlock_t sync_buff_lock ; s#ip_vs_sync_thread_data * master_tinfo ; s#ip_vs_sync_thread_data * backup_tinfo ; int threads_mask ; volatile int sync_state ; s#mutex sync_mutex ; s#ipvs_sync_daemon_cfg mcfg ; s#ipvs_sync_daemon_cfg bcfg ; s#net * net ; unsigned int mixed_address_family_dests ; }
s#netns_mib struct netns_mib { __typeof__ ( s#tcp_mib ) * tcp_statistics ; __typeof__ ( s#ipstats_mib ) * ip_statistics ; __typeof__ ( s#linux_mib ) * net_statistics ; __typeof__ ( s#udp_mib ) * udp_statistics ; __typeof__ ( s#udp_mib ) * udplite_statistics ; __typeof__ ( s#icmp_mib ) * icmp_statistics ; __typeof__ ( s#icmpmsg_mib ) * icmpmsg_statistics ; s#proc_dir_entry * proc_net_devsnmp6 ; __typeof__ ( s#udp_mib ) * udp_stats_in6 ; __typeof__ ( s#udp_mib ) * udplite_stats_in6 ; __typeof__ ( s#ipstats_mib ) * ipv6_statistics ; __typeof__ ( s#icmpv6_mib ) * icmpv6_statistics ; __typeof__ ( s#icmpv6msg_mib ) * icmpv6msg_statistics ; __typeof__ ( s#linux_xfrm_mib ) * xfrm_statistics ; }
s#netns_mpls struct netns_mpls { int ip_ttl_propagate ; int default_ttl ; t#size_t platform_labels ; s#mpls_route * * platform_label ; s#ctl_table_header * ctl ; }
s#netns_nexthop struct netns_nexthop { s#rb_root rb_root ; s#hlist_head * devhash ; unsigned int seq ; t#u32 last_id_allocated ; }
s#netns_nf struct netns_nf { s#proc_dir_entry * proc_netfilter ; const s#nf_queue_handler * queue_handler ; const s#nf_logger * nf_loggers [ E#NFPROTO_NUMPROTO ] ; s#ctl_table_header * nf_log_dir_header ; s#nf_hook_entries * hooks_ipv4 [ E#NF_INET_NUMHOOKS ] ; s#nf_hook_entries * hooks_ipv6 [ E#NF_INET_NUMHOOKS ] ; s#nf_hook_entries * hooks_arp [ 3 ] ; s#nf_hook_entries * hooks_bridge [ E#NF_INET_NUMHOOKS ] ; t#bool defrag_ipv4 ; t#bool defrag_ipv6 ; }
s#netns_nf_frag struct netns_nf_frag { s#fqdir * fqdir ; }
s#netns_nftables struct netns_nftables { s#list_head tables ; s#list_head commit_list ; s#list_head module_list ; s#mutex commit_mutex ; unsigned int base_seq ; t#u8 gencursor ; t#u8 validate_state ; }
s#netns_packet struct netns_packet { s#mutex sklist_lock ; s#hlist_head sklist ; }
s#netns_sctp struct netns_sctp { __typeof__ ( s#sctp_mib ) * sctp_statistics ; s#proc_dir_entry * proc_net_sctp ; s#ctl_table_header * sysctl_header ; s#sock * ctl_sock ; s#list_head local_addr_list ; s#list_head addr_waitq ; s#timer_list addr_wq_timer ; s#list_head auto_asconf_splist ; t#spinlock_t addr_wq_lock ; t#spinlock_t local_addr_lock ; unsigned int rto_initial ; unsigned int rto_min ; unsigned int rto_max ; int rto_alpha ; int rto_beta ; int max_burst ; int cookie_preserve_enable ; char * sctp_hmac_alg ; unsigned int valid_cookie_life ; unsigned int sack_timeout ; unsigned int hb_interval ; int max_retrans_association ; int max_retrans_path ; int max_retrans_init ; int pf_retrans ; int pf_enable ; int sndbuf_policy ; int rcvbuf_policy ; int default_auto_asconf ; int addip_enable ; int addip_noauth ; int prsctp_enable ; int reconf_enable ; int auth_enable ; int intl_enable ; int ecn_enable ; int scope_policy ; int rwnd_upd_shift ; unsigned long max_autoclose ; }
s#netns_sysctl_ipv6 struct netns_sysctl_ipv6 { s#ctl_table_header * hdr ; s#ctl_table_header * route_hdr ; s#ctl_table_header * icmp_hdr ; s#ctl_table_header * frags_hdr ; s#ctl_table_header * xfrm6_hdr ; int bindv6only ; int flush_delay ; int ip6_rt_max_size ; int ip6_rt_gc_min_interval ; int ip6_rt_gc_timeout ; int ip6_rt_gc_interval ; int ip6_rt_gc_elasticity ; int ip6_rt_mtu_expires ; int ip6_rt_min_advmss ; int multipath_hash_policy ; int flowlabel_consistency ; int auto_flowlabels ; int icmpv6_time ; int icmpv6_echo_ignore_all ; int icmpv6_echo_ignore_multicast ; int icmpv6_echo_ignore_anycast ; unsigned long icmpv6_ratemask [ ( ( ( 255 + 1 ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long * icmpv6_ratemask_ptr ; int anycast_src_echo_reply ; int ip_nonlocal_bind ; int fwmark_reflect ; int idgen_retries ; int idgen_delay ; int flowlabel_state_ranges ; int flowlabel_reflect ; int max_dst_opts_cnt ; int max_hbh_opts_cnt ; int max_dst_opts_len ; int max_hbh_opts_len ; int seg6_flowlabel ; t#bool skip_notify_on_dev_down ; }
s#netns_sysctl_lowpan struct netns_sysctl_lowpan { s#ctl_table_header * frags_hdr ; }
s#netns_unix struct netns_unix { int sysctl_max_dgram_qlen ; s#ctl_table_header * ctl ; }
s#netns_xdp struct netns_xdp { s#mutex lock ; s#hlist_head list ; }
s#netns_xfrm struct netns_xfrm { s#list_head state_all ; s#hlist_head * state_bydst ; s#hlist_head * state_bysrc ; s#hlist_head * state_byspi ; unsigned int state_hmask ; unsigned int state_num ; s#work_struct state_hash_work ; s#list_head policy_all ; s#hlist_head * policy_byidx ; unsigned int policy_idx_hmask ; s#hlist_head policy_inexact [ E#XFRM_POLICY_MAX ] ; s#xfrm_policy_hash policy_bydst [ E#XFRM_POLICY_MAX ] ; unsigned int policy_count [ E#XFRM_POLICY_MAX * 2 ] ; s#work_struct policy_hash_work ; s#xfrm_policy_hthresh policy_hthresh ; s#list_head inexact_bins ; s#sock * nlsk ; s#sock * nlsk_stash ; t#u32 sysctl_aevent_etime ; t#u32 sysctl_aevent_rseqth ; int sysctl_larval_drop ; t#u32 sysctl_acq_expires ; s#ctl_table_header * sysctl_hdr ; s#dst_ops xfrm4_dst_ops ; s#dst_ops xfrm6_dst_ops ; t#spinlock_t xfrm_state_lock ; t#spinlock_t xfrm_policy_lock ; s#mutex xfrm_cfg_mutex ; }
s#netns_xt struct netns_xt { s#list_head tables [ E#NFPROTO_NUMPROTO ] ; t#bool notrack_deprecated_warning ; t#bool clusterip_deprecated_warning ; s#ebt_table * broute_table ; s#ebt_table * frame_filter ; s#ebt_table * frame_nat ; }
s#netpoll struct netpoll { s#net_device * dev ; char dev_name [ 16 ] ; const char * name ; u#inet_addr local_ip , remote_ip ; t#bool ipv6 ; t#u16 local_port , remote_port ; t#u8 remote_mac [ 6 ] ; }
s#netpoll_info@1c74e1ed struct netpoll_info { UNKNOWN }
s#netpoll_info@98bfee78 struct netpoll_info { t#refcount_t refcnt ; s#semaphore dev_lock ; s#sk_buff_head txq ; s#delayed_work tx_work ; s#netpoll * netpoll ; s#callback_head rcu ; }
s#netprio_map struct netprio_map { s#callback_head rcu ; t#u32 priomap_len ; t#u32 priomap [ ] ; }
s#new_utsname struct new_utsname { char sysname [ 64 + 1 ] ; char nodename [ 64 + 1 ] ; char release [ 64 + 1 ] ; char version [ 64 + 1 ] ; char machine [ 64 + 1 ] ; char domainname [ 64 + 1 ] ; }
s#nexthop@f775ce4b struct nexthop { s#rb_node rb_node ; s#list_head fi_list ; s#list_head f6i_list ; s#list_head grp_list ; s#net * net ; t#u32 id ; t#u8 protocol ; t#u8 nh_flags ; t#bool is_group ; t#refcount_t refcnt ; s#callback_head rcu ; union { s#nh_info * nh_info ; s#nh_group * nh_grp ; } ; }
s#nexthop@fa8f6e55 struct nexthop { UNKNOWN }
s#nf_conn@272c8dff struct nf_conn { s#nf_conntrack ct_general ; t#spinlock_t lock ; t#u32 timeout ; s#nf_conntrack_zone zone ; s#nf_conntrack_tuple_hash tuplehash [ E#IP_CT_DIR_MAX ] ; unsigned long status ; t#u16 cpu ; t#possible_net_t ct_net ; s#hlist_node nat_bysource ; struct { } __nfct_init_offset ; s#nf_conn * master ; t#u_int32_t mark ; t#u_int32_t secmark ; s#nf_ct_ext * ext ; u#nf_conntrack_proto proto ; }
s#nf_conn@97995174 struct nf_conn { UNKNOWN }
s#nf_conntrack struct nf_conntrack { t#atomic_t use ; }
s#nf_conntrack_expect struct nf_conntrack_expect { s#hlist_node lnode ; s#hlist_node hnode ; s#nf_conntrack_tuple tuple ; s#nf_conntrack_tuple_mask mask ; void ( * expectfn ) ( s#nf_conn * , s#nf_conntrack_expect * ) ; s#nf_conntrack_helper * helper ; s#nf_conn * master ; s#timer_list timeout ; t#refcount_t use ; unsigned int flags ; unsigned int class ; u#nf_inet_addr saved_addr ; u#nf_conntrack_man_proto saved_proto ; e#ip_conntrack_dir dir ; s#callback_head rcu ; }
s#nf_conntrack_expect_policy struct nf_conntrack_expect_policy { unsigned int max_expected ; unsigned int timeout ; char name [ 16 ] ; }
s#nf_conntrack_helper@45a3bca6 struct nf_conntrack_helper { s#hlist_node hnode ; char name [ 16 ] ; t#refcount_t refcnt ; s#module * me ; const s#nf_conntrack_expect_policy * expect_policy ; s#nf_conntrack_tuple tuple ; int ( * help ) ( s#sk_buff * , unsigned int , s#nf_conn * , e#ip_conntrack_info ) ; void ( * destroy ) ( s#nf_conn * ) ; int ( * from_nlattr ) ( s#nlattr * , s#nf_conn * ) ; int ( * to_nlattr ) ( s#sk_buff * , const s#nf_conn * ) ; unsigned int expect_class_max ; unsigned int flags ; unsigned int queue_num ; t#u16 data_len ; char nat_mod_name [ 16 ] ; }
s#nf_conntrack_helper@a2caf207 struct nf_conntrack_helper { UNKNOWN }
s#nf_conntrack_man struct nf_conntrack_man { u#nf_inet_addr u3 ; u#nf_conntrack_man_proto u ; t#u_int16_t l3num ; }
s#nf_conntrack_tuple@20c83093 struct nf_conntrack_tuple { UNKNOWN }
s#nf_conntrack_tuple@2612735a struct nf_conntrack_tuple { s#nf_conntrack_man src ; struct { u#nf_inet_addr u3 ; union { t#__be16 all ; struct { t#__be16 port ; } tcp ; struct { t#__be16 port ; } udp ; struct { t#u_int8_t type , code ; } icmp ; struct { t#__be16 port ; } dccp ; struct { t#__be16 port ; } sctp ; struct { t#__be16 key ; } gre ; } u ; t#u_int8_t protonum ; t#u_int8_t dir ; } dst ; }
s#nf_conntrack_tuple_hash struct nf_conntrack_tuple_hash { s#hlist_nulls_node hnnode ; s#nf_conntrack_tuple tuple ; }
s#nf_conntrack_tuple_mask struct nf_conntrack_tuple_mask { struct { u#nf_inet_addr u3 ; u#nf_conntrack_man_proto u ; } src ; }
s#nf_conntrack_zone struct nf_conntrack_zone { t#u16 id ; t#u8 flags ; t#u8 dir ; }
s#nf_ct_dccp struct nf_ct_dccp { t#u_int8_t role [ E#IP_CT_DIR_MAX ] ; t#u_int8_t state ; t#u_int8_t last_pkt ; t#u_int8_t last_dir ; t#u_int64_t handshake_seq ; }
s#nf_ct_event struct nf_ct_event { s#nf_conn * ct ; t#u32 portid ; int report ; }
s#nf_ct_event_notifier@0c2087cc struct nf_ct_event_notifier { int ( * fcn ) ( unsigned int , s#nf_ct_event * ) ; }
s#nf_ct_event_notifier@6bfe66ad struct nf_ct_event_notifier { UNKNOWN }
s#nf_ct_ext struct nf_ct_ext { s#callback_head rcu ; t#u8 offset [ E#NF_CT_EXT_NUM ] ; t#u8 len ; char data [ 0 ] ; }
s#nf_ct_gre struct nf_ct_gre { unsigned int stream_timeout ; unsigned int timeout ; }
s#nf_ct_udp struct nf_ct_udp { unsigned long stream_ts ; }
s#nf_dccp_net struct nf_dccp_net { int dccp_loose ; unsigned int dccp_timeout [ ( E#__CT_DCCP_MAX - 1 ) + 1 ] ; }
s#nf_exp_event struct nf_exp_event { s#nf_conntrack_expect * exp ; t#u32 portid ; int report ; }
s#nf_exp_event_notifier@1c74d879 struct nf_exp_event_notifier { UNKNOWN }
s#nf_exp_event_notifier@ebd03d31 struct nf_exp_event_notifier { int ( * fcn ) ( unsigned int , s#nf_exp_event * ) ; }
s#nf_generic_net struct nf_generic_net { unsigned int timeout ; }
s#nf_gre_net struct nf_gre_net { s#list_head keymap_list ; unsigned int timeouts [ E#GRE_CT_MAX ] ; }
s#nf_hook_entries@68c7f280 struct nf_hook_entries { UNKNOWN }
s#nf_hook_entries@eb89433b struct nf_hook_entries { t#u16 num_hook_entries ; s#nf_hook_entry hooks [ ] ; }
s#nf_hook_entry struct nf_hook_entry { t#nf_hookfn * hook ; void * priv ; }
s#nf_hook_ops struct nf_hook_ops { t#nf_hookfn * hook ; s#net_device * dev ; void * priv ; t#u_int8_t pf ; unsigned int hooknum ; int priority ; }
s#nf_hook_state struct nf_hook_state { unsigned int hook ; t#u_int8_t pf ; s#net_device * in ; s#net_device * out ; s#sock * sk ; s#net * net ; int ( * okfn ) ( s#net * , s#sock * , s#sk_buff * ) ; }
s#nf_icmp_net struct nf_icmp_net { unsigned int timeout ; }
s#nf_ip_net struct nf_ip_net { s#nf_generic_net generic ; s#nf_tcp_net tcp ; s#nf_udp_net udp ; s#nf_icmp_net icmp ; s#nf_icmp_net icmpv6 ; s#nf_dccp_net dccp ; s#nf_sctp_net sctp ; s#nf_gre_net gre ; }
s#nf_logger@bdabd2f7 struct nf_logger { UNKNOWN }
s#nf_logger@d81fb05a struct nf_logger { char * name ; e#nf_log_type type ; t#nf_logfn * logfn ; s#module * me ; }
s#nf_loginfo struct nf_loginfo { t#u_int8_t type ; union { struct { t#u_int32_t copy_len ; t#u_int16_t group ; t#u_int16_t qthreshold ; t#u_int16_t flags ; } ulog ; struct { t#u_int8_t level ; t#u_int8_t logflags ; } log ; } u ; }
s#nf_queue_entry struct nf_queue_entry { s#list_head list ; s#sk_buff * skb ; unsigned int id ; unsigned int hook_index ; s#nf_hook_state state ; t#u16 size ; }
s#nf_queue_handler@e8c11dbf struct nf_queue_handler { int ( * outfn ) ( s#nf_queue_entry * , unsigned int ) ; void ( * nf_hook_drop ) ( s#net * ) ; }
s#nf_queue_handler@ee42ac91 struct nf_queue_handler { UNKNOWN }
s#nf_sctp_net struct nf_sctp_net { unsigned int timeouts [ E#SCTP_CONNTRACK_MAX ] ; }
s#nf_tcp_net struct nf_tcp_net { unsigned int timeouts [ E#TCP_CONNTRACK_TIMEOUT_MAX ] ; int tcp_loose ; int tcp_be_liberal ; int tcp_max_retrans ; }
s#nf_udp_net struct nf_udp_net { unsigned int timeouts [ E#UDP_CT_MAX ] ; }
s#nfs41_impl_id struct nfs41_impl_id { char domain [ 1024 + 1 ] ; char name [ 1024 + 1 ] ; s#nfstime4 date ; }
s#nfs41_server_owner struct nfs41_server_owner { t#uint64_t minor_id ; t#uint32_t major_id_sz ; char major_id [ 1024 ] ; }
s#nfs41_server_scope struct nfs41_server_scope { t#uint32_t server_scope_sz ; char server_scope [ 1024 ] ; }
s#nfs42_layoutstat_args struct nfs42_layoutstat_args { s#nfs4_sequence_args seq_args ; s#nfs_fh * fh ; s#inode * inode ; t#nfs4_stateid stateid ; int num_dev ; s#nfs42_layoutstat_devinfo * devinfo ; }
s#nfs42_layoutstat_devinfo struct nfs42_layoutstat_devinfo { s#nfs4_deviceid dev_id ; t#__u64 offset ; t#__u64 length ; t#__u64 read_count ; t#__u64 read_bytes ; t#__u64 write_count ; t#__u64 write_bytes ; t#__u32 layout_type ; s#nfs4_xdr_opaque_data ld_private ; }
s#nfs4_change_info struct nfs4_change_info { t#u32 atomic ; t#u64 before ; t#u64 after ; }
s#nfs4_channel_attrs struct nfs4_channel_attrs { t#u32 max_rqst_sz ; t#u32 max_resp_sz ; t#u32 max_resp_sz_cached ; t#u32 max_ops ; t#u32 max_reqs ; }
s#nfs4_deviceid struct nfs4_deviceid { char data [ 16 ] ; }
s#nfs4_deviceid_node struct nfs4_deviceid_node { s#hlist_node node ; s#hlist_node tmpnode ; const s#pnfs_layoutdriver_type * ld ; const s#nfs_client * nfs_client ; unsigned long flags ; unsigned long timestamp_unavailable ; s#nfs4_deviceid deviceid ; s#callback_head rcu ; t#atomic_t ref ; }
s#nfs4_fs_location struct nfs4_fs_location { unsigned int nservers ; s#nfs4_string servers [ 10 ] ; s#nfs4_pathname rootpath ; }
s#nfs4_fs_locations struct nfs4_fs_locations { s#nfs_fattr fattr ; const s#nfs_server * server ; s#nfs4_pathname fs_path ; int nlocations ; s#nfs4_fs_location locations [ 10 ] ; }
s#nfs4_label struct nfs4_label { t#uint32_t lfs ; t#uint32_t pi ; t#u32 len ; char * label ; }
s#nfs4_layoutcommit_args struct nfs4_layoutcommit_args { s#nfs4_sequence_args seq_args ; t#nfs4_stateid stateid ; t#__u64 lastbytewritten ; s#inode * inode ; const t#u32 * bitmask ; t#size_t layoutupdate_len ; s#page * layoutupdate_page ; s#page * * layoutupdate_pages ; t#__be32 * start_p ; }
s#nfs4_layoutcommit_data struct nfs4_layoutcommit_data { s#rpc_task task ; s#nfs_fattr fattr ; s#list_head lseg_list ; const s#cred * cred ; s#inode * inode ; s#nfs4_layoutcommit_args args ; s#nfs4_layoutcommit_res res ; }
s#nfs4_layoutcommit_res struct nfs4_layoutcommit_res { s#nfs4_sequence_res seq_res ; s#nfs_fattr * fattr ; const s#nfs_server * server ; int status ; }
s#nfs4_layoutdriver_data struct nfs4_layoutdriver_data { s#page * * pages ; t#__u32 pglen ; t#__u32 len ; }
s#nfs4_layoutget_res struct nfs4_layoutget_res { s#nfs4_sequence_res seq_res ; int status ; t#__u32 return_on_close ; s#pnfs_layout_range range ; t#__u32 type ; t#nfs4_stateid stateid ; s#nfs4_layoutdriver_data * layoutp ; }
s#nfs4_layoutreturn_args struct nfs4_layoutreturn_args { s#nfs4_sequence_args seq_args ; s#pnfs_layout_hdr * layout ; s#inode * inode ; s#pnfs_layout_range range ; t#nfs4_stateid stateid ; t#__u32 layout_type ; s#nfs4_xdr_opaque_data * ld_private ; }
s#nfs4_lock_info struct nfs4_lock_info { s#nfs4_lock_state * owner ; }
s#nfs4_lock_state@2f7636cb struct nfs4_lock_state { s#list_head ls_locks ; s#nfs4_state * ls_state ; unsigned long ls_flags ; s#nfs_seqid_counter ls_seqid ; t#nfs4_stateid ls_stateid ; t#refcount_t ls_count ; t#fl_owner_t ls_owner ; }
s#nfs4_lock_state@47003d93 struct nfs4_lock_state { UNKNOWN }
s#nfs4_mig_recovery_ops struct nfs4_mig_recovery_ops { int ( * get_locations ) ( s#inode * , s#nfs4_fs_locations * , s#page * , const s#cred * ) ; int ( * fsid_present ) ( s#inode * , const s#cred * ) ; }
s#nfs4_minor_version_ops struct nfs4_minor_version_ops { t#u32 minor_version ; unsigned init_caps ; int ( * init_client ) ( s#nfs_client * ) ; void ( * shutdown_client ) ( s#nfs_client * ) ; t#bool ( * match_stateid ) ( const t#nfs4_stateid * , const t#nfs4_stateid * ) ; int ( * find_root_sec ) ( s#nfs_server * , s#nfs_fh * , s#nfs_fsinfo * ) ; void ( * free_lock_state ) ( s#nfs_server * , s#nfs4_lock_state * ) ; int ( * test_and_free_expired ) ( s#nfs_server * , t#nfs4_stateid * , const s#cred * ) ; s#nfs_seqid * ( * alloc_seqid ) ( s#nfs_seqid_counter * , t#gfp_t ) ; void ( * session_trunk ) ( s#rpc_clnt * , s#rpc_xprt * , void * ) ; const s#rpc_call_ops * call_sync_ops ; const s#nfs4_state_recovery_ops * reboot_recovery_ops ; const s#nfs4_state_recovery_ops * nograce_recovery_ops ; const s#nfs4_state_maintenance_ops * state_renewal_ops ; const s#nfs4_mig_recovery_ops * mig_recovery_ops ; }
s#nfs4_pathname struct nfs4_pathname { unsigned int ncomponents ; s#nfs4_string components [ 512 ] ; }
s#nfs4_sequence_args struct nfs4_sequence_args { s#nfs4_slot * sa_slot ; t#u8 sa_cache_this : 1 , sa_privileged : 1 ; }
s#nfs4_sequence_res struct nfs4_sequence_res { s#nfs4_slot * sr_slot ; unsigned long sr_timestamp ; int sr_status ; t#u32 sr_status_flags ; t#u32 sr_highest_slotid ; t#u32 sr_target_highest_slotid ; }
s#nfs4_session@589de3a0 struct nfs4_session { UNKNOWN }
s#nfs4_session@f62f5117 struct nfs4_session { s#nfs4_sessionid sess_id ; t#u32 flags ; unsigned long session_state ; t#u32 hash_alg ; t#u32 ssv_len ; s#nfs4_channel_attrs fc_attrs ; s#nfs4_slot_table fc_slot_table ; s#nfs4_channel_attrs bc_attrs ; s#nfs4_slot_table bc_slot_table ; s#nfs_client * clp ; }
s#nfs4_sessionid struct nfs4_sessionid { unsigned char data [ 16 ] ; }
s#nfs4_slot@8094e42f struct nfs4_slot { s#nfs4_slot_table * table ; s#nfs4_slot * next ; unsigned long generation ; t#u32 slot_nr ; t#u32 seq_nr ; t#u32 seq_nr_last_acked ; t#u32 seq_nr_highest_sent ; unsigned int privileged : 1 , seq_done : 1 ; }
s#nfs4_slot@ca1d1edf struct nfs4_slot { UNKNOWN }
s#nfs4_slot_table@7944e459 struct nfs4_slot_table { UNKNOWN }
s#nfs4_slot_table@9b98b70b struct nfs4_slot_table { s#nfs4_session * session ; s#nfs4_slot * slots ; unsigned long used_slots [ ( ( ( ( 1024U ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; t#spinlock_t slot_tbl_lock ; s#rpc_wait_queue slot_tbl_waitq ; t#wait_queue_head_t slot_waitq ; t#u32 max_slots ; t#u32 max_slotid ; t#u32 highest_used_slotid ; t#u32 target_highest_slotid ; t#u32 server_highest_slotid ; t#s32 d_target_highest_slotid ; t#s32 d2_target_highest_slotid ; unsigned long generation ; s#completion complete ; unsigned long slot_tbl_state ; }
s#nfs4_state struct nfs4_state { s#list_head open_states ; s#list_head inode_states ; s#list_head lock_states ; s#nfs4_state_owner * owner ; s#inode * inode ; unsigned long flags ; t#spinlock_t state_lock ; t#seqlock_t seqlock ; t#nfs4_stateid stateid ; t#nfs4_stateid open_stateid ; unsigned int n_rdonly ; unsigned int n_wronly ; unsigned int n_rdwr ; t#fmode_t state ; t#refcount_t count ; t#wait_queue_head_t waitq ; s#callback_head callback_head ; }
s#nfs4_state_maintenance_ops struct nfs4_state_maintenance_ops { int ( * sched_state_renewal ) ( s#nfs_client * , const s#cred * , unsigned ) ; const s#cred * ( * get_state_renewal_cred ) ( s#nfs_client * ) ; int ( * renew_lease ) ( s#nfs_client * , const s#cred * ) ; }
s#nfs4_state_owner struct nfs4_state_owner { s#nfs_server * so_server ; s#list_head so_lru ; unsigned long so_expires ; s#rb_node so_server_node ; const s#cred * so_cred ; t#spinlock_t so_lock ; t#atomic_t so_count ; unsigned long so_flags ; s#list_head so_states ; s#nfs_seqid_counter so_seqid ; t#seqcount_t so_reclaim_seqcount ; s#mutex so_delegreturn_mutex ; }
s#nfs4_state_recovery_ops struct nfs4_state_recovery_ops { int owner_flag_bit ; int state_flag_bit ; int ( * recover_open ) ( s#nfs4_state_owner * , s#nfs4_state * ) ; int ( * recover_lock ) ( s#nfs4_state * , s#file_lock * ) ; int ( * establish_clid ) ( s#nfs_client * , const s#cred * ) ; int ( * reclaim_complete ) ( s#nfs_client * , const s#cred * ) ; int ( * detect_trunking ) ( s#nfs_client * , s#nfs_client * * , const s#cred * ) ; }
s#nfs4_stateid_struct struct nfs4_stateid_struct { union { char data [ ( 4 + 12 ) ] ; struct { t#__be32 seqid ; char other [ 12 ] ; } __attribute__ ( ( packed ) ) ; } ; enum { NFS4_INVALID_STATEID_TYPE = 0 , NFS4_SPECIAL_STATEID_TYPE , NFS4_OPEN_STATEID_TYPE , NFS4_LOCK_STATEID_TYPE , NFS4_DELEGATION_STATEID_TYPE , NFS4_LAYOUT_STATEID_TYPE , NFS4_PNFS_DS_STATEID_TYPE , NFS4_REVOKED_STATEID_TYPE , } type ; }
s#nfs4_string struct nfs4_string { unsigned int len ; char * data ; }
s#nfs4_threshold struct nfs4_threshold { t#__u32 bm ; t#__u32 l_type ; t#__u64 rd_sz ; t#__u64 wr_sz ; t#__u64 rd_io_sz ; t#__u64 wr_io_sz ; }
s#nfs4_xdr_opaque_data struct nfs4_xdr_opaque_data { const s#nfs4_xdr_opaque_ops * ops ; void * data ; }
s#nfs4_xdr_opaque_ops struct nfs4_xdr_opaque_ops { void ( * encode ) ( s#xdr_stream * , const void * , const s#nfs4_xdr_opaque_data * ) ; void ( * free ) ( s#nfs4_xdr_opaque_data * ) ; }
s#nfs_access_entry struct nfs_access_entry { s#rb_node rb_node ; s#list_head lru ; const s#cred * cred ; t#__u32 mask ; s#callback_head callback_head ; }
s#nfs_auth_info struct nfs_auth_info { unsigned int flavor_len ; t#rpc_authflavor_t flavors [ 12 ] ; }
s#nfs_client struct nfs_client { t#refcount_t cl_count ; t#atomic_t cl_mds_count ; int cl_cons_state ; unsigned long cl_res_state ; unsigned long cl_flags ; s#__kernel_sockaddr_storage cl_addr ; t#size_t cl_addrlen ; char * cl_hostname ; char * cl_acceptor ; s#list_head cl_share_link ; s#list_head cl_superblocks ; s#rpc_clnt * cl_rpcclient ; const s#nfs_rpc_ops * rpc_ops ; int cl_proto ; s#nfs_subversion * cl_nfs_mod ; t#u32 cl_minorversion ; unsigned int cl_nconnect ; const char * cl_principal ; s#list_head cl_ds_clients ; t#u64 cl_clientid ; t#nfs4_verifier cl_confirm ; unsigned long cl_state ; t#spinlock_t cl_lock ; unsigned long cl_lease_time ; unsigned long cl_last_renewal ; s#delayed_work cl_renewd ; s#rpc_wait_queue cl_rpcwaitq ; s#idmap * cl_idmap ; const char * cl_owner_id ; t#u32 cl_cb_ident ; const s#nfs4_minor_version_ops * cl_mvops ; unsigned long cl_mig_gen ; s#nfs4_slot_table * cl_slot_tbl ; t#u32 cl_seqid ; t#u32 cl_exchange_flags ; s#nfs4_session * cl_session ; t#bool cl_preserve_clid ; s#nfs41_server_owner * cl_serverowner ; s#nfs41_server_scope * cl_serverscope ; s#nfs41_impl_id * cl_implid ; unsigned long cl_sp4_flags ; t#wait_queue_head_t cl_lock_waitq ; char cl_ipaddr [ 48 ] ; s#fscache_cookie * fscache ; s#net * cl_net ; s#list_head pending_cb_stateids ; }
s#nfs_client_initdata@7a5c196e struct nfs_client_initdata { UNKNOWN }
s#nfs_client_initdata@9a944736 struct nfs_client_initdata { unsigned long init_flags ; const char * hostname ; const s#sockaddr * addr ; const char * nodename ; const char * ip_addr ; t#size_t addrlen ; s#nfs_subversion * nfs_mod ; int proto ; t#u32 minorversion ; unsigned int nconnect ; s#net * net ; const s#rpc_timeout * timeparms ; const s#cred * cred ; }
s#nfs_clone_mount struct nfs_clone_mount { const s#super_block * sb ; const s#dentry * dentry ; s#nfs_fh * fh ; s#nfs_fattr * fattr ; char * hostname ; char * mnt_path ; s#sockaddr * addr ; t#size_t addrlen ; t#rpc_authflavor_t authflavor ; }
s#nfs_commit_completion_ops struct nfs_commit_completion_ops { void ( * completion ) ( s#nfs_commit_data * ) ; void ( * resched_write ) ( s#nfs_commit_info * , s#nfs_page * ) ; }
s#nfs_commit_data struct nfs_commit_data { s#rpc_task task ; s#inode * inode ; const s#cred * cred ; s#nfs_fattr fattr ; s#nfs_writeverf verf ; s#list_head pages ; s#list_head list ; s#nfs_direct_req * dreq ; s#nfs_commitargs args ; s#nfs_commitres res ; s#nfs_open_context * context ; s#pnfs_layout_segment * lseg ; s#nfs_client * ds_clp ; int ds_commit_index ; t#loff_t lwb ; const s#rpc_call_ops * mds_ops ; const s#nfs_commit_completion_ops * completion_ops ; int ( * commit_done_cb ) ( s#rpc_task * , s#nfs_commit_data * ) ; unsigned long flags ; }
s#nfs_commit_info struct nfs_commit_info { s#inode * inode ; s#nfs_mds_commit_info * mds ; s#pnfs_ds_commit_info * ds ; s#nfs_direct_req * dreq ; const s#nfs_commit_completion_ops * completion_ops ; }
s#nfs_commitargs struct nfs_commitargs { s#nfs4_sequence_args seq_args ; s#nfs_fh * fh ; t#__u64 offset ; t#__u32 count ; const t#u32 * bitmask ; }
s#nfs_commitres struct nfs_commitres { s#nfs4_sequence_res seq_res ; t#__u32 op_status ; s#nfs_fattr * fattr ; s#nfs_writeverf * verf ; const s#nfs_server * server ; }
s#nfs_direct_req struct nfs_direct_req { UNKNOWN }
s#nfs_entry struct nfs_entry { t#__u64 ino ; t#__u64 cookie , prev_cookie ; const char * name ; unsigned int len ; int eof ; s#nfs_fh * fh ; s#nfs_fattr * fattr ; s#nfs4_label * label ; unsigned char d_type ; s#nfs_server * server ; }
s#nfs_fattr struct nfs_fattr { unsigned int valid ; t#umode_t mode ; t#__u32 nlink ; t#kuid_t uid ; t#kgid_t gid ; t#dev_t rdev ; t#__u64 size ; union { struct { t#__u32 blocksize ; t#__u32 blocks ; } nfs2 ; struct { t#__u64 used ; } nfs3 ; } du ; s#nfs_fsid fsid ; t#__u64 fileid ; t#__u64 mounted_on_fileid ; s#timespec atime ; s#timespec mtime ; s#timespec ctime ; t#__u64 change_attr ; t#__u64 pre_change_attr ; t#__u64 pre_size ; s#timespec pre_mtime ; s#timespec pre_ctime ; unsigned long time_start ; unsigned long gencount ; s#nfs4_string * owner_name ; s#nfs4_string * group_name ; s#nfs4_threshold * mdsthreshold ; }
s#nfs_fh struct nfs_fh { unsigned short size ; unsigned char data [ 128 ] ; }
s#nfs_fscache_key@1f991df5 struct nfs_fscache_key { s#rb_node node ; s#nfs_client * nfs_client ; struct { struct { unsigned long s_flags ; } super ; struct { s#nfs_fsid fsid ; int flags ; unsigned int rsize ; unsigned int wsize ; unsigned int acregmin ; unsigned int acregmax ; unsigned int acdirmin ; unsigned int acdirmax ; } nfs_server ; struct { t#rpc_authflavor_t au_flavor ; } rpc_auth ; t#u8 uniq_len ; char uniquifier [ 0 ] ; } key ; }
s#nfs_fscache_key@78ab5e6f struct nfs_fscache_key { UNKNOWN }
s#nfs_fsid struct nfs_fsid { t#uint64_t major ; t#uint64_t minor ; }
s#nfs_fsinfo struct nfs_fsinfo { s#nfs_fattr * fattr ; t#__u32 rtmax ; t#__u32 rtpref ; t#__u32 rtmult ; t#__u32 wtmax ; t#__u32 wtpref ; t#__u32 wtmult ; t#__u32 dtpref ; t#__u64 maxfilesize ; s#timespec time_delta ; t#__u32 lease_time ; t#__u32 nlayouttypes ; t#__u32 layouttype [ 8 ] ; t#__u32 blksize ; t#__u32 clone_blksize ; }
s#nfs_fsstat struct nfs_fsstat { s#nfs_fattr * fattr ; t#__u64 tbytes ; t#__u64 fbytes ; t#__u64 abytes ; t#__u64 tfiles ; t#__u64 ffiles ; t#__u64 afiles ; }
s#nfs_io_completion struct nfs_io_completion { UNKNOWN }
s#nfs_iostats@34ae7666 struct nfs_iostats { UNKNOWN }
s#nfs_iostats@e9626d29 struct nfs_iostats { unsigned long long bytes [ E#__NFSIOS_BYTESMAX ] ; unsigned long long fscache [ E#__NFSIOS_FSCACHEMAX ] ; unsigned long events [ E#__NFSIOS_COUNTSMAX ] ; }
s#nfs_lock_context struct nfs_lock_context { t#refcount_t count ; s#list_head list ; s#nfs_open_context * open_context ; t#fl_owner_t lockowner ; t#atomic_t io_count ; s#callback_head callback_head ; }
s#nfs_lock_info struct nfs_lock_info { t#u32 state ; s#nlm_lockowner * owner ; s#list_head list ; }
s#nfs_mds_commit_info struct nfs_mds_commit_info { t#atomic_t rpcs_out ; t#atomic_long_t ncommit ; s#list_head list ; }
s#nfs_mount_info@c1cbec0d struct nfs_mount_info { UNKNOWN }
s#nfs_mount_info@cf2cf153 struct nfs_mount_info { void ( * fill_super ) ( s#super_block * , s#nfs_mount_info * ) ; int ( * set_security ) ( s#super_block * , s#dentry * , s#nfs_mount_info * ) ; s#nfs_parsed_mount_data * parsed ; s#nfs_clone_mount * cloned ; s#nfs_fh * mntfh ; }
s#nfs_open_context struct nfs_open_context { s#nfs_lock_context lock_context ; t#fl_owner_t flock_owner ; s#dentry * dentry ; const s#cred * cred ; s#rpc_cred * ll_cred ; s#nfs4_state * state ; t#fmode_t mode ; unsigned long flags ; int error ; s#list_head list ; s#nfs4_threshold * mdsthreshold ; s#callback_head callback_head ; }
s#nfs_page@8696d31d struct nfs_page { s#list_head wb_list ; s#page * wb_page ; s#nfs_lock_context * wb_lock_context ; unsigned long wb_index ; unsigned int wb_offset , wb_pgbase , wb_bytes ; s#kref wb_kref ; unsigned long wb_flags ; s#nfs_write_verifier wb_verf ; s#nfs_page * wb_this_page ; s#nfs_page * wb_head ; unsigned short wb_nio ; }
s#nfs_page@fe014214 struct nfs_page { UNKNOWN }
s#nfs_page_array struct nfs_page_array { s#page * * pagevec ; unsigned int npages ; s#page * page_array [ ( 8U ) ] ; }
s#nfs_pageio_descriptor struct nfs_pageio_descriptor { s#inode * pg_inode ; const s#nfs_pageio_ops * pg_ops ; const s#nfs_rw_ops * pg_rw_ops ; int pg_ioflags ; int pg_error ; const s#rpc_call_ops * pg_rpc_callops ; const s#nfs_pgio_completion_ops * pg_completion_ops ; s#pnfs_layout_segment * pg_lseg ; s#nfs_io_completion * pg_io_completion ; s#nfs_direct_req * pg_dreq ; unsigned int pg_bsize ; t#u32 pg_mirror_count ; s#nfs_pgio_mirror * pg_mirrors ; s#nfs_pgio_mirror pg_mirrors_static [ 1 ] ; s#nfs_pgio_mirror * pg_mirrors_dynamic ; t#u32 pg_mirror_idx ; unsigned short pg_maxretrans ; unsigned char pg_moreio : 1 ; }
s#nfs_pageio_ops struct nfs_pageio_ops { void ( * pg_init ) ( s#nfs_pageio_descriptor * , s#nfs_page * ) ; t#size_t ( * pg_test ) ( s#nfs_pageio_descriptor * , s#nfs_page * , s#nfs_page * ) ; int ( * pg_doio ) ( s#nfs_pageio_descriptor * ) ; unsigned int ( * pg_get_mirror_count ) ( s#nfs_pageio_descriptor * , s#nfs_page * ) ; void ( * pg_cleanup ) ( s#nfs_pageio_descriptor * ) ; }
s#nfs_parsed_mount_data struct nfs_parsed_mount_data { int flags ; unsigned int rsize , wsize ; unsigned int timeo , retrans ; unsigned int acregmin , acregmax , acdirmin , acdirmax ; unsigned int namlen ; unsigned int options ; unsigned int bsize ; s#nfs_auth_info auth_info ; t#rpc_authflavor_t selected_flavor ; char * client_address ; unsigned int version ; unsigned int minorversion ; char * fscache_uniq ; t#bool need_mount ; struct { s#__kernel_sockaddr_storage address ; t#size_t addrlen ; char * hostname ; t#u32 version ; int port ; unsigned short protocol ; } mount_server ; struct { s#__kernel_sockaddr_storage address ; t#size_t addrlen ; char * hostname ; char * export_path ; int port ; unsigned short protocol ; unsigned short nconnect ; } nfs_server ; void * lsm_opts ; s#net * net ; }
s#nfs_pathconf struct nfs_pathconf { s#nfs_fattr * fattr ; t#__u32 max_link ; t#__u32 max_namelen ; }
s#nfs_pgio_args struct nfs_pgio_args { s#nfs4_sequence_args seq_args ; s#nfs_fh * fh ; s#nfs_open_context * context ; s#nfs_lock_context * lock_context ; t#nfs4_stateid stateid ; t#__u64 offset ; t#__u32 count ; unsigned int pgbase ; s#page * * pages ; union { unsigned int replen ; struct { const t#u32 * bitmask ; e#nfs3_stable_how stable ; } ; } ; }
s#nfs_pgio_completion_ops struct nfs_pgio_completion_ops { void ( * error_cleanup ) ( s#list_head * , int ) ; void ( * init_hdr ) ( s#nfs_pgio_header * ) ; void ( * completion ) ( s#nfs_pgio_header * ) ; void ( * reschedule_io ) ( s#nfs_pgio_header * ) ; }
s#nfs_pgio_header struct nfs_pgio_header { s#inode * inode ; const s#cred * cred ; s#list_head pages ; s#nfs_page * req ; s#nfs_writeverf verf ; t#fmode_t rw_mode ; s#pnfs_layout_segment * lseg ; t#loff_t io_start ; const s#rpc_call_ops * mds_ops ; void ( * release ) ( s#nfs_pgio_header * ) ; const s#nfs_pgio_completion_ops * completion_ops ; const s#nfs_rw_ops * rw_ops ; s#nfs_io_completion * io_completion ; s#nfs_direct_req * dreq ; int pnfs_error ; int error ; unsigned int good_bytes ; unsigned long flags ; s#rpc_task task ; s#nfs_fattr fattr ; s#nfs_pgio_args args ; s#nfs_pgio_res res ; unsigned long timestamp ; int ( * pgio_done_cb ) ( s#rpc_task * , s#nfs_pgio_header * ) ; t#__u64 mds_offset ; s#nfs_page_array page_array ; s#nfs_client * ds_clp ; int ds_commit_idx ; int pgio_mirror_idx ; }
s#nfs_pgio_mirror struct nfs_pgio_mirror { s#list_head pg_list ; unsigned long pg_bytes_written ; t#size_t pg_count ; t#size_t pg_bsize ; unsigned int pg_base ; unsigned char pg_recoalesce : 1 ; }
s#nfs_pgio_res struct nfs_pgio_res { s#nfs4_sequence_res seq_res ; s#nfs_fattr * fattr ; t#__u32 count ; t#__u32 op_status ; union { struct { unsigned int replen ; int eof ; } ; struct { s#nfs_writeverf * verf ; const s#nfs_server * server ; } ; } ; }
s#nfs_removeargs struct nfs_removeargs { s#nfs4_sequence_args seq_args ; const s#nfs_fh * fh ; s#qstr name ; }
s#nfs_removeres struct nfs_removeres { s#nfs4_sequence_res seq_res ; s#nfs_server * server ; s#nfs_fattr * dir_attr ; s#nfs4_change_info cinfo ; }
s#nfs_renameargs struct nfs_renameargs { s#nfs4_sequence_args seq_args ; const s#nfs_fh * old_dir ; const s#nfs_fh * new_dir ; const s#qstr * old_name ; const s#qstr * new_name ; }
s#nfs_renamedata struct nfs_renamedata { s#nfs_renameargs args ; s#nfs_renameres res ; const s#cred * cred ; s#inode * old_dir ; s#dentry * old_dentry ; s#nfs_fattr old_fattr ; s#inode * new_dir ; s#dentry * new_dentry ; s#nfs_fattr new_fattr ; void ( * complete ) ( s#rpc_task * , s#nfs_renamedata * ) ; long timeout ; t#bool cancelled ; }
s#nfs_renameres struct nfs_renameres { s#nfs4_sequence_res seq_res ; s#nfs_server * server ; s#nfs4_change_info old_cinfo ; s#nfs_fattr * old_fattr ; s#nfs4_change_info new_cinfo ; s#nfs_fattr * new_fattr ; }
s#nfs_rpc_ops struct nfs_rpc_ops { t#u32 version ; const s#dentry_operations * dentry_ops ; const s#inode_operations * dir_inode_ops ; const s#inode_operations * file_inode_ops ; const s#file_operations * file_ops ; const s#nlmclnt_operations * nlmclnt_ops ; int ( * getroot ) ( s#nfs_server * , s#nfs_fh * , s#nfs_fsinfo * ) ; s#vfsmount * ( * submount ) ( s#nfs_server * , s#dentry * , s#nfs_fh * , s#nfs_fattr * ) ; s#dentry * ( * try_mount ) ( int , const char * , s#nfs_mount_info * , s#nfs_subversion * ) ; int ( * getattr ) ( s#nfs_server * , s#nfs_fh * , s#nfs_fattr * , s#nfs4_label * , s#inode * ) ; int ( * setattr ) ( s#dentry * , s#nfs_fattr * , s#iattr * ) ; int ( * lookup ) ( s#inode * , const s#qstr * , s#nfs_fh * , s#nfs_fattr * , s#nfs4_label * ) ; int ( * lookupp ) ( s#inode * , s#nfs_fh * , s#nfs_fattr * , s#nfs4_label * ) ; int ( * access ) ( s#inode * , s#nfs_access_entry * ) ; int ( * readlink ) ( s#inode * , s#page * , unsigned int , unsigned int ) ; int ( * create ) ( s#inode * , s#dentry * , s#iattr * , int ) ; int ( * remove ) ( s#inode * , s#dentry * ) ; void ( * unlink_setup ) ( s#rpc_message * , s#dentry * , s#inode * ) ; void ( * unlink_rpc_prepare ) ( s#rpc_task * , s#nfs_unlinkdata * ) ; int ( * unlink_done ) ( s#rpc_task * , s#inode * ) ; void ( * rename_setup ) ( s#rpc_message * , s#dentry * , s#dentry * ) ; void ( * rename_rpc_prepare ) ( s#rpc_task * , s#nfs_renamedata * ) ; int ( * rename_done ) ( s#rpc_task * , s#inode * , s#inode * ) ; int ( * link ) ( s#inode * , s#inode * , const s#qstr * ) ; int ( * symlink ) ( s#inode * , s#dentry * , s#page * , unsigned int , s#iattr * ) ; int ( * mkdir ) ( s#inode * , s#dentry * , s#iattr * ) ; int ( * rmdir ) ( s#inode * , const s#qstr * ) ; int ( * readdir ) ( s#dentry * , const s#cred * , t#u64 , s#page * * , unsigned int , t#bool ) ; int ( * mknod ) ( s#inode * , s#dentry * , s#iattr * , t#dev_t ) ; int ( * statfs ) ( s#nfs_server * , s#nfs_fh * , s#nfs_fsstat * ) ; int ( * fsinfo ) ( s#nfs_server * , s#nfs_fh * , s#nfs_fsinfo * ) ; int ( * pathconf ) ( s#nfs_server * , s#nfs_fh * , s#nfs_pathconf * ) ; int ( * set_capabilities ) ( s#nfs_server * , s#nfs_fh * ) ; int ( * decode_dirent ) ( s#xdr_stream * , s#nfs_entry * , t#bool ) ; int ( * pgio_rpc_prepare ) ( s#rpc_task * , s#nfs_pgio_header * ) ; void ( * read_setup ) ( s#nfs_pgio_header * , s#rpc_message * ) ; int ( * read_done ) ( s#rpc_task * , s#nfs_pgio_header * ) ; void ( * write_setup ) ( s#nfs_pgio_header * , s#rpc_message * , s#rpc_clnt * * ) ; int ( * write_done ) ( s#rpc_task * , s#nfs_pgio_header * ) ; void ( * commit_setup ) ( s#nfs_commit_data * , s#rpc_message * , s#rpc_clnt * * ) ; void ( * commit_rpc_prepare ) ( s#rpc_task * , s#nfs_commit_data * ) ; int ( * commit_done ) ( s#rpc_task * , s#nfs_commit_data * ) ; int ( * lock ) ( s#file * , int , s#file_lock * ) ; int ( * lock_check_bounds ) ( const s#file_lock * ) ; void ( * clear_acl_cache ) ( s#inode * ) ; void ( * close_context ) ( s#nfs_open_context * , int ) ; s#inode * ( * open_context ) ( s#inode * , s#nfs_open_context * , int , s#iattr * , int * ) ; int ( * have_delegation ) ( s#inode * , t#fmode_t ) ; s#nfs_client * ( * alloc_client ) ( const s#nfs_client_initdata * ) ; s#nfs_client * ( * init_client ) ( s#nfs_client * , const s#nfs_client_initdata * ) ; void ( * free_client ) ( s#nfs_client * ) ; s#nfs_server * ( * create_server ) ( s#nfs_mount_info * , s#nfs_subversion * ) ; s#nfs_server * ( * clone_server ) ( s#nfs_server * , s#nfs_fh * , s#nfs_fattr * , t#rpc_authflavor_t ) ; }
s#nfs_rw_ops@5f4bfb9a struct nfs_rw_ops { s#nfs_pgio_header * ( * rw_alloc_header ) ( void ) ; void ( * rw_free_header ) ( s#nfs_pgio_header * ) ; int ( * rw_done ) ( s#rpc_task * , s#nfs_pgio_header * , s#inode * ) ; void ( * rw_result ) ( s#rpc_task * , s#nfs_pgio_header * ) ; void ( * rw_initiate ) ( s#nfs_pgio_header * , s#rpc_message * , const s#nfs_rpc_ops * , s#rpc_task_setup * , int ) ; }
s#nfs_rw_ops@bb8a17f7 struct nfs_rw_ops { UNKNOWN }
s#nfs_seqid struct nfs_seqid { s#nfs_seqid_counter * sequence ; s#list_head list ; s#rpc_task * task ; }
s#nfs_seqid_counter struct nfs_seqid_counter { t#ktime_t create_time ; int owner_id ; int flags ; t#u32 counter ; t#spinlock_t lock ; s#list_head list ; s#rpc_wait_queue wait ; }
s#nfs_server struct nfs_server { s#nfs_client * nfs_client ; s#list_head client_link ; s#list_head master_link ; s#rpc_clnt * client ; s#rpc_clnt * client_acl ; s#nlm_host * nlm_host ; s#nfs_iostats * io_stats ; t#atomic_long_t writeback ; int flags ; unsigned int caps ; unsigned int rsize ; unsigned int rpages ; unsigned int wsize ; unsigned int wpages ; unsigned int wtmult ; unsigned int dtsize ; unsigned short port ; unsigned int bsize ; unsigned int acregmin ; unsigned int acregmax ; unsigned int acdirmin ; unsigned int acdirmax ; unsigned int namelen ; unsigned int options ; unsigned int clone_blksize ; s#nfs_fsid fsid ; t#__u64 maxfilesize ; s#timespec time_delta ; unsigned long mount_time ; s#super_block * super ; t#dev_t s_dev ; s#nfs_auth_info auth_info ; s#nfs_fscache_key * fscache_key ; s#fscache_cookie * fscache ; t#u32 pnfs_blksize ; t#u32 attr_bitmask [ 3 ] ; t#u32 attr_bitmask_nl [ 3 ] ; t#u32 exclcreat_bitmask [ 3 ] ; t#u32 cache_consistency_bitmask [ 3 ] ; t#u32 acl_bitmask ; t#u32 fh_expire_type ; s#pnfs_layoutdriver_type * pnfs_curr_ld ; s#rpc_wait_queue roc_rpcwaitq ; void * pnfs_ld_data ; s#rb_root state_owners ; s#ida openowner_id ; s#ida lockowner_id ; s#list_head state_owners_lru ; s#list_head layouts ; s#list_head delegations ; s#list_head ss_copies ; unsigned long mig_gen ; unsigned long mig_status ; void ( * destroy ) ( s#nfs_server * ) ; t#atomic_t active ; s#__kernel_sockaddr_storage mountd_address ; t#size_t mountd_addrlen ; t#u32 mountd_version ; unsigned short mountd_port ; unsigned short mountd_protocol ; s#rpc_wait_queue uoc_rpcwaitq ; unsigned int read_hdrsize ; const s#cred * cred ; }
s#nfs_subversion@1e91c4b9 struct nfs_subversion { UNKNOWN }
s#nfs_subversion@aae51aa3 struct nfs_subversion { s#module * owner ; s#file_system_type * nfs_fs ; const s#rpc_version * rpc_vers ; const s#nfs_rpc_ops * rpc_ops ; const s#super_operations * sops ; const s#xattr_handler * * xattr ; s#list_head list ; }
s#nfs_unlinkdata struct nfs_unlinkdata { s#nfs_removeargs args ; s#nfs_removeres res ; s#dentry * dentry ; t#wait_queue_head_t wq ; const s#cred * cred ; s#nfs_fattr dir_attr ; long timeout ; }
s#nfs_write_verifier struct nfs_write_verifier { char data [ 8 ] ; }
s#nfs_writeverf struct nfs_writeverf { s#nfs_write_verifier verifier ; e#nfs3_stable_how committed ; }
s#nfstime4 struct nfstime4 { t#u64 seconds ; t#u32 nseconds ; }
s#nh_group struct nh_group { t#u16 num_nh ; t#bool mpath ; t#bool has_v4 ; s#nh_grp_entry nh_entries [ 0 ] ; }
s#nh_grp_entry struct nh_grp_entry { s#nexthop * nh ; t#u8 weight ; t#atomic_t upper_bound ; s#list_head nh_list ; s#nexthop * nh_parent ; }
s#nh_info struct nh_info { s#hlist_node dev_hash ; s#nexthop * nh_parent ; t#u8 family ; t#bool reject_nh ; union { s#fib_nh_common fib_nhc ; s#fib_nh fib_nh ; s#fib6_nh fib6_nh ; } ; }
s#nl80211_vendor_cmd_info struct nl80211_vendor_cmd_info { t#__u32 vendor_id ; t#__u32 subcmd ; }
s#nl80211_wowlan_tcp_data_seq struct nl80211_wowlan_tcp_data_seq { t#__u32 start , offset , len ; }
s#nl80211_wowlan_tcp_data_token struct nl80211_wowlan_tcp_data_token { t#__u32 offset , len ; t#__u8 token_stream [ ] ; }
s#nl80211_wowlan_tcp_data_token_feature struct nl80211_wowlan_tcp_data_token_feature { t#__u32 min_len , max_len , bufsize ; }
s#nla_policy@6b31e364 struct nla_policy { t#u8 type ; t#u8 validation_type ; t#u16 len ; union { const void * validation_data ; struct { t#s16 min , max ; } ; int ( * validate ) ( const s#nlattr * , s#netlink_ext_ack * ) ; t#u16 strict_start_type ; } ; }
s#nla_policy@f0766bba struct nla_policy { UNKNOWN }
s#nlattr struct nlattr { t#__u16 nla_len ; t#__u16 nla_type ; }
s#nlm_host@848b5b81 struct nlm_host { s#hlist_node h_hash ; s#__kernel_sockaddr_storage h_addr ; t#size_t h_addrlen ; s#__kernel_sockaddr_storage h_srcaddr ; t#size_t h_srcaddrlen ; s#rpc_clnt * h_rpcclnt ; char * h_name ; t#u32 h_version ; unsigned short h_proto ; unsigned short h_reclaiming : 1 , h_server : 1 , h_noresvport : 1 , h_inuse : 1 ; t#wait_queue_head_t h_gracewait ; s#rw_semaphore h_rwsem ; t#u32 h_state ; t#u32 h_nsmstate ; t#u32 h_pidcount ; t#refcount_t h_count ; s#mutex h_mutex ; unsigned long h_nextrebind ; unsigned long h_expires ; s#list_head h_lockowners ; t#spinlock_t h_lock ; s#list_head h_granted ; s#list_head h_reclaim ; s#nsm_handle * h_nsmhandle ; char * h_addrbuf ; s#net * net ; const s#cred * h_cred ; char nodename [ 64 + 1 ] ; const s#nlmclnt_operations * h_nlmclnt_ops ; }
s#nlm_host@9e00109f struct nlm_host { UNKNOWN }
s#nlm_lockowner@9807fff5 struct nlm_lockowner { s#list_head list ; t#refcount_t count ; s#nlm_host * host ; t#fl_owner_t owner ; t#uint32_t pid ; }
s#nlm_lockowner@c8646510 struct nlm_lockowner { UNKNOWN }
s#nlmclnt_operations@40af5e15 struct nlmclnt_operations { UNKNOWN }
s#nlmclnt_operations@5eda35fa struct nlmclnt_operations { void ( * nlmclnt_alloc_call ) ( void * ) ; t#bool ( * nlmclnt_unlock_prepare ) ( s#rpc_task * , void * ) ; void ( * nlmclnt_release_call ) ( void * ) ; }
s#nlmsghdr struct nlmsghdr { t#__u32 nlmsg_len ; t#__u16 nlmsg_type ; t#__u16 nlmsg_flags ; t#__u32 nlmsg_seq ; t#__u32 nlmsg_pid ; }
s#nls_table struct nls_table { const char * charset ; const char * alias ; int ( * uni2char ) ( t#wchar_t , unsigned char * , int ) ; int ( * char2uni ) ( const unsigned char * , int , t#wchar_t * ) ; const unsigned char * charset2lower ; const unsigned char * charset2upper ; s#module * owner ; s#nls_table * next ; }
s#notifier_block struct notifier_block { t#notifier_fn_t notifier_call ; s#notifier_block * next ; int priority ; }
s#ns_common struct ns_common { t#atomic_long_t stashed ; const s#proc_ns_operations * ops ; unsigned int inum ; }
s#nsm_handle struct nsm_handle { s#list_head sm_link ; t#refcount_t sm_count ; char * sm_mon_name ; char * sm_name ; s#__kernel_sockaddr_storage sm_addr ; t#size_t sm_addrlen ; unsigned int sm_monitored : 1 , sm_sticky : 1 ; s#nsm_private sm_priv ; char sm_addrbuf [ ( ( 8 * 4 + 7 ) + ( 1 + 10 ) + 1 ) ] ; }
s#nsm_private struct nsm_private { unsigned char data [ 16 ] ; }
s#nsproxy@170c24b3 struct nsproxy { UNKNOWN }
s#nsproxy@2a3b7f29 struct nsproxy { t#atomic_t count ; s#uts_namespace * uts_ns ; s#ipc_namespace * ipc_ns ; s#mnt_namespace * mnt_ns ; s#pid_namespace * pid_ns_for_children ; s#net * net_ns ; s#cgroup_namespace * cgroup_ns ; }
s#numa_group struct numa_group { UNKNOWN }
s#nvme_fc_local_port struct nvme_fc_local_port { t#u32 port_num ; t#u32 port_role ; t#u64 node_name ; t#u64 port_name ; void * private ; t#u32 port_id ; e#nvme_fc_obj_state port_state ; }
s#nvme_fc_port_info struct nvme_fc_port_info { t#u64 node_name ; t#u64 port_name ; t#u32 port_role ; t#u32 port_id ; t#u32 dev_loss_tmo ; }
s#nvme_fc_port_template struct nvme_fc_port_template { void ( * localport_delete ) ( s#nvme_fc_local_port * ) ; void ( * remoteport_delete ) ( s#nvme_fc_remote_port * ) ; int ( * create_queue ) ( s#nvme_fc_local_port * , unsigned int , t#u16 , void * * ) ; void ( * delete_queue ) ( s#nvme_fc_local_port * , unsigned int , void * ) ; int ( * ls_req ) ( s#nvme_fc_local_port * , s#nvme_fc_remote_port * , s#nvmefc_ls_req * ) ; int ( * fcp_io ) ( s#nvme_fc_local_port * , s#nvme_fc_remote_port * , void * , s#nvmefc_fcp_req * ) ; void ( * ls_abort ) ( s#nvme_fc_local_port * , s#nvme_fc_remote_port * , s#nvmefc_ls_req * ) ; void ( * fcp_abort ) ( s#nvme_fc_local_port * , s#nvme_fc_remote_port * , void * , s#nvmefc_fcp_req * ) ; int ( * xmt_ls_rsp ) ( s#nvme_fc_local_port * , s#nvme_fc_remote_port * , s#nvmefc_ls_rsp * ) ; t#u32 max_hw_queues ; t#u16 max_sgl_segments ; t#u16 max_dif_sgl_segments ; t#u64 dma_boundary ; t#u32 local_priv_sz ; t#u32 remote_priv_sz ; t#u32 lsrqst_priv_sz ; t#u32 fcprqst_priv_sz ; }
s#nvme_fc_remote_port struct nvme_fc_remote_port { t#u32 port_num ; t#u32 port_role ; t#u64 node_name ; t#u64 port_name ; s#nvme_fc_local_port * localport ; void * private ; t#u32 dev_loss_tmo ; t#u32 port_id ; e#nvme_fc_obj_state port_state ; }
s#nvmefc_fcp_req struct nvmefc_fcp_req { void * cmdaddr ; void * rspaddr ; t#dma_addr_t cmddma ; t#dma_addr_t rspdma ; t#u16 cmdlen ; t#u16 rsplen ; t#u32 payload_length ; s#sg_table sg_table ; s#scatterlist * first_sgl ; int sg_cnt ; e#nvmefc_fcp_datadir io_dir ; t#__le16 sqid ; void ( * done ) ( s#nvmefc_fcp_req * ) ; void * private ; t#u32 transferred_length ; t#u16 rcv_rsplen ; t#u32 status ; }
s#nvmefc_ls_req struct nvmefc_ls_req { void * rqstaddr ; t#dma_addr_t rqstdma ; t#u32 rqstlen ; void * rspaddr ; t#dma_addr_t rspdma ; t#u32 rsplen ; t#u32 timeout ; void * private ; void ( * done ) ( s#nvmefc_ls_req * , int ) ; }
s#nvmefc_ls_rsp struct nvmefc_ls_rsp { void * rspbuf ; t#dma_addr_t rspdma ; t#u16 rsplen ; void ( * done ) ( s#nvmefc_ls_rsp * ) ; void * nvme_fc_private ; }
s#nvmem_device@ad4a4139 struct nvmem_device { s#module * owner ; s#device dev ; int stride ; int word_size ; int id ; s#kref refcnt ; t#size_t size ; t#bool read_only ; int flags ; e#nvmem_type type ; s#bin_attribute eeprom ; s#device * base_dev ; s#list_head cells ; t#nvmem_reg_read_t reg_read ; t#nvmem_reg_write_t reg_write ; void * priv ; }
s#nvmem_device@b783d954 struct nvmem_device { UNKNOWN }
s#of_device_id@8080a399 struct of_device_id { char name [ 32 ] ; char type [ 32 ] ; char compatible [ 128 ] ; const void * data ; }
s#of_device_id@fae262dc struct of_device_id { UNKNOWN }
s#of_phandle_args struct of_phandle_args { s#device_node * np ; int args_count ; t#uint32_t args [ 16 ] ; }
s#old_timespec32 struct old_timespec32 { t#old_time32_t tv_sec ; t#s32 tv_nsec ; }
s#optimistic_spin_queue struct optimistic_spin_queue { t#atomic_t tail ; }
s#otp_info struct otp_info { t#__u32 start ; t#__u32 length ; t#__u32 locked ; }
s#pacct_struct struct pacct_struct { int ac_flag ; long ac_exitcode ; unsigned long ac_mem ; t#u64 ac_utime , ac_stime ; unsigned long ac_minflt , ac_majflt ; }
s#packet_type struct packet_type { t#__be16 type ; t#bool ignore_outgoing ; s#net_device * dev ; int ( * func ) ( s#sk_buff * , s#net_device * , s#packet_type * , s#net_device * ) ; void ( * list_func ) ( s#list_head * , s#packet_type * , s#net_device * ) ; t#bool ( * id_match ) ( s#packet_type * , s#sock * ) ; void * af_packet_priv ; s#list_head list ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#page struct page { unsigned long flags ; union { struct { s#list_head lru ; s#address_space * mapping ; unsigned long index ; unsigned long private ; } ; struct { t#dma_addr_t dma_addr ; } ; struct { union { s#list_head slab_list ; struct { s#page * next ; int pages ; int pobjects ; } ; } ; s#kmem_cache * slab_cache ; void * freelist ; union { void * s_mem ; unsigned long counters ; struct { unsigned inuse : 16 ; unsigned objects : 15 ; unsigned frozen : 1 ; } ; } ; } ; struct { unsigned long compound_head ; unsigned char compound_dtor ; unsigned char compound_order ; t#atomic_t compound_mapcount ; } ; struct { unsigned long _compound_pad_1 ; unsigned long _compound_pad_2 ; s#list_head deferred_list ; } ; struct { unsigned long _pt_pad_1 ; t#pgtable_t pmd_huge_pte ; unsigned long _pt_pad_2 ; union { s#mm_struct * pt_mm ; t#atomic_t pt_frag_refcount ; } ; t#spinlock_t * ptl ; } ; struct { s#dev_pagemap * pgmap ; void * zone_device_data ; } ; s#callback_head callback_head ; } ; union { t#atomic_t _mapcount ; unsigned int page_type ; unsigned int active ; int units ; } ; t#atomic_t _refcount ; s#mem_cgroup * mem_cgroup ; }
s#page_counter struct page_counter { t#atomic_long_t usage ; unsigned long min ; unsigned long low ; unsigned long max ; s#page_counter * parent ; unsigned long emin ; t#atomic_long_t min_usage ; t#atomic_long_t children_min_usage ; unsigned long elow ; t#atomic_long_t low_usage ; t#atomic_long_t children_low_usage ; unsigned long watermark ; unsigned long failcnt ; }
s#page_ext struct page_ext { unsigned long flags ; }
s#page_frag struct page_frag { s#page * page ; t#__u32 offset ; t#__u32 size ; }
s#pagevec struct pagevec { unsigned char nr ; t#bool percpu_pvec_drained ; s#page * pages [ 15 ] ; }
s#paravirt_callee_save struct paravirt_callee_save { void * func ; }
s#paravirt_patch_template struct paravirt_patch_template { s#pv_init_ops init ; s#pv_time_ops time ; s#pv_cpu_ops cpu ; s#pv_irq_ops irq ; s#pv_mmu_ops mmu ; s#pv_lock_ops lock ; }
s#partition_meta_info struct partition_meta_info { char uuid [ ( 36 + 1 ) ] ; t#u8 volname [ 64 ] ; }
s#path struct path { s#vfsmount * mnt ; s#dentry * dentry ; }
s#pci_bus struct pci_bus { s#list_head node ; s#pci_bus * parent ; s#list_head children ; s#list_head devices ; s#pci_dev * self ; s#list_head slots ; s#resource * resource [ 4 ] ; s#list_head resources ; s#resource busn_res ; s#pci_ops * ops ; s#msi_controller * msi ; void * sysdata ; s#proc_dir_entry * procdir ; unsigned char number ; unsigned char primary ; unsigned char max_bus_speed ; unsigned char cur_bus_speed ; char name [ 48 ] ; unsigned short bridge_ctl ; t#pci_bus_flags_t bus_flags ; s#device * bridge ; s#device dev ; s#bin_attribute * legacy_io ; s#bin_attribute * legacy_mem ; unsigned int is_added : 1 ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; }
s#pci_dev@058da080 struct pci_dev { UNKNOWN }
s#pci_dev@2976ceb1 struct pci_dev { s#list_head bus_list ; s#pci_bus * bus ; s#pci_bus * subordinate ; void * sysdata ; s#proc_dir_entry * procent ; s#pci_slot * slot ; unsigned int devfn ; unsigned short vendor ; unsigned short device ; unsigned short subsystem_vendor ; unsigned short subsystem_device ; unsigned int class ; t#u8 revision ; t#u8 hdr_type ; t#u16 aer_cap ; s#aer_stats * aer_stats ; t#u8 pcie_cap ; t#u8 msi_cap ; t#u8 msix_cap ; t#u8 pcie_mpss : 3 ; t#u8 rom_base_reg ; t#u8 pin ; t#u16 pcie_flags_reg ; unsigned long * dma_alias_mask ; s#pci_driver * driver ; t#u64 dma_mask ; s#device_dma_parameters dma_parms ; t#pci_power_t current_state ; unsigned int imm_ready : 1 ; t#u8 pm_cap ; unsigned int pme_support : 5 ; unsigned int pme_poll : 1 ; unsigned int d1_support : 1 ; unsigned int d2_support : 1 ; unsigned int no_d1d2 : 1 ; unsigned int no_d3cold : 1 ; unsigned int bridge_d3 : 1 ; unsigned int d3cold_allowed : 1 ; unsigned int mmio_always_on : 1 ; unsigned int wakeup_prepared : 1 ; unsigned int runtime_d3cold : 1 ; unsigned int skip_bus_pm : 1 ; unsigned int ignore_hotplug : 1 ; unsigned int hotplug_user_indicators : 1 ; unsigned int clear_retrain_link : 1 ; unsigned int d3_delay ; unsigned int d3cold_delay ; s#pcie_link_state * link_state ; unsigned int ltr_path : 1 ; unsigned int eetlp_prefix_path : 1 ; t#pci_channel_state_t error_state ; s#device dev ; int cfg_size ; unsigned int irq ; s#resource resource [ E#DEVICE_COUNT_RESOURCE ] ; t#bool match_driver ; unsigned int transparent : 1 ; unsigned int io_window : 1 ; unsigned int pref_window : 1 ; unsigned int pref_64_window : 1 ; unsigned int multifunction : 1 ; unsigned int is_busmaster : 1 ; unsigned int no_msi : 1 ; unsigned int no_64bit_msi : 1 ; unsigned int block_cfg_access : 1 ; unsigned int broken_parity_status : 1 ; unsigned int irq_reroute_variant : 2 ; unsigned int msi_enabled : 1 ; unsigned int msix_enabled : 1 ; unsigned int ari_enabled : 1 ; unsigned int ats_enabled : 1 ; unsigned int pasid_enabled : 1 ; unsigned int pri_enabled : 1 ; unsigned int is_managed : 1 ; unsigned int needs_freset : 1 ; unsigned int state_saved : 1 ; unsigned int is_physfn : 1 ; unsigned int is_virtfn : 1 ; unsigned int reset_fn : 1 ; unsigned int is_hotplug_bridge : 1 ; unsigned int shpc_managed : 1 ; unsigned int is_thunderbolt : 1 ; unsigned int untrusted : 1 ; unsigned int __aer_firmware_first_valid : 1 ; unsigned int __aer_firmware_first : 1 ; unsigned int broken_intx_masking : 1 ; unsigned int io_window_1k : 1 ; unsigned int irq_managed : 1 ; unsigned int non_compliant_bars : 1 ; unsigned int is_probed : 1 ; unsigned int link_active_reporting : 1 ; unsigned int no_vf_scan : 1 ; t#pci_dev_flags_t dev_flags ; t#atomic_t enable_cnt ; t#u32 saved_config_space [ 16 ] ; s#hlist_head saved_cap_space ; s#bin_attribute * rom_attr ; int rom_attr_enabled ; s#bin_attribute * res_attr [ E#DEVICE_COUNT_RESOURCE ] ; s#bin_attribute * res_attr_wc [ E#DEVICE_COUNT_RESOURCE ] ; unsigned int broken_cmd_compl : 1 ; const s#attribute_group * * msi_irq_groups ; s#pci_vpd * vpd ; union { s#pci_sriov * sriov ; s#pci_dev * physfn ; } ; t#u16 ats_cap ; t#u8 ats_stu ; t#atomic_t ats_ref_cnt ; t#u32 pri_reqs_alloc ; t#u16 pasid_features ; t#phys_addr_t rom ; t#size_t romlen ; char * driver_override ; unsigned long priv_flags ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#pci_device_id struct pci_device_id { t#__u32 vendor , device ; t#__u32 subvendor , subdevice ; t#__u32 class , class_mask ; t#kernel_ulong_t driver_data ; }
s#pci_driver struct pci_driver { s#list_head node ; const char * name ; const s#pci_device_id * id_table ; int ( * probe ) ( s#pci_dev * , const s#pci_device_id * ) ; void ( * remove ) ( s#pci_dev * ) ; int ( * suspend ) ( s#pci_dev * , t#pm_message_t ) ; int ( * suspend_late ) ( s#pci_dev * , t#pm_message_t ) ; int ( * resume_early ) ( s#pci_dev * ) ; int ( * resume ) ( s#pci_dev * ) ; void ( * shutdown ) ( s#pci_dev * ) ; int ( * sriov_configure ) ( s#pci_dev * , int ) ; const s#pci_error_handlers * err_handler ; const s#attribute_group * * groups ; s#device_driver driver ; s#pci_dynids dynids ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#pci_dynids struct pci_dynids { t#spinlock_t lock ; s#list_head list ; }
s#pci_error_handlers struct pci_error_handlers { t#pci_ers_result_t ( * error_detected ) ( s#pci_dev * , e#pci_channel_state ) ; t#pci_ers_result_t ( * mmio_enabled ) ( s#pci_dev * ) ; t#pci_ers_result_t ( * slot_reset ) ( s#pci_dev * ) ; void ( * reset_prepare ) ( s#pci_dev * ) ; void ( * reset_done ) ( s#pci_dev * ) ; void ( * resume ) ( s#pci_dev * ) ; }
s#pci_ops struct pci_ops { int ( * add_bus ) ( s#pci_bus * ) ; void ( * remove_bus ) ( s#pci_bus * ) ; void * ( * map_bus ) ( s#pci_bus * , unsigned int , int ) ; int ( * read ) ( s#pci_bus * , unsigned int , int , int , t#u32 * ) ; int ( * write ) ( s#pci_bus * , unsigned int , int , int , t#u32 ) ; }
s#pci_slot struct pci_slot { s#pci_bus * bus ; s#list_head list ; s#hotplug_slot * hotplug ; unsigned char number ; s#kobject kobj ; }
s#pci_sriov@8eb10e41 struct pci_sriov { UNKNOWN }
s#pci_sriov@b84c07c7 struct pci_sriov { int pos ; int nres ; t#u32 cap ; t#u16 ctrl ; t#u16 total_VFs ; t#u16 initial_VFs ; t#u16 num_VFs ; t#u16 offset ; t#u16 stride ; t#u16 vf_device ; t#u32 pgsz ; t#u8 link ; t#u8 max_VF_buses ; t#u16 driver_max_VFs ; s#pci_dev * dev ; s#pci_dev * self ; t#u32 class ; t#u8 hdr_type ; t#u16 subsystem_vendor ; t#u16 subsystem_device ; t#resource_size_t barsz [ 6 ] ; t#bool drivers_autoprobe ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#pci_vpd struct pci_vpd { UNKNOWN }
s#pcie_link_state struct pcie_link_state { UNKNOWN }
s#pcpu_dstats struct pcpu_dstats { UNKNOWN }
s#pcpu_lstats struct pcpu_lstats { t#u64 packets ; t#u64 bytes ; s#u64_stats_sync syncp ; }
s#pcpu_sw_netstats struct pcpu_sw_netstats { t#u64 rx_packets ; t#u64 rx_bytes ; t#u64 tx_packets ; t#u64 tx_bytes ; s#u64_stats_sync syncp ; }
s#pdev_archdata struct pdev_archdata { }
s#per_cpu_nodestat struct per_cpu_nodestat { t#s8 stat_threshold ; t#s8 vm_node_stat_diff [ E#NR_VM_NODE_STAT_ITEMS ] ; }
s#per_cpu_pages struct per_cpu_pages { int count ; int high ; int batch ; s#list_head lists [ E#MIGRATE_PCPTYPES ] ; }
s#per_cpu_pageset struct per_cpu_pageset { s#per_cpu_pages pcp ; t#s8 expire ; t#u16 vm_numa_stat_diff [ E#NR_VM_NUMA_STAT_ITEMS ] ; t#s8 stat_threshold ; t#s8 vm_stat_diff [ E#NR_VM_ZONE_STAT_ITEMS ] ; }
s#percpu_cluster struct percpu_cluster { s#swap_cluster_info index ; unsigned int next ; }
s#percpu_counter struct percpu_counter { t#raw_spinlock_t lock ; t#s64 count ; s#list_head list ; t#s32 * counters ; }
s#percpu_ref struct percpu_ref { t#atomic_long_t count ; unsigned long percpu_count_ptr ; t#percpu_ref_func_t * release ; t#percpu_ref_func_t * confirm_switch ; t#bool force_atomic : 1 ; t#bool allow_reinit : 1 ; s#callback_head rcu ; }
s#percpu_rw_semaphore struct percpu_rw_semaphore { s#rcu_sync rss ; unsigned int * read_count ; s#rw_semaphore rw_sem ; s#rcuwait writer ; int readers_block ; }
s#perf_addr_filter_range struct perf_addr_filter_range { unsigned long start ; unsigned long size ; }
s#perf_addr_filters_head struct perf_addr_filters_head { s#list_head list ; t#raw_spinlock_t lock ; unsigned int nr_file_filters ; }
s#perf_branch_entry struct perf_branch_entry { t#__u64 from ; t#__u64 to ; t#__u64 mispred : 1 , predicted : 1 , in_tx : 1 , abort : 1 , cycles : 16 , type : 4 , reserved : 40 ; }
s#perf_branch_stack struct perf_branch_stack { t#__u64 nr ; s#perf_branch_entry entries [ 0 ] ; }
s#perf_callchain_entry struct perf_callchain_entry { t#__u64 nr ; t#__u64 ip [ 0 ] ; }
s#perf_cgroup struct perf_cgroup { s#cgroup_subsys_state css ; s#perf_cgroup_info * info ; }
s#perf_cgroup_info struct perf_cgroup_info { t#u64 time ; t#u64 timestamp ; }
s#perf_cpu_context struct perf_cpu_context { s#perf_event_context ctx ; s#perf_event_context * task_ctx ; int active_oncpu ; int exclusive ; t#raw_spinlock_t hrtimer_lock ; s#hrtimer hrtimer ; t#ktime_t hrtimer_interval ; unsigned int hrtimer_active ; s#perf_cgroup * cgrp ; s#list_head cgrp_cpuctx_entry ; s#list_head sched_cb_entry ; int sched_cb_usage ; int online ; }
s#perf_domain struct perf_domain { s#em_perf_domain * em_pd ; s#perf_domain * next ; s#callback_head rcu ; }
s#perf_event@504ec6af struct perf_event { s#list_head event_entry ; s#list_head sibling_list ; s#list_head active_list ; s#rb_node group_node ; t#u64 group_index ; s#list_head migrate_entry ; s#hlist_node hlist_entry ; s#list_head active_entry ; int nr_siblings ; int event_caps ; int group_caps ; s#perf_event * group_leader ; s#pmu * pmu ; void * pmu_private ; e#perf_event_state state ; unsigned int attach_state ; t#local64_t count ; t#atomic64_t child_count ; t#u64 total_time_enabled ; t#u64 total_time_running ; t#u64 tstamp ; t#u64 shadow_ctx_time ; s#perf_event_attr attr ; t#u16 header_size ; t#u16 id_header_size ; t#u16 read_size ; s#hw_perf_event hw ; s#perf_event_context * ctx ; t#atomic_long_t refcount ; t#atomic64_t child_total_time_enabled ; t#atomic64_t child_total_time_running ; s#mutex child_mutex ; s#list_head child_list ; s#perf_event * parent ; int oncpu ; int cpu ; s#list_head owner_entry ; s#task_struct * owner ; s#mutex mmap_mutex ; t#atomic_t mmap_count ; s#ring_buffer * rb ; s#list_head rb_entry ; unsigned long rcu_batches ; int rcu_pending ; t#wait_queue_head_t waitq ; s#fasync_struct * fasync ; int pending_wakeup ; int pending_kill ; int pending_disable ; s#irq_work pending ; t#atomic_t event_limit ; s#perf_addr_filters_head addr_filters ; s#perf_addr_filter_range * addr_filter_ranges ; unsigned long addr_filters_gen ; s#perf_event * aux_event ; void ( * destroy ) ( s#perf_event * ) ; s#callback_head callback_head ; s#pid_namespace * ns ; t#u64 id ; t#u64 ( * clock ) ( void ) ; t#perf_overflow_handler_t overflow_handler ; void * overflow_handler_context ; t#perf_overflow_handler_t orig_overflow_handler ; s#bpf_prog * prog ; s#trace_event_call * tp_event ; s#event_filter * filter ; s#ftrace_ops ftrace_ops ; s#perf_cgroup * cgrp ; s#list_head sb_list ; }
s#perf_event@82b204da struct perf_event { UNKNOWN }
s#perf_event_attr struct perf_event_attr { t#__u32 type ; t#__u32 size ; t#__u64 config ; union { t#__u64 sample_period ; t#__u64 sample_freq ; } ; t#__u64 sample_type ; t#__u64 read_format ; t#__u64 disabled : 1 , inherit : 1 , pinned : 1 , exclusive : 1 , exclude_user : 1 , exclude_kernel : 1 , exclude_hv : 1 , exclude_idle : 1 , mmap : 1 , comm : 1 , freq : 1 , inherit_stat : 1 , enable_on_exec : 1 , task : 1 , watermark : 1 , precise_ip : 2 , mmap_data : 1 , sample_id_all : 1 , exclude_host : 1 , exclude_guest : 1 , exclude_callchain_kernel : 1 , exclude_callchain_user : 1 , mmap2 : 1 , comm_exec : 1 , use_clockid : 1 , context_switch : 1 , write_backward : 1 , namespaces : 1 , ksymbol : 1 , bpf_event : 1 , aux_output : 1 , __reserved_1 : 32 ; union { t#__u32 wakeup_events ; t#__u32 wakeup_watermark ; } ; t#__u32 bp_type ; union { t#__u64 bp_addr ; t#__u64 kprobe_func ; t#__u64 uprobe_path ; t#__u64 config1 ; } ; union { t#__u64 bp_len ; t#__u64 kprobe_addr ; t#__u64 probe_offset ; t#__u64 config2 ; } ; t#__u64 branch_sample_type ; t#__u64 sample_regs_user ; t#__u32 sample_stack_user ; t#__s32 clockid ; t#__u64 sample_regs_intr ; t#__u32 aux_watermark ; t#__u16 sample_max_stack ; t#__u16 __reserved_2 ; }
s#perf_event_context@11805577 struct perf_event_context { UNKNOWN }
s#perf_event_context@da95161d struct perf_event_context { s#pmu * pmu ; t#raw_spinlock_t lock ; s#mutex mutex ; s#list_head active_ctx_list ; s#perf_event_groups pinned_groups ; s#perf_event_groups flexible_groups ; s#list_head event_list ; s#list_head pinned_active ; s#list_head flexible_active ; int nr_events ; int nr_active ; int is_active ; int nr_stat ; int nr_freq ; int rotate_disable ; int rotate_necessary ; t#refcount_t refcount ; s#task_struct * task ; t#u64 time ; t#u64 timestamp ; s#perf_event_context * parent_ctx ; t#u64 parent_gen ; t#u64 generation ; int pin_count ; int nr_cgroups ; void * task_ctx_data ; s#callback_head callback_head ; }
s#perf_event_groups struct perf_event_groups { s#rb_root tree ; t#u64 index ; }
s#perf_event_mmap_page struct perf_event_mmap_page { t#__u32 version ; t#__u32 compat_version ; t#__u32 lock ; t#__u32 index ; t#__s64 offset ; t#__u64 time_enabled ; t#__u64 time_running ; union { t#__u64 capabilities ; struct { t#__u64 cap_bit0 : 1 , cap_bit0_is_deprecated : 1 , cap_user_rdpmc : 1 , cap_user_time : 1 , cap_user_time_zero : 1 , cap_____res : 59 ; } ; } ; t#__u16 pmc_width ; t#__u16 time_shift ; t#__u32 time_mult ; t#__u64 time_offset ; t#__u64 time_zero ; t#__u32 size ; t#__u8 __reserved [ 118 * 8 + 4 ] ; t#__u64 data_head ; t#__u64 data_tail ; t#__u64 data_offset ; t#__u64 data_size ; t#__u64 aux_head ; t#__u64 aux_tail ; t#__u64 aux_offset ; t#__u64 aux_size ; }
s#perf_raw_frag struct perf_raw_frag { union { s#perf_raw_frag * next ; unsigned long pad ; } ; t#perf_copy_f copy ; void * data ; t#u32 size ; }
s#perf_raw_record struct perf_raw_record { s#perf_raw_frag frag ; t#u32 size ; }
s#perf_regs struct perf_regs { t#__u64 abi ; s#pt_regs * regs ; }
s#perf_sample_data struct perf_sample_data { t#u64 addr ; s#perf_raw_record * raw ; s#perf_branch_stack * br_stack ; t#u64 period ; t#u64 weight ; t#u64 txn ; u#perf_mem_data_src data_src ; t#u64 type ; t#u64 ip ; struct { t#u32 pid ; t#u32 tid ; } tid_entry ; t#u64 time ; t#u64 id ; t#u64 stream_id ; struct { t#u32 cpu ; t#u32 reserved ; } cpu_entry ; s#perf_callchain_entry * callchain ; s#perf_regs regs_user ; s#pt_regs regs_user_copy ; s#perf_regs regs_intr ; t#u64 stack_user_size ; t#u64 phys_addr ; }
s#pf_desc struct pf_desc { t#u32 pseudoflavor ; t#u32 qop ; t#u32 service ; char * name ; char * auth_domain_name ; s#auth_domain * domain ; t#bool datatouch ; }
s#pglist_data struct pglist_data { s#zone node_zones [ 5 ] ; s#zonelist node_zonelists [ E#MAX_ZONELISTS ] ; int nr_zones ; t#spinlock_t node_size_lock ; unsigned long node_start_pfn ; unsigned long node_present_pages ; unsigned long node_spanned_pages ; int node_id ; t#wait_queue_head_t kswapd_wait ; t#wait_queue_head_t pfmemalloc_wait ; s#task_struct * kswapd ; int kswapd_order ; e#zone_type kswapd_classzone_idx ; int kswapd_failures ; int kcompactd_max_order ; e#zone_type kcompactd_classzone_idx ; t#wait_queue_head_t kcompactd_wait ; s#task_struct * kcompactd ; unsigned long totalreserve_pages ; unsigned long min_unmapped_pages ; unsigned long min_slab_pages ; s#zone_padding _pad1_ ; t#spinlock_t lru_lock ; unsigned long first_deferred_pfn ; s#deferred_split deferred_split_queue ; s#lruvec lruvec ; unsigned long flags ; s#zone_padding _pad2_ ; s#per_cpu_nodestat * per_cpu_nodestats ; t#atomic_long_t vm_stat [ E#NR_VM_NODE_STAT_ITEMS ] ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#pgprot struct pgprot { t#pgprotval_t pgprot ; }
s#phy_c45_device_ids struct phy_c45_device_ids { t#u32 devices_in_package ; t#u32 device_ids [ 8 ] ; }
s#phy_device@0f12e8aa struct phy_device { s#mdio_device mdio ; s#phy_driver * drv ; t#u32 phy_id ; s#phy_c45_device_ids c45_ids ; unsigned is_c45 : 1 ; unsigned is_internal : 1 ; unsigned is_pseudo_fixed_link : 1 ; unsigned is_gigabit_capable : 1 ; unsigned has_fixups : 1 ; unsigned suspended : 1 ; unsigned sysfs_links : 1 ; unsigned loopback_enabled : 1 ; unsigned autoneg : 1 ; unsigned link : 1 ; unsigned autoneg_complete : 1 ; unsigned interrupts : 1 ; e#phy_state state ; t#u32 dev_flags ; t#phy_interface_t interface ; int speed ; int duplex ; int pause ; int asym_pause ; unsigned long supported [ ( ( ( E#__ETHTOOL_LINK_MODE_MASK_NBITS ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long advertising [ ( ( ( E#__ETHTOOL_LINK_MODE_MASK_NBITS ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long lp_advertising [ ( ( ( E#__ETHTOOL_LINK_MODE_MASK_NBITS ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long adv_old [ ( ( ( E#__ETHTOOL_LINK_MODE_MASK_NBITS ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; t#u32 eee_broken_modes ; s#phy_led_trigger * phy_led_triggers ; unsigned int phy_num_led_triggers ; s#phy_led_trigger * last_triggered ; s#phy_led_trigger * led_link_trigger ; int irq ; void * priv ; s#delayed_work state_queue ; s#mutex lock ; s#phylink * phylink ; s#net_device * attached_dev ; t#u8 mdix ; t#u8 mdix_ctrl ; void ( * phy_link_change ) ( s#phy_device * , t#bool , t#bool ) ; void ( * adjust_link ) ( s#net_device * ) ; }
s#phy_device@88a4c771 struct phy_device { UNKNOWN }
s#phy_driver struct phy_driver { s#mdio_driver_common mdiodrv ; t#u32 phy_id ; char * name ; t#u32 phy_id_mask ; const unsigned long * const features ; t#u32 flags ; const void * driver_data ; int ( * soft_reset ) ( s#phy_device * ) ; int ( * config_init ) ( s#phy_device * ) ; int ( * probe ) ( s#phy_device * ) ; int ( * get_features ) ( s#phy_device * ) ; int ( * suspend ) ( s#phy_device * ) ; int ( * resume ) ( s#phy_device * ) ; int ( * config_aneg ) ( s#phy_device * ) ; int ( * aneg_done ) ( s#phy_device * ) ; int ( * read_status ) ( s#phy_device * ) ; int ( * ack_interrupt ) ( s#phy_device * ) ; int ( * config_intr ) ( s#phy_device * ) ; int ( * did_interrupt ) ( s#phy_device * ) ; int ( * handle_interrupt ) ( s#phy_device * ) ; void ( * remove ) ( s#phy_device * ) ; int ( * match_phy_device ) ( s#phy_device * ) ; int ( * ts_info ) ( s#phy_device * , s#ethtool_ts_info * ) ; int ( * hwtstamp ) ( s#phy_device * , s#ifreq * ) ; t#bool ( * rxtstamp ) ( s#phy_device * , s#sk_buff * , int ) ; void ( * txtstamp ) ( s#phy_device * , s#sk_buff * , int ) ; int ( * set_wol ) ( s#phy_device * , s#ethtool_wolinfo * ) ; void ( * get_wol ) ( s#phy_device * , s#ethtool_wolinfo * ) ; void ( * link_change_notify ) ( s#phy_device * ) ; int ( * read_mmd ) ( s#phy_device * , int , t#u16 ) ; int ( * write_mmd ) ( s#phy_device * , int , t#u16 , t#u16 ) ; int ( * read_page ) ( s#phy_device * ) ; int ( * write_page ) ( s#phy_device * , int ) ; int ( * module_info ) ( s#phy_device * , s#ethtool_modinfo * ) ; int ( * module_eeprom ) ( s#phy_device * , s#ethtool_eeprom * , t#u8 * ) ; int ( * get_sset_count ) ( s#phy_device * ) ; void ( * get_strings ) ( s#phy_device * , t#u8 * ) ; void ( * get_stats ) ( s#phy_device * , s#ethtool_stats * , t#u64 * ) ; int ( * get_tunable ) ( s#phy_device * , s#ethtool_tunable * , void * ) ; int ( * set_tunable ) ( s#phy_device * , s#ethtool_tunable * , const void * ) ; int ( * set_loopback ) ( s#phy_device * , t#bool ) ; }
s#phy_led_trigger@5e55ce3b struct phy_led_trigger { UNKNOWN }
s#phy_led_trigger@8d61a80f struct phy_led_trigger { s#led_trigger trigger ; char name [ ( 61 + ( sizeof ( ( ( struct mdio_device * ) 0 ) -> addr ) ) + 11 ) ] ; unsigned int speed ; }
s#phylink struct phylink { UNKNOWN }
s#phylink_config struct phylink_config { s#device * dev ; e#phylink_op_type type ; }
s#phylink_link_state struct phylink_link_state { unsigned long advertising [ ( ( ( E#__ETHTOOL_LINK_MODE_MASK_NBITS ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long lp_advertising [ ( ( ( E#__ETHTOOL_LINK_MODE_MASK_NBITS ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; t#phy_interface_t interface ; int speed ; int duplex ; int pause ; unsigned int link : 1 ; unsigned int an_enabled : 1 ; unsigned int an_complete : 1 ; }
s#pid struct pid { t#refcount_t count ; unsigned int level ; s#hlist_head tasks [ E#PIDTYPE_MAX ] ; t#wait_queue_head_t wait_pidfd ; s#callback_head rcu ; s#upid numbers [ 1 ] ; }
s#pid_namespace@987b78a4 struct pid_namespace { UNKNOWN }
s#pid_namespace@db754917 struct pid_namespace { s#kref kref ; s#idr idr ; s#callback_head rcu ; unsigned int pid_allocated ; s#task_struct * child_reaper ; s#kmem_cache * pid_cachep ; unsigned int level ; s#pid_namespace * parent ; s#vfsmount * proc_mnt ; s#dentry * proc_self ; s#dentry * proc_thread_self ; s#fs_pin * bacct ; s#user_namespace * user_ns ; s#ucounts * ucounts ; s#work_struct proc_work ; t#kgid_t pid_gid ; int hide_pid ; int reboot ; s#ns_common ns ; }
s#pin_cookie struct pin_cookie { unsigned int val ; }
s#pinctrl@155ad7e7 struct pinctrl { s#list_head node ; s#device * dev ; s#list_head states ; s#pinctrl_state * state ; s#list_head dt_maps ; s#kref users ; }
s#pinctrl@a5fbfbdf struct pinctrl { UNKNOWN }
s#pinctrl_state@1b06de18 struct pinctrl_state { UNKNOWN }
s#pinctrl_state@eb5c35df struct pinctrl_state { s#list_head node ; const char * name ; s#list_head settings ; }
s#ping_group_range struct ping_group_range { t#seqlock_t lock ; t#kgid_t range [ 2 ] ; }
s#pipe_buf_operations struct pipe_buf_operations { int ( * confirm ) ( s#pipe_inode_info * , s#pipe_buffer * ) ; void ( * release ) ( s#pipe_inode_info * , s#pipe_buffer * ) ; int ( * steal ) ( s#pipe_inode_info * , s#pipe_buffer * ) ; t#bool ( * get ) ( s#pipe_inode_info * , s#pipe_buffer * ) ; }
s#pipe_buffer struct pipe_buffer { s#page * page ; unsigned int offset , len ; const s#pipe_buf_operations * ops ; unsigned int flags ; unsigned long private ; }
s#pipe_inode_info@15860e0e struct pipe_inode_info { s#mutex mutex ; t#wait_queue_head_t wait ; unsigned int nrbufs , curbuf , buffers ; unsigned int readers ; unsigned int writers ; unsigned int files ; unsigned int waiting_writers ; unsigned int r_counter ; unsigned int w_counter ; s#page * tmp_page ; s#fasync_struct * fasync_readers ; s#fasync_struct * fasync_writers ; s#pipe_buffer * bufs ; s#user_struct * user ; }
s#pipe_inode_info@b8d1ccf7 struct pipe_inode_info { UNKNOWN }
s#platform_device struct platform_device { const char * name ; int id ; t#bool id_auto ; s#device dev ; t#u64 dma_mask ; t#u32 num_resources ; s#resource * resource ; const s#platform_device_id * id_entry ; char * driver_override ; s#mfd_cell * mfd_cell ; s#pdev_archdata archdata ; }
s#platform_device_id struct platform_device_id { char name [ 20 ] ; t#kernel_ulong_t driver_data ; }
s#platform_driver struct platform_driver { int ( * probe ) ( s#platform_device * ) ; int ( * remove ) ( s#platform_device * ) ; void ( * shutdown ) ( s#platform_device * ) ; int ( * suspend ) ( s#platform_device * , t#pm_message_t ) ; int ( * resume ) ( s#platform_device * ) ; s#device_driver driver ; const s#platform_device_id * id_table ; t#bool prevent_deferred_probe ; }
s#platform_msi_desc struct platform_msi_desc { s#platform_msi_priv_data * msi_priv_data ; t#u16 msi_index ; }
s#platform_msi_priv_data struct platform_msi_priv_data { UNKNOWN }
s#plist_head struct plist_head { s#list_head node_list ; }
s#plist_node struct plist_node { int prio ; s#list_head prio_list ; s#list_head node_list ; }
s#pm_message struct pm_message { int event ; }
s#pm_qos_constraints struct pm_qos_constraints { s#plist_head list ; t#s32 target_value ; t#s32 default_value ; t#s32 no_constraint_value ; e#pm_qos_type type ; s#blocking_notifier_head * notifiers ; }
s#pm_qos_flags struct pm_qos_flags { s#list_head list ; t#s32 effective_flags ; }
s#pm_qos_flags_request struct pm_qos_flags_request { s#list_head node ; t#s32 flags ; }
s#pm_subsys_data struct pm_subsys_data { t#spinlock_t lock ; unsigned int refcount ; s#list_head clock_list ; }
s#pmu struct pmu { s#list_head entry ; s#module * module ; s#device * dev ; const s#attribute_group * * attr_groups ; const s#attribute_group * * attr_update ; const char * name ; int type ; int capabilities ; int * pmu_disable_count ; s#perf_cpu_context * pmu_cpu_context ; t#atomic_t exclusive_cnt ; int task_ctx_nr ; int hrtimer_interval_ms ; unsigned int nr_addr_filters ; void ( * pmu_enable ) ( s#pmu * ) ; void ( * pmu_disable ) ( s#pmu * ) ; int ( * event_init ) ( s#perf_event * ) ; void ( * event_mapped ) ( s#perf_event * , s#mm_struct * ) ; void ( * event_unmapped ) ( s#perf_event * , s#mm_struct * ) ; int ( * add ) ( s#perf_event * , int ) ; void ( * del ) ( s#perf_event * , int ) ; void ( * start ) ( s#perf_event * , int ) ; void ( * stop ) ( s#perf_event * , int ) ; void ( * read ) ( s#perf_event * ) ; void ( * start_txn ) ( s#pmu * , unsigned int ) ; int ( * commit_txn ) ( s#pmu * ) ; void ( * cancel_txn ) ( s#pmu * ) ; int ( * event_idx ) ( s#perf_event * ) ; void ( * sched_task ) ( s#perf_event_context * , t#bool ) ; t#size_t task_ctx_size ; void * ( * setup_aux ) ( s#perf_event * , void * * , int , t#bool ) ; void ( * free_aux ) ( void * ) ; int ( * addr_filters_validate ) ( s#list_head * ) ; void ( * addr_filters_sync ) ( s#perf_event * ) ; int ( * aux_output_match ) ( s#perf_event * ) ; int ( * filter_match ) ( s#perf_event * ) ; int ( * check_period ) ( s#perf_event * , t#u64 ) ; }
s#pneigh_entry struct pneigh_entry { s#pneigh_entry * next ; t#possible_net_t net ; s#net_device * dev ; t#u8 flags ; t#u8 protocol ; t#u8 key [ 0 ] ; }
s#pnfs_commit_bucket struct pnfs_commit_bucket { s#list_head written ; s#list_head committing ; s#pnfs_layout_segment * wlseg ; s#pnfs_layout_segment * clseg ; s#nfs_writeverf direct_verf ; }
s#pnfs_device struct pnfs_device { s#nfs4_deviceid dev_id ; unsigned int layout_type ; unsigned int mincount ; unsigned int maxcount ; s#page * * pages ; unsigned int pgbase ; unsigned int pglen ; unsigned char nocache : 1 ; }
s#pnfs_ds_commit_info struct pnfs_ds_commit_info { int nwritten ; int ncommitting ; int nbuckets ; s#pnfs_commit_bucket * buckets ; }
s#pnfs_layout_hdr struct pnfs_layout_hdr { t#refcount_t plh_refcount ; t#atomic_t plh_outstanding ; s#list_head plh_layouts ; s#list_head plh_bulk_destroy ; s#list_head plh_segs ; s#list_head plh_return_segs ; unsigned long plh_block_lgets ; unsigned long plh_retry_timestamp ; unsigned long plh_flags ; t#nfs4_stateid plh_stateid ; t#u32 plh_barrier ; t#u32 plh_return_seq ; e#pnfs_iomode plh_return_iomode ; t#loff_t plh_lwb ; const s#cred * plh_lc_cred ; s#inode * plh_inode ; }
s#pnfs_layout_range struct pnfs_layout_range { t#u32 iomode ; t#u64 offset ; t#u64 length ; }
s#pnfs_layout_segment@5906faae struct pnfs_layout_segment { s#list_head pls_list ; s#list_head pls_lc_list ; s#pnfs_layout_range pls_range ; t#refcount_t pls_refcount ; t#u32 pls_seq ; unsigned long pls_flags ; s#pnfs_layout_hdr * pls_layout ; }
s#pnfs_layout_segment@9518e838 struct pnfs_layout_segment { UNKNOWN }
s#pnfs_layoutdriver_type@4b18a7c7 struct pnfs_layoutdriver_type { UNKNOWN }
s#pnfs_layoutdriver_type@87c0df35 struct pnfs_layoutdriver_type { s#list_head pnfs_tblid ; const t#u32 id ; const char * name ; s#module * owner ; unsigned flags ; unsigned max_deviceinfo_size ; unsigned max_layoutget_response ; int ( * set_layoutdriver ) ( s#nfs_server * , const s#nfs_fh * ) ; int ( * clear_layoutdriver ) ( s#nfs_server * ) ; s#pnfs_layout_hdr * ( * alloc_layout_hdr ) ( s#inode * , t#gfp_t ) ; void ( * free_layout_hdr ) ( s#pnfs_layout_hdr * ) ; s#pnfs_layout_segment * ( * alloc_lseg ) ( s#pnfs_layout_hdr * , s#nfs4_layoutget_res * , t#gfp_t ) ; void ( * free_lseg ) ( s#pnfs_layout_segment * ) ; void ( * add_lseg ) ( s#pnfs_layout_hdr * , s#pnfs_layout_segment * , s#list_head * ) ; void ( * return_range ) ( s#pnfs_layout_hdr * , s#pnfs_layout_range * ) ; const s#nfs_pageio_ops * pg_read_ops ; const s#nfs_pageio_ops * pg_write_ops ; s#pnfs_ds_commit_info * ( * get_ds_info ) ( s#inode * ) ; void ( * mark_request_commit ) ( s#nfs_page * , s#pnfs_layout_segment * , s#nfs_commit_info * , t#u32 ) ; void ( * clear_request_commit ) ( s#nfs_page * , s#nfs_commit_info * ) ; int ( * scan_commit_lists ) ( s#nfs_commit_info * , int ) ; void ( * recover_commit_reqs ) ( s#list_head * , s#nfs_commit_info * ) ; s#nfs_page * ( * search_commit_reqs ) ( s#nfs_commit_info * , s#page * ) ; int ( * commit_pagelist ) ( s#inode * , s#list_head * , int , s#nfs_commit_info * ) ; int ( * sync ) ( s#inode * , t#bool ) ; e#pnfs_try_status ( * read_pagelist ) ( s#nfs_pgio_header * ) ; e#pnfs_try_status ( * write_pagelist ) ( s#nfs_pgio_header * , int ) ; void ( * free_deviceid_node ) ( s#nfs4_deviceid_node * ) ; s#nfs4_deviceid_node * ( * alloc_deviceid_node ) ( s#nfs_server * , s#pnfs_device * , t#gfp_t ) ; int ( * prepare_layoutreturn ) ( s#nfs4_layoutreturn_args * ) ; void ( * cleanup_layoutcommit ) ( s#nfs4_layoutcommit_data * ) ; int ( * prepare_layoutcommit ) ( s#nfs4_layoutcommit_args * ) ; int ( * prepare_layoutstats ) ( s#nfs42_layoutstat_args * ) ; }
s#poll_table_struct@8d8f3878 struct poll_table_struct { t#poll_queue_proc _qproc ; t#__poll_t _key ; }
s#poll_table_struct@ff0e459e struct poll_table_struct { UNKNOWN }
s#pollfd@9600d34e struct pollfd { UNKNOWN }
s#pollfd@b58156ac struct pollfd { int fd ; short events ; short revents ; }
s#posix_acl@69f88c1a struct posix_acl { t#refcount_t a_refcount ; s#callback_head a_rcu ; unsigned int a_count ; s#posix_acl_entry a_entries [ 0 ] ; }
s#posix_acl@a4ffd084 struct posix_acl { UNKNOWN }
s#posix_acl_entry struct posix_acl_entry { short e_tag ; unsigned short e_perm ; union { t#kuid_t e_uid ; t#kgid_t e_gid ; } ; }
s#posix_cputimer_base struct posix_cputimer_base { t#u64 nextevt ; s#timerqueue_head tqhead ; }
s#posix_cputimers struct posix_cputimers { s#posix_cputimer_base bases [ 3 ] ; unsigned int timers_active ; unsigned int expiry_active ; }
s#pr_ops@43a01d23 struct pr_ops { UNKNOWN }
s#pr_ops@a05da046 struct pr_ops { int ( * pr_register ) ( s#block_device * , t#u64 , t#u64 , t#u32 ) ; int ( * pr_reserve ) ( s#block_device * , t#u64 , e#pr_type , t#u32 ) ; int ( * pr_release ) ( s#block_device * , t#u64 , e#pr_type ) ; int ( * pr_preempt ) ( s#block_device * , t#u64 , t#u64 , e#pr_type , t#bool ) ; int ( * pr_clear ) ( s#block_device * , t#u64 ) ; }
s#preempt_notifier struct preempt_notifier { s#hlist_node link ; s#preempt_ops * ops ; }
s#preempt_ops struct preempt_ops { void ( * sched_in ) ( s#preempt_notifier * , int ) ; void ( * sched_out ) ( s#preempt_notifier * , s#task_struct * ) ; }
s#prefix_info@5c565f54 struct prefix_info { t#__u8 type ; t#__u8 length ; t#__u8 prefix_len ; t#__u8 reserved : 6 , autoconf : 1 , onlink : 1 ; t#__be32 valid ; t#__be32 prefered ; t#__be32 reserved2 ; s#in6_addr prefix ; }
s#prefix_info@8e275acb struct prefix_info { UNKNOWN }
s#prev_cputime struct prev_cputime { t#u64 utime ; t#u64 stime ; t#raw_spinlock_t lock ; }
s#proc_dir_entry@615cd3ba struct proc_dir_entry { UNKNOWN }
s#proc_dir_entry@c35e0eb9 struct proc_dir_entry { t#atomic_t in_use ; t#refcount_t refcnt ; s#list_head pde_openers ; t#spinlock_t pde_unload_lock ; s#completion * pde_unload_completion ; const s#inode_operations * proc_iops ; const s#file_operations * proc_fops ; const s#dentry_operations * proc_dops ; union { const s#seq_operations * seq_ops ; int ( * single_show ) ( s#seq_file * , void * ) ; } ; t#proc_write_t write ; void * data ; unsigned int state_size ; unsigned int low_ino ; t#nlink_t nlink ; t#kuid_t uid ; t#kgid_t gid ; t#loff_t size ; s#proc_dir_entry * parent ; s#rb_root subdir ; s#rb_node subdir_node ; char * name ; t#umode_t mode ; t#u8 namelen ; char inline_name [ ] ; }
s#proc_ns_operations@805c1444 struct proc_ns_operations { const char * name ; const char * real_ns_name ; int type ; s#ns_common * ( * get ) ( s#task_struct * ) ; void ( * put ) ( s#ns_common * ) ; int ( * install ) ( s#nsproxy * , s#ns_common * ) ; s#user_namespace * ( * owner ) ( s#ns_common * ) ; s#ns_common * ( * get_parent ) ( s#ns_common * ) ; }
s#proc_ns_operations@d97ed1ec struct proc_ns_operations { UNKNOWN }
s#prog_entry struct prog_entry { UNKNOWN }
s#property struct property { char * name ; int length ; void * value ; s#property * next ; }
s#property_entry@ac14a6d4 struct property_entry { const char * name ; t#size_t length ; t#bool is_array ; e#dev_prop_type type ; union { union { const t#u8 * u8_data ; const t#u16 * u16_data ; const t#u32 * u32_data ; const t#u64 * u64_data ; const char * const * str ; } pointer ; union { t#u8 u8_data ; t#u16 u16_data ; t#u32 u32_data ; t#u64 u64_data ; const char * str ; } value ; } ; }
s#property_entry@ccfe20e2 struct property_entry { UNKNOWN }
s#prot_inuse struct prot_inuse { UNKNOWN }
s#proto struct proto { void ( * close ) ( s#sock * , long ) ; int ( * pre_connect ) ( s#sock * , s#sockaddr * , int ) ; int ( * connect ) ( s#sock * , s#sockaddr * , int ) ; int ( * disconnect ) ( s#sock * , int ) ; s#sock * ( * accept ) ( s#sock * , int , int * , t#bool ) ; int ( * ioctl ) ( s#sock * , int , unsigned long ) ; int ( * init ) ( s#sock * ) ; void ( * destroy ) ( s#sock * ) ; void ( * shutdown ) ( s#sock * , int ) ; int ( * setsockopt ) ( s#sock * , int , int , char * , unsigned int ) ; int ( * getsockopt ) ( s#sock * , int , int , char * , int * ) ; void ( * keepalive ) ( s#sock * , int ) ; int ( * compat_setsockopt ) ( s#sock * , int , int , char * , unsigned int ) ; int ( * compat_getsockopt ) ( s#sock * , int , int , char * , int * ) ; int ( * compat_ioctl ) ( s#sock * , unsigned int , unsigned long ) ; int ( * sendmsg ) ( s#sock * , s#msghdr * , t#size_t ) ; int ( * recvmsg ) ( s#sock * , s#msghdr * , t#size_t , int , int , int * ) ; int ( * sendpage ) ( s#sock * , s#page * , int , t#size_t , int ) ; int ( * bind ) ( s#sock * , s#sockaddr * , int ) ; int ( * backlog_rcv ) ( s#sock * , s#sk_buff * ) ; void ( * release_cb ) ( s#sock * ) ; int ( * hash ) ( s#sock * ) ; void ( * unhash ) ( s#sock * ) ; void ( * rehash ) ( s#sock * ) ; int ( * get_port ) ( s#sock * , unsigned short ) ; unsigned int inuse_idx ; t#bool ( * stream_memory_free ) ( const s#sock * , int ) ; t#bool ( * stream_memory_read ) ( const s#sock * ) ; void ( * enter_memory_pressure ) ( s#sock * ) ; void ( * leave_memory_pressure ) ( s#sock * ) ; t#atomic_long_t * memory_allocated ; s#percpu_counter * sockets_allocated ; unsigned long * memory_pressure ; long * sysctl_mem ; int * sysctl_wmem ; int * sysctl_rmem ; t#u32 sysctl_wmem_offset ; t#u32 sysctl_rmem_offset ; int max_header ; t#bool no_autobind ; s#kmem_cache * slab ; unsigned int obj_size ; t#slab_flags_t slab_flags ; unsigned int useroffset ; unsigned int usersize ; s#percpu_counter * orphan_count ; s#request_sock_ops * rsk_prot ; s#timewait_sock_ops * twsk_prot ; union { s#inet_hashinfo * hashinfo ; s#udp_table * udp_table ; s#raw_hashinfo * raw_hash ; s#smc_hashinfo * smc_hash ; } h ; s#module * owner ; char name [ 32 ] ; s#list_head node ; int ( * diag_destroy ) ( s#sock * , int ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; unsigned long uek_reserved9 ; unsigned long uek_reserved10 ; unsigned long uek_reserved11 ; unsigned long uek_reserved12 ; unsigned long uek_reserved13 ; unsigned long uek_reserved14 ; unsigned long uek_reserved15 ; unsigned long uek_reserved16 ; }
s#proto_ops struct proto_ops { int family ; s#module * owner ; int ( * release ) ( s#socket * ) ; int ( * bind ) ( s#socket * , s#sockaddr * , int ) ; int ( * connect ) ( s#socket * , s#sockaddr * , int , int ) ; int ( * socketpair ) ( s#socket * , s#socket * ) ; int ( * accept ) ( s#socket * , s#socket * , int , t#bool ) ; int ( * getname ) ( s#socket * , s#sockaddr * , int ) ; t#__poll_t ( * poll ) ( s#file * , s#socket * , s#poll_table_struct * ) ; int ( * ioctl ) ( s#socket * , unsigned int , unsigned long ) ; int ( * compat_ioctl ) ( s#socket * , unsigned int , unsigned long ) ; int ( * gettstamp ) ( s#socket * , void * , t#bool , t#bool ) ; int ( * listen ) ( s#socket * , int ) ; int ( * shutdown ) ( s#socket * , int ) ; int ( * setsockopt ) ( s#socket * , int , int , char * , unsigned int ) ; int ( * getsockopt ) ( s#socket * , int , int , char * , int * ) ; int ( * compat_setsockopt ) ( s#socket * , int , int , char * , unsigned int ) ; int ( * compat_getsockopt ) ( s#socket * , int , int , char * , int * ) ; int ( * sendmsg ) ( s#socket * , s#msghdr * , t#size_t ) ; int ( * recvmsg ) ( s#socket * , s#msghdr * , t#size_t , int ) ; int ( * mmap ) ( s#file * , s#socket * , s#vm_area_struct * ) ; t#ssize_t ( * sendpage ) ( s#socket * , s#page * , int , t#size_t , int ) ; t#ssize_t ( * splice_read ) ( s#socket * , t#loff_t * , s#pipe_inode_info * , t#size_t , unsigned int ) ; int ( * set_peek_off ) ( s#sock * , int ) ; int ( * peek_len ) ( s#socket * ) ; int ( * read_sock ) ( s#sock * , t#read_descriptor_t * , t#sk_read_actor_t ) ; int ( * sendpage_locked ) ( s#sock * , s#page * , int , t#size_t , int ) ; int ( * sendmsg_locked ) ( s#sock * , s#msghdr * , t#size_t ) ; int ( * set_rcvlowat ) ( s#sock * , int ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; }
s#psi_group struct psi_group { s#mutex avgs_lock ; s#psi_group_cpu * pcpu ; t#u64 avg_total [ E#NR_PSI_STATES - 1 ] ; t#u64 avg_last_update ; t#u64 avg_next_update ; s#delayed_work avgs_work ; t#u64 total [ E#NR_PSI_AGGREGATORS ] [ E#NR_PSI_STATES - 1 ] ; unsigned long avg [ E#NR_PSI_STATES - 1 ] [ 3 ] ; t#atomic_t poll_scheduled ; s#kthread_worker * poll_kworker ; s#kthread_delayed_work poll_work ; s#mutex trigger_lock ; s#list_head triggers ; t#u32 nr_triggers [ E#NR_PSI_STATES - 1 ] ; t#u32 poll_states ; t#u64 poll_min_period ; t#u64 polling_total [ E#NR_PSI_STATES - 1 ] ; t#u64 polling_next_update ; t#u64 polling_until ; }
s#psi_group_cpu struct psi_group_cpu { t#seqcount_t seq __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; unsigned int tasks [ E#NR_PSI_TASK_COUNTS ] ; t#u32 state_mask ; t#u32 times [ E#NR_PSI_STATES ] ; t#u64 state_start ; t#u32 times_prev [ E#NR_PSI_AGGREGATORS ] [ E#NR_PSI_STATES ] __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; }
s#pt_regs struct pt_regs { unsigned long r15 ; unsigned long r14 ; unsigned long r13 ; unsigned long r12 ; unsigned long bp ; unsigned long bx ; unsigned long r11 ; unsigned long r10 ; unsigned long r9 ; unsigned long r8 ; unsigned long ax ; unsigned long cx ; unsigned long dx ; unsigned long si ; unsigned long di ; unsigned long orig_ax ; unsigned long ip ; unsigned long cs ; unsigned long flags ; unsigned long sp ; unsigned long ss ; }
s#pv_cpu_ops struct pv_cpu_ops { void ( * io_delay ) ( void ) ; unsigned long ( * get_debugreg ) ( int ) ; void ( * set_debugreg ) ( int , unsigned long ) ; unsigned long ( * read_cr0 ) ( void ) ; void ( * write_cr0 ) ( unsigned long ) ; void ( * write_cr4 ) ( unsigned long ) ; void ( * load_tr_desc ) ( void ) ; void ( * load_gdt ) ( const s#desc_ptr * ) ; void ( * load_idt ) ( const s#desc_ptr * ) ; void ( * set_ldt ) ( const void * , unsigned ) ; unsigned long ( * store_tr ) ( void ) ; void ( * load_tls ) ( s#thread_struct * , unsigned int ) ; void ( * load_gs_index ) ( unsigned int ) ; void ( * write_ldt_entry ) ( s#desc_struct * , int , const void * ) ; void ( * write_gdt_entry ) ( s#desc_struct * , int , const void * , int ) ; void ( * write_idt_entry ) ( t#gate_desc * , int , const t#gate_desc * ) ; void ( * alloc_ldt ) ( s#desc_struct * , unsigned ) ; void ( * free_ldt ) ( s#desc_struct * , unsigned ) ; void ( * load_sp0 ) ( unsigned long ) ; void ( * set_iopl_mask ) ( unsigned ) ; void ( * wbinvd ) ( void ) ; void ( * cpuid ) ( unsigned int * , unsigned int * , unsigned int * , unsigned int * ) ; t#u64 ( * read_msr ) ( unsigned int ) ; void ( * write_msr ) ( unsigned int , unsigned , unsigned ) ; t#u64 ( * read_msr_safe ) ( unsigned int , int * ) ; int ( * write_msr_safe ) ( unsigned int , unsigned , unsigned ) ; t#u64 ( * read_pmc ) ( int ) ; void ( * usergs_sysret64 ) ( void ) ; void ( * iret ) ( void ) ; void ( * swapgs ) ( void ) ; void ( * start_context_switch ) ( s#task_struct * ) ; void ( * end_context_switch ) ( s#task_struct * ) ; }
s#pv_init_ops struct pv_init_ops { unsigned ( * patch ) ( t#u8 , void * , unsigned long , unsigned ) ; }
s#pv_irq_ops struct pv_irq_ops { s#paravirt_callee_save save_fl ; s#paravirt_callee_save restore_fl ; s#paravirt_callee_save irq_disable ; s#paravirt_callee_save irq_enable ; void ( * safe_halt ) ( void ) ; void ( * halt ) ( void ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#pv_lazy_ops struct pv_lazy_ops { void ( * enter ) ( void ) ; void ( * leave ) ( void ) ; void ( * flush ) ( void ) ; }
s#pv_lock_ops struct pv_lock_ops { void ( * queued_spin_lock_slowpath ) ( s#qspinlock * , t#u32 ) ; s#paravirt_callee_save queued_spin_unlock ; void ( * wait ) ( t#u8 * , t#u8 ) ; void ( * kick ) ( int ) ; s#paravirt_callee_save vcpu_is_preempted ; unsigned long uek_reserved1 ; }
s#pv_mmu_ops struct pv_mmu_ops { void ( * flush_tlb_user ) ( void ) ; void ( * flush_tlb_kernel ) ( void ) ; void ( * flush_tlb_one_user ) ( unsigned long ) ; void ( * flush_tlb_others ) ( const s#cpumask * , const s#flush_tlb_info * ) ; void ( * tlb_remove_table ) ( s#mmu_gather * , void * ) ; void ( * exit_mmap ) ( s#mm_struct * ) ; s#paravirt_callee_save read_cr2 ; void ( * write_cr2 ) ( unsigned long ) ; unsigned long ( * read_cr3 ) ( void ) ; void ( * write_cr3 ) ( unsigned long ) ; void ( * activate_mm ) ( s#mm_struct * , s#mm_struct * ) ; void ( * dup_mmap ) ( s#mm_struct * , s#mm_struct * ) ; int ( * pgd_alloc ) ( s#mm_struct * ) ; void ( * pgd_free ) ( s#mm_struct * , t#pgd_t * ) ; void ( * alloc_pte ) ( s#mm_struct * , unsigned long ) ; void ( * alloc_pmd ) ( s#mm_struct * , unsigned long ) ; void ( * alloc_pud ) ( s#mm_struct * , unsigned long ) ; void ( * alloc_p4d ) ( s#mm_struct * , unsigned long ) ; void ( * release_pte ) ( unsigned long ) ; void ( * release_pmd ) ( unsigned long ) ; void ( * release_pud ) ( unsigned long ) ; void ( * release_p4d ) ( unsigned long ) ; void ( * set_pte ) ( t#pte_t * , t#pte_t ) ; void ( * set_pte_at ) ( s#mm_struct * , unsigned long , t#pte_t * , t#pte_t ) ; void ( * set_pmd ) ( t#pmd_t * , t#pmd_t ) ; t#pte_t ( * ptep_modify_prot_start ) ( s#vm_area_struct * , unsigned long , t#pte_t * ) ; void ( * ptep_modify_prot_commit ) ( s#vm_area_struct * , unsigned long , t#pte_t * , t#pte_t ) ; s#paravirt_callee_save pte_val ; s#paravirt_callee_save make_pte ; s#paravirt_callee_save pgd_val ; s#paravirt_callee_save make_pgd ; void ( * set_pud ) ( t#pud_t * , t#pud_t ) ; s#paravirt_callee_save pmd_val ; s#paravirt_callee_save make_pmd ; s#paravirt_callee_save pud_val ; s#paravirt_callee_save make_pud ; void ( * set_p4d ) ( t#p4d_t * , t#p4d_t ) ; s#paravirt_callee_save p4d_val ; s#paravirt_callee_save make_p4d ; void ( * set_pgd ) ( t#pgd_t * , t#pgd_t ) ; s#pv_lazy_ops lazy_mode ; void ( * set_fixmap ) ( unsigned , t#phys_addr_t , t#pgprot_t ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#pv_time_ops struct pv_time_ops { unsigned long long ( * sched_clock ) ( void ) ; unsigned long long ( * steal_clock ) ( int ) ; }
s#qc_dqblk struct qc_dqblk { int d_fieldmask ; t#u64 d_spc_hardlimit ; t#u64 d_spc_softlimit ; t#u64 d_ino_hardlimit ; t#u64 d_ino_softlimit ; t#u64 d_space ; t#u64 d_ino_count ; t#s64 d_ino_timer ; t#s64 d_spc_timer ; int d_ino_warns ; int d_spc_warns ; t#u64 d_rt_spc_hardlimit ; t#u64 d_rt_spc_softlimit ; t#u64 d_rt_space ; t#s64 d_rt_spc_timer ; int d_rt_spc_warns ; }
s#qc_info struct qc_info { int i_fieldmask ; unsigned int i_flags ; unsigned int i_spc_timelimit ; unsigned int i_ino_timelimit ; unsigned int i_rt_spc_timelimit ; unsigned int i_spc_warnlimit ; unsigned int i_ino_warnlimit ; unsigned int i_rt_spc_warnlimit ; }
s#qc_state struct qc_state { unsigned int s_incoredqs ; s#qc_type_state s_state [ 3 ] ; }
s#qc_type_state struct qc_type_state { unsigned int flags ; unsigned int spc_timelimit ; unsigned int ino_timelimit ; unsigned int rt_spc_timelimit ; unsigned int spc_warnlimit ; unsigned int ino_warnlimit ; unsigned int rt_spc_warnlimit ; unsigned long long ino ; t#blkcnt_t blocks ; t#blkcnt_t nextents ; }
s#qdisc_size_table struct qdisc_size_table { s#callback_head rcu ; s#list_head list ; s#tc_sizespec szopts ; int refcnt ; t#u16 data [ ] ; }
s#qdisc_skb_head struct qdisc_skb_head { s#sk_buff * head ; s#sk_buff * tail ; t#__u32 qlen ; t#spinlock_t lock ; }
s#qdisc_walker@0594779d struct qdisc_walker { UNKNOWN }
s#qdisc_walker@231386e1 struct qdisc_walker { int stop ; int skip ; int count ; int ( * fn ) ( s#Qdisc * , unsigned long , s#qdisc_walker * ) ; }
s#qrwlock struct qrwlock { union { t#atomic_t cnts ; struct { t#u8 wlocked ; t#u8 __lstate [ 3 ] ; } ; } ; t#arch_spinlock_t wait_lock ; }
s#qspinlock struct qspinlock { union { t#atomic_t val ; struct { t#u8 locked ; t#u8 pending ; } ; struct { t#u16 locked_pending ; t#u16 tail ; } ; } ; }
s#qstr struct qstr { union { struct { t#u32 hash ; t#u32 len ; } ; t#u64 hash_len ; } ; const unsigned char * name ; }
s#queue_limits struct queue_limits { unsigned long bounce_pfn ; unsigned long seg_boundary_mask ; unsigned long virt_boundary_mask ; unsigned int max_hw_sectors ; unsigned int max_dev_sectors ; unsigned int chunk_sectors ; unsigned int max_sectors ; unsigned int max_segment_size ; unsigned int physical_block_size ; unsigned int logical_block_size ; unsigned int alignment_offset ; unsigned int io_min ; unsigned int io_opt ; unsigned int max_discard_sectors ; unsigned int max_hw_discard_sectors ; unsigned int max_write_same_sectors ; unsigned int max_write_zeroes_sectors ; unsigned int discard_granularity ; unsigned int discard_alignment ; unsigned short max_segments ; unsigned short max_integrity_segments ; unsigned short max_discard_segments ; unsigned char misaligned ; unsigned char discard_misaligned ; unsigned char raid_partial_stripes_expensive ; e#blk_zoned_model zoned ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#quota_format_ops struct quota_format_ops { int ( * check_quota_file ) ( s#super_block * , int ) ; int ( * read_file_info ) ( s#super_block * , int ) ; int ( * write_file_info ) ( s#super_block * , int ) ; int ( * free_file_info ) ( s#super_block * , int ) ; int ( * read_dqblk ) ( s#dquot * ) ; int ( * commit_dqblk ) ( s#dquot * ) ; int ( * release_dqblk ) ( s#dquot * ) ; int ( * get_next_id ) ( s#super_block * , s#kqid * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#quota_format_type struct quota_format_type { int qf_fmt_id ; const s#quota_format_ops * qf_ops ; s#module * qf_owner ; s#quota_format_type * qf_next ; }
s#quota_info struct quota_info { unsigned int flags ; s#rw_semaphore dqio_sem ; s#inode * files [ 3 ] ; s#mem_dqinfo info [ 3 ] ; const s#quota_format_ops * ops [ 3 ] ; }
s#quotactl_ops struct quotactl_ops { int ( * quota_on ) ( s#super_block * , int , int , const s#path * ) ; int ( * quota_off ) ( s#super_block * , int ) ; int ( * quota_enable ) ( s#super_block * , unsigned int ) ; int ( * quota_disable ) ( s#super_block * , unsigned int ) ; int ( * quota_sync ) ( s#super_block * , int ) ; int ( * set_info ) ( s#super_block * , int , s#qc_info * ) ; int ( * get_dqblk ) ( s#super_block * , s#kqid , s#qc_dqblk * ) ; int ( * get_nextdqblk ) ( s#super_block * , s#kqid * , s#qc_dqblk * ) ; int ( * set_dqblk ) ( s#super_block * , s#kqid , s#qc_dqblk * ) ; int ( * get_state ) ( s#super_block * , s#qc_state * ) ; int ( * rm_xquota ) ( s#super_block * , unsigned int ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#rate_sample struct rate_sample { t#u64 prior_mstamp ; t#u32 prior_delivered ; t#s32 delivered ; long interval_us ; t#u32 snd_interval_us ; t#u32 rcv_interval_us ; long rtt_us ; int losses ; t#u32 acked_sacked ; t#u32 prior_in_flight ; t#bool is_app_limited ; t#bool is_retrans ; t#bool is_ack_delayed ; }
s#ratelimit_state struct ratelimit_state { t#raw_spinlock_t lock ; int interval ; int burst ; int printed ; int missed ; unsigned long begin ; unsigned long flags ; }
s#raw_hashinfo@1ea76cc0 struct raw_hashinfo { t#rwlock_t lock ; s#hlist_head ht [ 256 ] ; }
s#raw_hashinfo@98139727 struct raw_hashinfo { UNKNOWN }
s#raw_notifier_head struct raw_notifier_head { s#notifier_block * head ; }
s#raw_spinlock struct raw_spinlock { t#arch_spinlock_t raw_lock ; unsigned int magic , owner_cpu ; void * owner ; s#lockdep_map dep_map ; }
s#rb_node struct rb_node { unsigned long __rb_parent_color ; s#rb_node * rb_right ; s#rb_node * rb_left ; }
s#rb_root struct rb_root { s#rb_node * rb_node ; }
s#rb_root_cached struct rb_root_cached { s#rb_root rb_root ; s#rb_node * rb_leftmost ; }
s#rchan struct rchan { t#u32 version ; t#size_t subbuf_size ; t#size_t n_subbufs ; t#size_t alloc_size ; s#rchan_callbacks * cb ; s#kref kref ; void * private_data ; t#size_t last_toobig ; s#rchan_buf * * buf ; int is_global ; s#list_head list ; s#dentry * parent ; int has_base_filename ; char base_filename [ 255 ] ; }
s#rchan_buf struct rchan_buf { void * start ; void * data ; t#size_t offset ; t#size_t subbufs_produced ; t#size_t subbufs_consumed ; s#rchan * chan ; t#wait_queue_head_t read_wait ; s#irq_work wakeup_work ; s#dentry * dentry ; s#kref kref ; s#page * * page_array ; unsigned int page_count ; unsigned int finalized ; t#size_t * padding ; t#size_t prev_padding ; t#size_t bytes_consumed ; t#size_t early_bytes ; unsigned int cpu ; }
s#rchan_callbacks struct rchan_callbacks { int ( * subbuf_start ) ( s#rchan_buf * , void * , void * , t#size_t ) ; void ( * buf_mapped ) ( s#rchan_buf * , s#file * ) ; void ( * buf_unmapped ) ( s#rchan_buf * , s#file * ) ; s#dentry * ( * create_buf_file ) ( const char * , s#dentry * , t#umode_t , s#rchan_buf * , int * ) ; int ( * remove_buf_file ) ( s#dentry * ) ; }
s#rcu_segcblist struct rcu_segcblist { s#callback_head * head ; s#callback_head * * tails [ 4 ] ; unsigned long gp_seq [ 4 ] ; t#atomic_long_t len ; long len_lazy ; t#u8 enabled ; t#u8 offloaded ; }
s#rcu_sync struct rcu_sync { int gp_state ; int gp_count ; t#wait_queue_head_t gp_wait ; s#callback_head cb_head ; }
s#rcu_work struct rcu_work { s#work_struct work ; s#callback_head rcu ; s#workqueue_struct * wq ; int cpu ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#rcuwait struct rcuwait { s#task_struct * task ; }
s#reclaim_state@7fc9a8a2 struct reclaim_state { unsigned long reclaimed_slab ; }
s#reclaim_state@8708b031 struct reclaim_state { UNKNOWN }
s#refcount_struct struct refcount_struct { t#atomic_t refs ; }
s#regulatory_request struct regulatory_request { s#callback_head callback_head ; int wiphy_idx ; e#nl80211_reg_initiator initiator ; e#nl80211_user_reg_hint_type user_reg_hint_type ; char alpha2 [ 3 ] ; e#nl80211_dfs_regions dfs_region ; t#bool intersect ; t#bool processed ; e#environment_cap country_ie_env ; s#list_head list ; }
s#request struct request { s#request_queue * q ; s#blk_mq_ctx * mq_ctx ; s#blk_mq_hw_ctx * mq_hctx ; unsigned int cmd_flags ; t#req_flags_t rq_flags ; int tag ; int internal_tag ; unsigned int __data_len ; t#sector_t __sector ; s#bio * bio ; s#bio * biotail ; s#list_head queuelist ; union { s#hlist_node hash ; s#list_head ipi_list ; } ; union { s#rb_node rb_node ; s#bio_vec special_vec ; void * completion_data ; int error_count ; } ; union { struct { s#io_cq * icq ; void * priv [ 2 ] ; } elv ; struct { unsigned int seq ; s#list_head list ; t#rq_end_io_fn * saved_end_io ; } flush ; } ; s#gendisk * rq_disk ; s#hd_struct * part ; t#u64 start_time_ns ; t#u64 io_start_time_ns ; unsigned short wbt_flags ; unsigned short stats_sectors ; unsigned short nr_phys_segments ; unsigned short nr_integrity_segments ; unsigned short write_hint ; unsigned short ioprio ; unsigned int extra_len ; e#mq_rq_state state ; t#refcount_t ref ; unsigned int timeout ; unsigned long deadline ; union { s#__call_single_data csd ; t#u64 fifo_time ; } ; t#rq_end_io_fn * end_io ; void * end_io_data ; }
s#request_queue@4916233f struct request_queue { UNKNOWN }
s#request_queue@7d823707 struct request_queue { s#request * last_merge ; s#elevator_queue * elevator ; s#blk_queue_stats * stats ; s#rq_qos * rq_qos ; t#make_request_fn * make_request_fn ; t#dma_drain_needed_fn * dma_drain_needed ; const s#blk_mq_ops * mq_ops ; s#blk_mq_ctx * queue_ctx ; unsigned int nr_queues ; unsigned int queue_depth ; s#blk_mq_hw_ctx * * queue_hw_ctx ; unsigned int nr_hw_queues ; s#backing_dev_info * backing_dev_info ; void * queuedata ; unsigned long queue_flags ; t#atomic_t pm_only ; int id ; t#gfp_t bounce_gfp ; t#spinlock_t queue_lock ; s#kobject kobj ; s#kobject * mq_kobj ; s#blk_integrity integrity ; s#device * dev ; int rpm_status ; unsigned int nr_pending ; unsigned long nr_requests ; unsigned int dma_drain_size ; void * dma_drain_buffer ; unsigned int dma_pad_mask ; unsigned int dma_alignment ; unsigned int rq_timeout ; int poll_nsec ; s#blk_stat_callback * poll_cb ; s#blk_rq_stat poll_stat [ 16 ] ; s#timer_list timeout ; s#work_struct timeout_work ; s#list_head icq_list ; unsigned long blkcg_pols [ ( ( ( 5 ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; s#blkcg_gq * root_blkg ; s#list_head blkg_list ; s#queue_limits limits ; unsigned int required_elevator_features ; unsigned int nr_zones ; unsigned long * seq_zones_bitmap ; unsigned long * seq_zones_wlock ; unsigned int sg_timeout ; unsigned int sg_reserved_size ; int node ; s#blk_trace * blk_trace ; s#mutex blk_trace_mutex ; s#blk_flush_queue * fq ; s#list_head requeue_list ; t#spinlock_t requeue_lock ; s#delayed_work requeue_work ; s#mutex sysfs_lock ; s#mutex sysfs_dir_lock ; s#list_head unused_hctx_list ; t#spinlock_t unused_hctx_lock ; int mq_freeze_depth ; s#bsg_class_device bsg_dev ; s#throtl_data * td ; s#callback_head callback_head ; t#wait_queue_head_t mq_freeze_wq ; s#mutex mq_freeze_lock ; s#percpu_ref q_usage_counter ; s#blk_mq_tag_set * tag_set ; s#list_head tag_set_list ; s#bio_set bio_split ; s#dentry * debugfs_dir ; s#dentry * sched_debugfs_dir ; s#dentry * rqos_debugfs_dir ; t#bool mq_sysfs_init_done ; t#size_t cmd_size ; s#work_struct release_work ; t#u64 write_hints [ 5 ] ; }
s#request_sock@568be5db struct request_sock { s#sock_common __req_common ; s#request_sock * dl_next ; t#u16 mss ; t#u8 num_retrans ; t#u8 cookie_ts : 1 ; t#u8 num_timeout : 7 ; t#u32 ts_recent ; s#timer_list rsk_timer ; const s#request_sock_ops * rsk_ops ; s#sock * sk ; t#u32 * saved_syn ; t#u32 secid ; t#u32 peer_secid ; }
s#request_sock@b3c35828 struct request_sock { UNKNOWN }
s#request_sock_ops@5710a44a struct request_sock_ops { int family ; unsigned int obj_size ; s#kmem_cache * slab ; char * slab_name ; int ( * rtx_syn_ack ) ( const s#sock * , s#request_sock * ) ; void ( * send_ack ) ( const s#sock * , s#sk_buff * , s#request_sock * ) ; void ( * send_reset ) ( const s#sock * , s#sk_buff * ) ; void ( * destructor ) ( s#request_sock * ) ; void ( * syn_ack_timeout ) ( const s#request_sock * ) ; }
s#request_sock_ops@b37b346c struct request_sock_ops { UNKNOWN }
s#reset_control struct reset_control { UNKNOWN }
s#resource struct resource { t#resource_size_t start ; t#resource_size_t end ; const char * name ; unsigned long flags ; unsigned long desc ; s#resource * parent , * sibling , * child ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#restart_block struct restart_block { long ( * fn ) ( s#restart_block * ) ; union { struct { t#u32 * uaddr ; t#u32 val ; t#u32 flags ; t#u32 bitset ; t#u64 time ; t#u32 * uaddr2 ; } futex ; struct { t#clockid_t clockid ; e#timespec_type type ; union { s#__kernel_timespec * rmtp ; s#old_timespec32 * compat_rmtp ; } ; t#u64 expires ; } nanosleep ; struct { s#pollfd * ufds ; int nfds ; int has_timeout ; unsigned long tv_sec ; unsigned long tv_nsec ; } poll ; } ; }
s#return_instance struct return_instance { s#uprobe * uprobe ; unsigned long func ; unsigned long stack ; unsigned long orig_ret_vaddr ; t#bool chained ; s#return_instance * next ; }
s#rhash_head struct rhash_head { s#rhash_head * next ; }
s#rhash_lock_head struct rhash_lock_head { }
s#rhashtable struct rhashtable { s#bucket_table * tbl ; unsigned int key_len ; unsigned int max_elems ; s#rhashtable_params p ; t#bool rhlist ; s#work_struct run_work ; s#mutex mutex ; t#spinlock_t lock ; t#atomic_t nelems ; }
s#rhashtable_compare_arg struct rhashtable_compare_arg { s#rhashtable * ht ; const void * key ; }
s#rhashtable_params struct rhashtable_params { t#u16 nelem_hint ; t#u16 key_len ; t#u16 key_offset ; t#u16 head_offset ; unsigned int max_size ; t#u16 min_size ; t#bool automatic_shrinking ; t#rht_hashfn_t hashfn ; t#rht_obj_hashfn_t obj_hashfn ; t#rht_obj_cmpfn_t obj_cmpfn ; }
s#ring_buffer@553305a1 struct ring_buffer { UNKNOWN }
s#ring_buffer@e56f3513 struct ring_buffer { t#refcount_t refcount ; s#callback_head callback_head ; s#work_struct work ; int page_order ; int nr_pages ; int overwrite ; int paused ; t#atomic_t poll ; t#local_t head ; unsigned int nest ; t#local_t events ; t#local_t wakeup ; t#local_t lost ; long watermark ; long aux_watermark ; t#spinlock_t event_lock ; s#list_head event_list ; t#atomic_t mmap_count ; unsigned long mmap_locked ; s#user_struct * mmap_user ; long aux_head ; unsigned int aux_nest ; long aux_wakeup ; unsigned long aux_pgoff ; int aux_nr_pages ; int aux_overwrite ; t#atomic_t aux_mmap_count ; unsigned long aux_mmap_locked ; void ( * free_aux ) ( void * ) ; t#refcount_t aux_refcount ; void * * aux_pages ; void * aux_priv ; s#perf_event_mmap_page * user_page ; void * data_pages [ 0 ] ; }
s#ring_buffer_event struct ring_buffer_event { t#u32 type_len : 5 , time_delta : 27 ; t#u32 array [ ] ; }
s#ring_buffer_iter struct ring_buffer_iter { UNKNOWN }
s#rlimit struct rlimit { t#__kernel_ulong_t rlim_cur ; t#__kernel_ulong_t rlim_max ; }
s#robust_list struct robust_list { s#robust_list * next ; }
s#robust_list_head@0e27a833 struct robust_list_head { UNKNOWN }
s#robust_list_head@eb94c81f struct robust_list_head { s#robust_list list ; long futex_offset ; s#robust_list * list_op_pending ; }
s#root_domain struct root_domain { t#atomic_t refcount ; t#atomic_t rto_count ; s#callback_head rcu ; t#cpumask_var_t span ; t#cpumask_var_t online ; int overload ; int overutilized ; t#cpumask_var_t dlo_mask ; t#atomic_t dlo_count ; s#dl_bw dl_bw ; s#cpudl cpudl ; s#irq_work rto_push_work ; t#raw_spinlock_t rto_lock ; int rto_loop ; int rto_cpu ; t#atomic_t rto_loop_next ; t#atomic_t rto_loop_start ; t#cpumask_var_t rto_mask ; s#cpupri cpupri ; unsigned long max_cpu_capacity ; s#perf_domain * pd ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#rpc_auth struct rpc_auth { unsigned int au_cslack ; unsigned int au_rslack ; unsigned int au_verfsize ; unsigned int au_ralign ; unsigned int au_flags ; const s#rpc_authops * au_ops ; t#rpc_authflavor_t au_flavor ; t#refcount_t au_count ; s#rpc_cred_cache * au_credcache ; }
s#rpc_auth_create_args struct rpc_auth_create_args { t#rpc_authflavor_t pseudoflavor ; const char * target_name ; }
s#rpc_authops struct rpc_authops { s#module * owner ; t#rpc_authflavor_t au_flavor ; char * au_name ; s#rpc_auth * ( * create ) ( const s#rpc_auth_create_args * , s#rpc_clnt * ) ; void ( * destroy ) ( s#rpc_auth * ) ; int ( * hash_cred ) ( s#auth_cred * , unsigned int ) ; s#rpc_cred * ( * lookup_cred ) ( s#rpc_auth * , s#auth_cred * , int ) ; s#rpc_cred * ( * crcreate ) ( s#rpc_auth * , s#auth_cred * , int , t#gfp_t ) ; int ( * list_pseudoflavors ) ( t#rpc_authflavor_t * , int ) ; t#rpc_authflavor_t ( * info2flavor ) ( s#rpcsec_gss_info * ) ; int ( * flavor2info ) ( t#rpc_authflavor_t , s#rpcsec_gss_info * ) ; int ( * key_timeout ) ( s#rpc_auth * , s#rpc_cred * ) ; }
s#rpc_call_ops struct rpc_call_ops { void ( * rpc_call_prepare ) ( s#rpc_task * , void * ) ; void ( * rpc_call_done ) ( s#rpc_task * , void * ) ; void ( * rpc_count_stats ) ( s#rpc_task * , void * ) ; void ( * rpc_release ) ( void * ) ; }
s#rpc_clnt@d9f5d31a struct rpc_clnt { t#atomic_t cl_count ; unsigned int cl_clid ; s#list_head cl_clients ; s#list_head cl_tasks ; t#spinlock_t cl_lock ; s#rpc_xprt * cl_xprt ; const s#rpc_procinfo * cl_procinfo ; t#u32 cl_prog , cl_vers , cl_maxproc ; s#rpc_auth * cl_auth ; s#rpc_stat * cl_stats ; s#rpc_iostats * cl_metrics ; unsigned int cl_softrtry : 1 , cl_softerr : 1 , cl_discrtry : 1 , cl_noretranstimeo : 1 , cl_autobind : 1 , cl_chatty : 1 ; s#rpc_rtt * cl_rtt ; const s#rpc_timeout * cl_timeout ; t#atomic_t cl_swapper ; int cl_nodelen ; char cl_nodename [ 64 + 1 ] ; s#rpc_pipe_dir_head cl_pipedir_objects ; s#rpc_clnt * cl_parent ; s#rpc_rtt cl_rtt_default ; s#rpc_timeout cl_timeout_default ; const s#rpc_program * cl_program ; const char * cl_principal ; s#dentry * cl_debugfs ; s#rpc_xprt_iter cl_xpi ; const s#cred * cl_cred ; }
s#rpc_clnt@e118aeb9 struct rpc_clnt { UNKNOWN }
s#rpc_cred struct rpc_cred { s#hlist_node cr_hash ; s#list_head cr_lru ; s#callback_head cr_rcu ; s#rpc_auth * cr_auth ; const s#rpc_credops * cr_ops ; unsigned long cr_expire ; unsigned long cr_flags ; t#refcount_t cr_count ; const s#cred * cr_cred ; }
s#rpc_cred_cache struct rpc_cred_cache { UNKNOWN }
s#rpc_credops struct rpc_credops { const char * cr_name ; int ( * cr_init ) ( s#rpc_auth * , s#rpc_cred * ) ; void ( * crdestroy ) ( s#rpc_cred * ) ; int ( * crmatch ) ( s#auth_cred * , s#rpc_cred * , int ) ; int ( * crmarshal ) ( s#rpc_task * , s#xdr_stream * ) ; int ( * crrefresh ) ( s#rpc_task * ) ; int ( * crvalidate ) ( s#rpc_task * , s#xdr_stream * ) ; int ( * crwrap_req ) ( s#rpc_task * , s#xdr_stream * ) ; int ( * crunwrap_resp ) ( s#rpc_task * , s#xdr_stream * ) ; int ( * crkey_timeout ) ( s#rpc_cred * ) ; char * ( * crstringify_acceptor ) ( s#rpc_cred * ) ; t#bool ( * crneed_reencode ) ( s#rpc_task * ) ; }
s#rpc_iostats@e5f706f3 struct rpc_iostats { UNKNOWN }
s#rpc_iostats@ebd9e936 struct rpc_iostats { t#spinlock_t om_lock ; unsigned long om_ops , om_ntrans , om_timeouts ; unsigned long long om_bytes_sent , om_bytes_recv ; t#ktime_t om_queue , om_rtt , om_execute ; unsigned long om_error_status ; }
s#rpc_message struct rpc_message { const s#rpc_procinfo * rpc_proc ; void * rpc_argp ; void * rpc_resp ; const s#cred * rpc_cred ; }
s#rpc_pipe_dir_head struct rpc_pipe_dir_head { s#list_head pdh_entries ; s#dentry * pdh_dentry ; }
s#rpc_procinfo@1bc97858 struct rpc_procinfo { UNKNOWN }
s#rpc_procinfo@3f76fc57 struct rpc_procinfo { t#u32 p_proc ; t#kxdreproc_t p_encode ; t#kxdrdproc_t p_decode ; unsigned int p_arglen ; unsigned int p_replen ; unsigned int p_timer ; t#u32 p_statidx ; const char * p_name ; }
s#rpc_program struct rpc_program { const char * name ; t#u32 number ; unsigned int nrvers ; const s#rpc_version * * version ; s#rpc_stat * stats ; const char * pipe_dir_name ; }
s#rpc_rqst@05b006a7 struct rpc_rqst { UNKNOWN }
s#rpc_rqst@e09ebe9d struct rpc_rqst { s#rpc_xprt * rq_xprt ; s#xdr_buf rq_snd_buf ; s#xdr_buf rq_rcv_buf ; s#rpc_task * rq_task ; s#rpc_cred * rq_cred ; t#__be32 rq_xid ; int rq_cong ; t#u32 rq_seqno ; int rq_enc_pages_num ; s#page * * rq_enc_pages ; void ( * rq_release_snd_buf ) ( s#rpc_rqst * ) ; union { s#list_head rq_list ; s#rb_node rq_recv ; } ; s#list_head rq_xmit ; s#list_head rq_xmit2 ; void * rq_buffer ; t#size_t rq_callsize ; void * rq_rbuffer ; t#size_t rq_rcvsize ; t#size_t rq_xmit_bytes_sent ; t#size_t rq_reply_bytes_recvd ; s#xdr_buf rq_private_buf ; unsigned long rq_majortimeo ; unsigned long rq_timeout ; t#ktime_t rq_rtt ; unsigned int rq_retries ; unsigned int rq_connect_cookie ; t#atomic_t rq_pin ; t#u32 rq_bytes_sent ; t#ktime_t rq_xtime ; int rq_ntrans ; s#list_head rq_bc_list ; unsigned long rq_bc_pa_state ; s#list_head rq_bc_pa_list ; }
s#rpc_rtt struct rpc_rtt { unsigned long timeo ; unsigned long srtt [ 5 ] ; unsigned long sdrtt [ 5 ] ; int ntimeouts [ 5 ] ; }
s#rpc_stat struct rpc_stat { const s#rpc_program * program ; unsigned int netcnt , netudpcnt , nettcpcnt , nettcpconn , netreconn ; unsigned int rpccnt , rpcretrans , rpcauthrefresh , rpcgarbage ; }
s#rpc_task struct rpc_task { t#atomic_t tk_count ; int tk_status ; s#list_head tk_task ; void ( * tk_callback ) ( s#rpc_task * ) ; void ( * tk_action ) ( s#rpc_task * ) ; unsigned long tk_timeout ; unsigned long tk_runstate ; s#rpc_wait_queue * tk_waitqueue ; union { s#work_struct tk_work ; s#rpc_wait tk_wait ; } u ; int tk_rpc_status ; s#rpc_message tk_msg ; void * tk_calldata ; const s#rpc_call_ops * tk_ops ; s#rpc_clnt * tk_client ; s#rpc_xprt * tk_xprt ; s#rpc_cred * tk_op_cred ; s#rpc_rqst * tk_rqstp ; s#workqueue_struct * tk_workqueue ; t#ktime_t tk_start ; t#pid_t tk_owner ; unsigned short tk_flags ; unsigned short tk_timeouts ; unsigned short tk_pid ; unsigned char tk_priority : 2 , tk_garb_retry : 2 , tk_cred_retry : 2 ; }
s#rpc_task_setup struct rpc_task_setup { s#rpc_task * task ; s#rpc_clnt * rpc_client ; s#rpc_xprt * rpc_xprt ; s#rpc_cred * rpc_op_cred ; const s#rpc_message * rpc_message ; const s#rpc_call_ops * callback_ops ; void * callback_data ; s#workqueue_struct * workqueue ; unsigned short flags ; signed char priority ; }
s#rpc_timeout struct rpc_timeout { unsigned long to_initval , to_maxval , to_increment ; unsigned int to_retries ; unsigned char to_exponential ; }
s#rpc_timer struct rpc_timer { s#list_head list ; unsigned long expires ; s#delayed_work dwork ; }
s#rpc_version struct rpc_version { t#u32 number ; unsigned int nrprocs ; const s#rpc_procinfo * procs ; unsigned int * counts ; }
s#rpc_wait struct rpc_wait { s#list_head list ; s#list_head links ; s#list_head timer_list ; }
s#rpc_wait_queue struct rpc_wait_queue { t#spinlock_t lock ; s#list_head tasks [ ( 1 + ( 2 ) - ( - 1 ) ) ] ; unsigned char maxpriority ; unsigned char priority ; unsigned char nr ; unsigned short qlen ; s#rpc_timer timer_list ; const char * name ; }
s#rpc_xprt@3ca1b48d struct rpc_xprt { UNKNOWN }
s#rpc_xprt@ce1d96b0 struct rpc_xprt { s#kref kref ; const s#rpc_xprt_ops * ops ; const s#rpc_timeout * timeout ; s#__kernel_sockaddr_storage addr ; t#size_t addrlen ; int prot ; unsigned long cong ; unsigned long cwnd ; t#size_t max_payload ; s#rpc_wait_queue binding ; s#rpc_wait_queue sending ; s#rpc_wait_queue pending ; s#rpc_wait_queue backlog ; s#list_head free ; unsigned int max_reqs ; unsigned int min_reqs ; unsigned int num_reqs ; unsigned long state ; unsigned char resvport : 1 ; t#atomic_t swapper ; unsigned int bind_index ; s#list_head xprt_switch ; unsigned long bind_timeout , reestablish_timeout ; unsigned int connect_cookie ; s#work_struct task_cleanup ; s#timer_list timer ; unsigned long last_used , idle_timeout , connect_timeout , max_reconnect_timeout ; t#atomic_long_t queuelen ; t#spinlock_t transport_lock ; t#spinlock_t reserve_lock ; t#spinlock_t queue_lock ; t#u32 xid ; s#rpc_task * snd_task ; s#list_head xmit_queue ; s#svc_xprt * bc_xprt ; s#svc_serv * bc_serv ; unsigned int bc_alloc_max ; unsigned int bc_alloc_count ; t#atomic_t bc_slot_count ; t#spinlock_t bc_pa_lock ; s#list_head bc_pa_list ; s#rb_root recv_queue ; struct { unsigned long bind_count , connect_count , connect_start , connect_time , sends , recvs , bad_xids , max_slots ; unsigned long long req_u , bklog_u , sending_u , pending_u ; } stat ; s#net * xprt_net ; const char * servername ; const char * address_strings [ E#RPC_DISPLAY_MAX ] ; s#dentry * debugfs ; t#atomic_t inject_disconnect ; s#callback_head rcu ; }
s#rpc_xprt_iter struct rpc_xprt_iter { s#rpc_xprt_switch * xpi_xpswitch ; s#rpc_xprt * xpi_cursor ; const s#rpc_xprt_iter_ops * xpi_ops ; }
s#rpc_xprt_iter_ops struct rpc_xprt_iter_ops { void ( * xpi_rewind ) ( s#rpc_xprt_iter * ) ; s#rpc_xprt * ( * xpi_xprt ) ( s#rpc_xprt_iter * ) ; s#rpc_xprt * ( * xpi_next ) ( s#rpc_xprt_iter * ) ; }
s#rpc_xprt_ops struct rpc_xprt_ops { void ( * set_buffer_size ) ( s#rpc_xprt * , t#size_t , t#size_t ) ; int ( * reserve_xprt ) ( s#rpc_xprt * , s#rpc_task * ) ; void ( * release_xprt ) ( s#rpc_xprt * , s#rpc_task * ) ; void ( * alloc_slot ) ( s#rpc_xprt * , s#rpc_task * ) ; void ( * free_slot ) ( s#rpc_xprt * , s#rpc_rqst * ) ; void ( * rpcbind ) ( s#rpc_task * ) ; void ( * set_port ) ( s#rpc_xprt * , unsigned short ) ; void ( * connect ) ( s#rpc_xprt * , s#rpc_task * ) ; int ( * buf_alloc ) ( s#rpc_task * ) ; void ( * buf_free ) ( s#rpc_task * ) ; void ( * prepare_request ) ( s#rpc_rqst * ) ; int ( * send_request ) ( s#rpc_rqst * ) ; void ( * wait_for_reply_request ) ( s#rpc_task * ) ; void ( * timer ) ( s#rpc_xprt * , s#rpc_task * ) ; void ( * release_request ) ( s#rpc_task * ) ; void ( * close ) ( s#rpc_xprt * ) ; void ( * destroy ) ( s#rpc_xprt * ) ; void ( * set_connect_timeout ) ( s#rpc_xprt * , unsigned long , unsigned long ) ; void ( * print_stats ) ( s#rpc_xprt * , s#seq_file * ) ; int ( * enable_swap ) ( s#rpc_xprt * ) ; void ( * disable_swap ) ( s#rpc_xprt * ) ; void ( * inject_disconnect ) ( s#rpc_xprt * ) ; int ( * bc_setup ) ( s#rpc_xprt * , unsigned int ) ; t#size_t ( * bc_maxpayload ) ( s#rpc_xprt * ) ; unsigned int ( * bc_num_slots ) ( s#rpc_xprt * ) ; void ( * bc_free_rqst ) ( s#rpc_rqst * ) ; void ( * bc_destroy ) ( s#rpc_xprt * , unsigned int ) ; }
s#rpc_xprt_switch@10184b03 struct rpc_xprt_switch { t#spinlock_t xps_lock ; s#kref xps_kref ; unsigned int xps_nxprts ; unsigned int xps_nactive ; t#atomic_long_t xps_queuelen ; s#list_head xps_xprt_list ; s#net * xps_net ; const s#rpc_xprt_iter_ops * xps_iter_ops ; s#callback_head xps_rcu ; }
s#rpc_xprt_switch@9371329b struct rpc_xprt_switch { UNKNOWN }
s#rpcsec_gss_info@92f4a117 struct rpcsec_gss_info { s#rpcsec_gss_oid oid ; t#u32 qop ; t#u32 service ; }
s#rpcsec_gss_info@ed4720ef struct rpcsec_gss_info { UNKNOWN }
s#rpcsec_gss_oid struct rpcsec_gss_oid { unsigned int len ; t#u8 data [ 32 ] ; }
s#rps_dev_flow struct rps_dev_flow { t#u16 cpu ; t#u16 filter ; unsigned int last_qtail ; }
s#rps_dev_flow_table struct rps_dev_flow_table { unsigned int mask ; s#callback_head rcu ; s#rps_dev_flow flows [ 0 ] ; }
s#rps_map struct rps_map { unsigned int len ; s#callback_head rcu ; t#u16 cpus [ 0 ] ; }
s#rq struct rq { t#raw_spinlock_t lock ; unsigned int nr_running ; unsigned int nr_numa_running ; unsigned int nr_preferred_running ; unsigned int numa_migrate_on ; unsigned long last_load_update_tick ; unsigned long last_blocked_load_update_tick ; unsigned int has_blocked_load ; unsigned int nohz_tick_stopped ; t#atomic_t nohz_flags ; unsigned long nr_load_updates ; t#u64 nr_switches ; s#cfs_rq cfs ; s#rt_rq rt ; s#dl_rq dl ; s#list_head leaf_cfs_rq_list ; s#list_head * tmp_alone_branch ; unsigned long nr_uninterruptible ; s#task_struct * curr ; s#task_struct * idle ; s#task_struct * stop ; unsigned long next_balance ; s#mm_struct * prev_mm ; unsigned int clock_update_flags ; t#u64 clock ; t#u64 clock_task __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; t#u64 clock_pelt ; unsigned long lost_idle_time ; t#atomic_t nr_iowait ; int membarrier_state ; s#root_domain * rd ; s#sched_domain * sd ; unsigned long cpu_capacity ; unsigned long cpu_capacity_orig ; s#callback_head * balance_callback ; unsigned char idle_balance ; unsigned long misfit_task_load ; int active_balance ; int push_cpu ; s#cpu_stop_work active_balance_work ; int cpu ; int online ; s#list_head cfs_tasks ; s#sched_avg avg_rt ; s#sched_avg avg_dl ; s#sched_avg avg_irq ; t#u64 idle_stamp ; t#u64 avg_idle ; t#u64 max_idle_balance_cost ; t#u64 prev_irq_time ; t#u64 prev_steal_time ; t#u64 prev_steal_time_rq ; unsigned long calc_load_update ; long calc_load_active ; int hrtick_csd_pending ; t#call_single_data_t hrtick_csd ; s#hrtimer hrtick_timer ; s#sched_info rq_sched_info ; unsigned long long rq_cpu_time ; unsigned int yld_count ; unsigned int sched_count ; unsigned int sched_goidle ; unsigned int ttwu_count ; unsigned int ttwu_local ; s#llist_head wake_list ; s#cpuidle_state * idle_state ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#rq_flags struct rq_flags { unsigned long flags ; s#pin_cookie cookie ; unsigned int clock_update_flags ; }
s#rq_qos@0cb844b7 struct rq_qos { UNKNOWN }
s#rq_qos@395a85b5 struct rq_qos { s#rq_qos_ops * ops ; s#request_queue * q ; e#rq_qos_id id ; s#rq_qos * next ; s#dentry * debugfs_dir ; }
s#rq_qos_ops struct rq_qos_ops { void ( * throttle ) ( s#rq_qos * , s#bio * ) ; void ( * track ) ( s#rq_qos * , s#request * , s#bio * ) ; void ( * merge ) ( s#rq_qos * , s#request * , s#bio * ) ; void ( * issue ) ( s#rq_qos * , s#request * ) ; void ( * requeue ) ( s#rq_qos * , s#request * ) ; void ( * done ) ( s#rq_qos * , s#request * ) ; void ( * done_bio ) ( s#rq_qos * , s#bio * ) ; void ( * cleanup ) ( s#rq_qos * , s#bio * ) ; void ( * queue_depth_changed ) ( s#rq_qos * ) ; void ( * exit ) ( s#rq_qos * ) ; const s#blk_mq_debugfs_attr * debugfs_attrs ; }
s#rseq struct rseq { t#__u32 cpu_id_start ; t#__u32 cpu_id ; union { t#__u64 ptr64 ; t#__u64 ptr ; } rseq_cs ; t#__u32 flags ; }
s#rt6_exception_bucket struct rt6_exception_bucket { s#hlist_head chain ; int depth ; }
s#rt6_info@ba0d0e7c struct rt6_info { UNKNOWN }
s#rt6_info@dc946ade struct rt6_info { s#dst_entry dst ; s#fib6_info * from ; s#rt6key rt6i_dst ; s#rt6key rt6i_src ; s#in6_addr rt6i_gateway ; s#inet6_dev * rt6i_idev ; t#u32 rt6i_flags ; s#list_head rt6i_uncached ; s#uncached_list * rt6i_uncached_list ; unsigned short rt6i_nfheader_len ; }
s#rt6_statistics@1738033f struct rt6_statistics { UNKNOWN }
s#rt6_statistics@cc743561 struct rt6_statistics { t#__u32 fib_nodes ; t#__u32 fib_route_nodes ; t#__u32 fib_rt_entries ; t#__u32 fib_rt_cache ; t#__u32 fib_discarded_routes ; t#atomic_t fib_rt_alloc ; t#atomic_t fib_rt_uncache ; }
s#rt6key struct rt6key { s#in6_addr addr ; int plen ; }
s#rt_bandwidth struct rt_bandwidth { t#raw_spinlock_t rt_runtime_lock ; t#ktime_t rt_period ; t#u64 rt_runtime ; s#hrtimer rt_period_timer ; unsigned int rt_period_active ; }
s#rt_mutex struct rt_mutex { t#raw_spinlock_t wait_lock ; s#rb_root_cached waiters ; s#task_struct * owner ; int save_state ; const char * name , * file ; int line ; void * magic ; s#lockdep_map dep_map ; }
s#rt_mutex_waiter@aa7a31a4 struct rt_mutex_waiter { UNKNOWN }
s#rt_mutex_waiter@d27034e9 struct rt_mutex_waiter { s#rb_node tree_entry ; s#rb_node pi_tree_entry ; s#task_struct * task ; s#rt_mutex * lock ; unsigned long ip ; s#pid * deadlock_task_pid ; s#rt_mutex * deadlock_lock ; int prio ; t#u64 deadline ; }
s#rt_prio_array struct rt_prio_array { unsigned long bitmap [ ( ( ( 100 + 1 ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; s#list_head queue [ 100 ] ; }
s#rt_rq@1547700c struct rt_rq { s#rt_prio_array active ; unsigned int rt_nr_running ; unsigned int rr_nr_running ; struct { int curr ; int next ; } highest_prio ; unsigned long rt_nr_migratory ; unsigned long rt_nr_total ; int overloaded ; s#plist_head pushable_tasks ; int rt_queued ; int rt_throttled ; t#u64 rt_time ; t#u64 rt_runtime ; t#raw_spinlock_t rt_runtime_lock ; unsigned long rt_nr_boosted ; s#rq * rq ; s#task_group * tg ; }
s#rt_rq@2a9a7031 struct rt_rq { UNKNOWN }
s#rtable struct rtable { s#dst_entry dst ; int rt_genid ; unsigned int rt_flags ; t#__u16 rt_type ; t#__u8 rt_is_input ; t#__u8 rt_uses_gateway ; int rt_iif ; t#u8 rt_gw_family ; union { t#__be32 rt_gw4 ; s#in6_addr rt_gw6 ; } ; t#u32 rt_mtu_locked : 1 , rt_pmtu : 31 ; s#list_head rt_uncached ; s#uncached_list * rt_uncached_list ; }
s#rtattr@b5a4bef5 struct rtattr { UNKNOWN }
s#rtattr@b72713e9 struct rtattr { unsigned short rta_len ; unsigned short rta_type ; }
s#rtnl_link_ops@8a68c797 struct rtnl_link_ops { s#list_head list ; const char * kind ; t#size_t priv_size ; void ( * setup ) ( s#net_device * ) ; unsigned int maxtype ; const s#nla_policy * policy ; int ( * validate ) ( s#nlattr * [ ] , s#nlattr * [ ] , s#netlink_ext_ack * ) ; int ( * newlink ) ( s#net * , s#net_device * , s#nlattr * [ ] , s#nlattr * [ ] , s#netlink_ext_ack * ) ; int ( * changelink ) ( s#net_device * , s#nlattr * [ ] , s#nlattr * [ ] , s#netlink_ext_ack * ) ; void ( * dellink ) ( s#net_device * , s#list_head * ) ; t#size_t ( * get_size ) ( const s#net_device * ) ; int ( * fill_info ) ( s#sk_buff * , const s#net_device * ) ; t#size_t ( * get_xstats_size ) ( const s#net_device * ) ; int ( * fill_xstats ) ( s#sk_buff * , const s#net_device * ) ; unsigned int ( * get_num_tx_queues ) ( void ) ; unsigned int ( * get_num_rx_queues ) ( void ) ; unsigned int slave_maxtype ; const s#nla_policy * slave_policy ; int ( * slave_changelink ) ( s#net_device * , s#net_device * , s#nlattr * [ ] , s#nlattr * [ ] , s#netlink_ext_ack * ) ; t#size_t ( * get_slave_size ) ( const s#net_device * , const s#net_device * ) ; int ( * fill_slave_info ) ( s#sk_buff * , const s#net_device * , const s#net_device * ) ; s#net * ( * get_link_net ) ( const s#net_device * ) ; t#size_t ( * get_linkxstats_size ) ( const s#net_device * , int ) ; int ( * fill_linkxstats ) ( s#sk_buff * , const s#net_device * , int * , int ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#rtnl_link_ops@8affdff9 struct rtnl_link_ops { UNKNOWN }
s#rtnl_link_stats64 struct rtnl_link_stats64 { t#__u64 rx_packets ; t#__u64 tx_packets ; t#__u64 rx_bytes ; t#__u64 tx_bytes ; t#__u64 rx_errors ; t#__u64 tx_errors ; t#__u64 rx_dropped ; t#__u64 tx_dropped ; t#__u64 multicast ; t#__u64 collisions ; t#__u64 rx_length_errors ; t#__u64 rx_over_errors ; t#__u64 rx_crc_errors ; t#__u64 rx_frame_errors ; t#__u64 rx_fifo_errors ; t#__u64 rx_missed_errors ; t#__u64 tx_aborted_errors ; t#__u64 tx_carrier_errors ; t#__u64 tx_fifo_errors ; t#__u64 tx_heartbeat_errors ; t#__u64 tx_window_errors ; t#__u64 rx_compressed ; t#__u64 tx_compressed ; t#__u64 rx_nohandler ; }
s#rw_semaphore struct rw_semaphore { t#atomic_long_t count ; t#atomic_long_t owner ; s#optimistic_spin_queue osq ; t#raw_spinlock_t wait_lock ; s#list_head wait_list ; void * magic ; s#lockdep_map dep_map ; }
s#sas_function_template struct sas_function_template { int ( * get_linkerrors ) ( s#sas_phy * ) ; int ( * get_enclosure_identifier ) ( s#sas_rphy * , t#u64 * ) ; int ( * get_bay_identifier ) ( s#sas_rphy * ) ; int ( * phy_reset ) ( s#sas_phy * , int ) ; int ( * phy_enable ) ( s#sas_phy * , int ) ; int ( * phy_setup ) ( s#sas_phy * ) ; void ( * phy_release ) ( s#sas_phy * ) ; int ( * set_phy_speed ) ( s#sas_phy * , s#sas_phy_linkrates * ) ; void ( * smp_handler ) ( s#bsg_job * , s#Scsi_Host * , s#sas_rphy * ) ; }
s#sas_identify struct sas_identify { e#sas_device_type device_type ; e#sas_protocol initiator_port_protocols ; e#sas_protocol target_port_protocols ; t#u64 sas_address ; t#u8 phy_identifier ; }
s#sas_phy struct sas_phy { s#device dev ; int number ; int enabled ; s#sas_identify identify ; e#sas_linkrate negotiated_linkrate ; e#sas_linkrate minimum_linkrate_hw ; e#sas_linkrate minimum_linkrate ; e#sas_linkrate maximum_linkrate_hw ; e#sas_linkrate maximum_linkrate ; t#u32 invalid_dword_count ; t#u32 running_disparity_error_count ; t#u32 loss_of_dword_sync_count ; t#u32 phy_reset_problem_count ; s#list_head port_siblings ; void * hostdata ; }
s#sas_phy_linkrates struct sas_phy_linkrates { e#sas_linkrate maximum_linkrate ; e#sas_linkrate minimum_linkrate ; }
s#sas_port struct sas_port { s#device dev ; int port_identifier ; int num_phys ; unsigned int is_backlink : 1 ; s#sas_rphy * rphy ; s#mutex phy_list_mutex ; s#list_head phy_list ; s#list_head del_list ; }
s#sas_rphy struct sas_rphy { s#device dev ; s#sas_identify identify ; s#list_head list ; s#request_queue * q ; t#u32 scsi_target_id ; }
s#sb_writers struct sb_writers { int frozen ; t#wait_queue_head_t wait_unfrozen ; s#percpu_rw_semaphore rw_sem [ ( E#SB_FREEZE_COMPLETE - 1 ) ] ; }
s#sbitmap struct sbitmap { unsigned int depth ; unsigned int shift ; unsigned int map_nr ; s#sbitmap_word * map ; }
s#sbitmap_queue struct sbitmap_queue { s#sbitmap sb ; unsigned int * alloc_hint ; unsigned int wake_batch ; t#atomic_t wake_index ; s#sbq_wait_state * ws ; t#atomic_t ws_active ; t#bool round_robin ; unsigned int min_shallow_depth ; }
s#sbitmap_word struct sbitmap_word { unsigned long depth ; unsigned long word __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; unsigned long cleared __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; t#spinlock_t swap_lock ; }
s#sbq_wait_state struct sbq_wait_state { t#atomic_t wait_cnt ; t#wait_queue_head_t wait ; }
s#scatterlist@e4644bed struct scatterlist { UNKNOWN }
s#scatterlist@ecca3350 struct scatterlist { unsigned long page_link ; unsigned int offset ; unsigned int length ; t#dma_addr_t dma_address ; unsigned int dma_length ; }
s#sched_avg struct sched_avg { t#u64 last_update_time ; t#u64 load_sum ; t#u64 runnable_load_sum ; t#u32 util_sum ; t#u32 period_contrib ; unsigned long load_avg ; unsigned long runnable_load_avg ; unsigned long util_avg ; s#util_est util_est ; }
s#sched_class@05ccdc2b struct sched_class { UNKNOWN }
s#sched_class@303ebe04 struct sched_class { t#u8 state ; t#u8 idx ; s#ch_sched_params info ; s#list_head queue_list ; t#atomic_t refcnt ; }
s#sched_class@ec44831d struct sched_class { const s#sched_class * next ; void ( * enqueue_task ) ( s#rq * , s#task_struct * , int ) ; void ( * dequeue_task ) ( s#rq * , s#task_struct * , int ) ; void ( * yield_task ) ( s#rq * ) ; t#bool ( * yield_to_task ) ( s#rq * , s#task_struct * , t#bool ) ; void ( * check_preempt_curr ) ( s#rq * , s#task_struct * , int ) ; s#task_struct * ( * pick_next_task ) ( s#rq * , s#task_struct * , s#rq_flags * ) ; void ( * put_prev_task ) ( s#rq * , s#task_struct * ) ; void ( * set_next_task ) ( s#rq * , s#task_struct * , t#bool ) ; int ( * balance ) ( s#rq * , s#task_struct * , s#rq_flags * ) ; int ( * select_task_rq ) ( s#task_struct * , int , int , int ) ; void ( * migrate_task_rq ) ( s#task_struct * , int ) ; void ( * task_woken ) ( s#rq * , s#task_struct * ) ; void ( * set_cpus_allowed ) ( s#task_struct * , const s#cpumask * ) ; void ( * rq_online ) ( s#rq * ) ; void ( * rq_offline ) ( s#rq * ) ; void ( * task_tick ) ( s#rq * , s#task_struct * , int ) ; void ( * task_fork ) ( s#task_struct * ) ; void ( * task_dead ) ( s#task_struct * ) ; void ( * switched_from ) ( s#rq * , s#task_struct * ) ; void ( * switched_to ) ( s#rq * , s#task_struct * ) ; void ( * prio_changed ) ( s#rq * , s#task_struct * , int ) ; unsigned int ( * get_rr_interval ) ( s#rq * , s#task_struct * ) ; void ( * update_curr ) ( s#rq * ) ; void ( * task_change_group ) ( s#task_struct * , int ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#sched_dl_entity struct sched_dl_entity { s#rb_node rb_node ; t#u64 dl_runtime ; t#u64 dl_deadline ; t#u64 dl_period ; t#u64 dl_bw ; t#u64 dl_density ; t#s64 runtime ; t#u64 deadline ; unsigned int flags ; unsigned int dl_throttled : 1 ; unsigned int dl_boosted : 1 ; unsigned int dl_yielded : 1 ; unsigned int dl_non_contending : 1 ; unsigned int dl_overrun : 1 ; s#hrtimer dl_timer ; s#hrtimer inactive_timer ; }
s#sched_domain struct sched_domain { s#sched_domain * parent ; s#sched_domain * child ; s#sched_group * groups ; unsigned long min_interval ; unsigned long max_interval ; unsigned int busy_factor ; unsigned int imbalance_pct ; unsigned int cache_nice_tries ; int nohz_idle ; int flags ; int level ; unsigned long last_balance ; unsigned int balance_interval ; unsigned int nr_balance_failed ; t#u64 max_newidle_lb_cost ; unsigned long next_decay_max_lb_cost ; t#u64 avg_scan_cost ; unsigned int lb_count [ E#CPU_MAX_IDLE_TYPES ] ; unsigned int lb_failed [ E#CPU_MAX_IDLE_TYPES ] ; unsigned int lb_balanced [ E#CPU_MAX_IDLE_TYPES ] ; unsigned int lb_imbalance [ E#CPU_MAX_IDLE_TYPES ] ; unsigned int lb_gained [ E#CPU_MAX_IDLE_TYPES ] ; unsigned int lb_hot_gained [ E#CPU_MAX_IDLE_TYPES ] ; unsigned int lb_nobusyg [ E#CPU_MAX_IDLE_TYPES ] ; unsigned int lb_nobusyq [ E#CPU_MAX_IDLE_TYPES ] ; unsigned int alb_count ; unsigned int alb_failed ; unsigned int alb_pushed ; unsigned int sbe_count ; unsigned int sbe_balanced ; unsigned int sbe_pushed ; unsigned int sbf_count ; unsigned int sbf_balanced ; unsigned int sbf_pushed ; unsigned int ttwu_wake_remote ; unsigned int ttwu_move_affine ; unsigned int ttwu_move_balance ; char * name ; union { void * private ; s#callback_head rcu ; } ; s#sched_domain_shared * shared ; unsigned int span_weight ; unsigned long span [ 0 ] ; }
s#sched_domain_shared struct sched_domain_shared { t#atomic_t ref ; t#atomic_t nr_busy_cpus ; int has_idle_cores ; }
s#sched_entity struct sched_entity { s#load_weight load ; unsigned long runnable_weight ; s#rb_node run_node ; s#list_head group_node ; unsigned int on_rq ; t#u64 exec_start ; t#u64 sum_exec_runtime ; t#u64 vruntime ; t#u64 prev_sum_exec_runtime ; t#u64 nr_migrations ; s#sched_statistics statistics ; int depth ; s#sched_entity * parent ; s#cfs_rq * cfs_rq ; s#cfs_rq * my_q ; s#sched_avg avg ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#sched_group struct sched_group { s#sched_group * next ; t#atomic_t ref ; unsigned int group_weight ; s#sched_group_capacity * sgc ; int asym_prefer_cpu ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long cpumask [ 0 ] ; }
s#sched_group_capacity struct sched_group_capacity { t#atomic_t ref ; unsigned long capacity ; unsigned long min_capacity ; unsigned long max_capacity ; unsigned long next_update ; int imbalance ; int id ; unsigned long cpumask [ 0 ] ; }
s#sched_info struct sched_info { unsigned long pcount ; unsigned long long run_delay ; unsigned long long last_arrival ; unsigned long long last_queued ; }
s#sched_param struct sched_param { int sched_priority ; }
s#sched_rt_entity struct sched_rt_entity { s#list_head run_list ; unsigned long timeout ; unsigned long watchdog_stamp ; unsigned int time_slice ; unsigned short on_rq ; unsigned short on_list ; s#sched_rt_entity * back ; s#sched_rt_entity * parent ; s#rt_rq * rt_rq ; s#rt_rq * my_q ; }
s#sched_statistics struct sched_statistics { t#u64 wait_start ; t#u64 wait_max ; t#u64 wait_count ; t#u64 wait_sum ; t#u64 iowait_count ; t#u64 iowait_sum ; t#u64 sleep_start ; t#u64 sleep_max ; t#s64 sum_sleep_runtime ; t#u64 block_start ; t#u64 block_max ; t#u64 exec_max ; t#u64 slice_max ; t#u64 nr_migrations_cold ; t#u64 nr_failed_migrations_affine ; t#u64 nr_failed_migrations_running ; t#u64 nr_failed_migrations_hot ; t#u64 nr_forced_migrations ; t#u64 nr_wakeups ; t#u64 nr_wakeups_sync ; t#u64 nr_wakeups_migrate ; t#u64 nr_wakeups_local ; t#u64 nr_wakeups_remote ; t#u64 nr_wakeups_affine ; t#u64 nr_wakeups_affine_attempts ; t#u64 nr_wakeups_passive ; t#u64 nr_wakeups_idle ; }
s#scsi_cmnd@59823f46 struct scsi_cmnd { UNKNOWN }
s#scsi_cmnd@d2143453 struct scsi_cmnd { s#scsi_request req ; s#scsi_device * device ; s#list_head list ; s#list_head eh_entry ; s#delayed_work abort_work ; s#callback_head rcu ; int eh_eflags ; unsigned long jiffies_at_alloc ; int retries ; int allowed ; unsigned char prot_op ; unsigned char prot_type ; unsigned char prot_flags ; unsigned short cmd_len ; e#dma_data_direction sc_data_direction ; unsigned char * cmnd ; s#scsi_data_buffer sdb ; s#scsi_data_buffer * prot_sdb ; unsigned underflow ; unsigned transfersize ; s#request * request ; unsigned char * sense_buffer ; void ( * scsi_done ) ( s#scsi_cmnd * ) ; s#scsi_pointer SCp ; unsigned char * host_scribble ; int result ; int flags ; unsigned long state ; unsigned char tag ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#scsi_data_buffer struct scsi_data_buffer { s#sg_table table ; unsigned length ; }
s#scsi_device@230e9e54 struct scsi_device { UNKNOWN }
s#scsi_device@3f7150d7 struct scsi_device { s#Scsi_Host * host ; s#request_queue * request_queue ; s#list_head siblings ; s#list_head same_target_siblings ; t#atomic_t device_busy ; t#atomic_t device_blocked ; t#spinlock_t list_lock ; s#list_head cmd_list ; s#list_head starved_entry ; unsigned short queue_depth ; unsigned short max_queue_depth ; unsigned short last_queue_full_depth ; unsigned short last_queue_full_count ; unsigned long last_queue_full_time ; unsigned long queue_ramp_up_period ; unsigned long last_queue_ramp_up ; unsigned int id , channel ; t#u64 lun ; unsigned int manufacturer ; unsigned sector_size ; void * hostdata ; unsigned char type ; char scsi_level ; char inq_periph_qual ; s#mutex inquiry_mutex ; unsigned char inquiry_len ; unsigned char * inquiry ; const char * vendor ; const char * model ; const char * rev ; s#scsi_vpd * vpd_pg83 ; s#scsi_vpd * vpd_pg80 ; unsigned char current_tag ; s#scsi_target * sdev_target ; t#blist_flags_t sdev_bflags ; unsigned int eh_timeout ; unsigned removable : 1 ; unsigned changed : 1 ; unsigned busy : 1 ; unsigned lockable : 1 ; unsigned locked : 1 ; unsigned borken : 1 ; unsigned disconnect : 1 ; unsigned soft_reset : 1 ; unsigned sdtr : 1 ; unsigned wdtr : 1 ; unsigned ppr : 1 ; unsigned tagged_supported : 1 ; unsigned simple_tags : 1 ; unsigned was_reset : 1 ; unsigned expecting_cc_ua : 1 ; unsigned use_10_for_rw : 1 ; unsigned use_10_for_ms : 1 ; unsigned no_report_opcodes : 1 ; unsigned no_write_same : 1 ; unsigned use_16_for_rw : 1 ; unsigned skip_ms_page_8 : 1 ; unsigned skip_ms_page_3f : 1 ; unsigned skip_vpd_pages : 1 ; unsigned try_vpd_pages : 1 ; unsigned use_192_bytes_for_3f : 1 ; unsigned no_start_on_add : 1 ; unsigned allow_restart : 1 ; unsigned manage_start_stop : 1 ; unsigned start_stop_pwr_cond : 1 ; unsigned no_uld_attach : 1 ; unsigned select_no_atn : 1 ; unsigned fix_capacity : 1 ; unsigned guess_capacity : 1 ; unsigned retry_hwerror : 1 ; unsigned last_sector_bug : 1 ; unsigned no_read_disc_info : 1 ; unsigned no_read_capacity_16 : 1 ; unsigned try_rc_10_first : 1 ; unsigned security_supported : 1 ; unsigned is_visible : 1 ; unsigned wce_default_on : 1 ; unsigned no_dif : 1 ; unsigned broken_fua : 1 ; unsigned lun_in_cdb : 1 ; unsigned unmap_limit_for_ws : 1 ; t#atomic_t disk_events_disable_depth ; unsigned long supported_events [ ( ( ( E#SDEV_EVT_MAXBITS ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; unsigned long pending_events [ ( ( ( E#SDEV_EVT_MAXBITS ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; s#list_head event_list ; s#work_struct event_work ; unsigned int max_device_blocked ; t#atomic_t iorequest_cnt ; t#atomic_t iodone_cnt ; t#atomic_t ioerr_cnt ; s#device sdev_gendev , sdev_dev ; s#execute_work ew ; s#work_struct requeue_work ; s#scsi_device_handler * handler ; void * handler_data ; unsigned char access_state ; s#mutex state_mutex ; e#scsi_device_state sdev_state ; s#task_struct * quiesced_by ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long sdev_data [ 0 ] ; }
s#scsi_device_handler@2fa82fb9 struct scsi_device_handler { UNKNOWN }
s#scsi_device_handler@43a42425 struct scsi_device_handler { s#list_head list ; s#module * module ; const char * name ; int ( * check_sense ) ( s#scsi_device * , s#scsi_sense_hdr * ) ; int ( * attach ) ( s#scsi_device * ) ; void ( * detach ) ( s#scsi_device * ) ; int ( * activate ) ( s#scsi_device * , t#activate_complete , void * ) ; t#blk_status_t ( * prep_fn ) ( s#scsi_device * , s#request * ) ; int ( * set_params ) ( s#scsi_device * , const char * ) ; void ( * rescan ) ( s#scsi_device * ) ; }
s#scsi_host_cmd_pool struct scsi_host_cmd_pool { UNKNOWN }
s#scsi_host_template struct scsi_host_template { s#module * module ; const char * name ; const char * ( * info ) ( s#Scsi_Host * ) ; int ( * ioctl ) ( s#scsi_device * , unsigned int , void * ) ; int ( * compat_ioctl ) ( s#scsi_device * , unsigned int , void * ) ; int ( * queuecommand ) ( s#Scsi_Host * , s#scsi_cmnd * ) ; void ( * commit_rqs ) ( s#Scsi_Host * , t#u16 ) ; int ( * eh_abort_handler ) ( s#scsi_cmnd * ) ; int ( * eh_device_reset_handler ) ( s#scsi_cmnd * ) ; int ( * eh_target_reset_handler ) ( s#scsi_cmnd * ) ; int ( * eh_bus_reset_handler ) ( s#scsi_cmnd * ) ; int ( * eh_host_reset_handler ) ( s#scsi_cmnd * ) ; int ( * slave_alloc ) ( s#scsi_device * ) ; int ( * slave_configure ) ( s#scsi_device * ) ; void ( * slave_destroy ) ( s#scsi_device * ) ; int ( * target_alloc ) ( s#scsi_target * ) ; void ( * target_destroy ) ( s#scsi_target * ) ; int ( * scan_finished ) ( s#Scsi_Host * , unsigned long ) ; void ( * scan_start ) ( s#Scsi_Host * ) ; int ( * change_queue_depth ) ( s#scsi_device * , int ) ; int ( * map_queues ) ( s#Scsi_Host * ) ; int ( * bios_param ) ( s#scsi_device * , s#block_device * , t#sector_t , int [ ] ) ; void ( * unlock_native_capacity ) ( s#scsi_device * ) ; int ( * show_info ) ( s#seq_file * , s#Scsi_Host * ) ; int ( * write_info ) ( s#Scsi_Host * , char * , int ) ; e#blk_eh_timer_return ( * eh_timed_out ) ( s#scsi_cmnd * ) ; int ( * host_reset ) ( s#Scsi_Host * , int ) ; const char * proc_name ; s#proc_dir_entry * proc_dir ; int can_queue ; int this_id ; unsigned short sg_tablesize ; unsigned short sg_prot_tablesize ; unsigned int max_sectors ; unsigned int max_segment_size ; unsigned long dma_boundary ; unsigned long virt_boundary_mask ; short cmd_per_lun ; unsigned char present ; int tag_alloc_policy ; unsigned track_queue_depth : 1 ; unsigned supported_mode : 2 ; unsigned unchecked_isa_dma : 1 ; unsigned emulated : 1 ; unsigned skip_settle_delay : 1 ; unsigned no_write_same : 1 ; unsigned force_blk_mq : 1 ; unsigned int max_host_blocked ; s#device_attribute * * shost_attrs ; s#device_attribute * * sdev_attrs ; const s#attribute_group * * sdev_groups ; t#u64 vendor_id ; unsigned int cmd_size ; s#scsi_host_cmd_pool * cmd_pool ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#scsi_lun struct scsi_lun { t#__u8 scsi_lun [ 8 ] ; }
s#scsi_pointer struct scsi_pointer { char * ptr ; int this_residual ; s#scatterlist * buffer ; int buffers_residual ; t#dma_addr_t dma_handle ; volatile int Status ; volatile int Message ; volatile int have_data_in ; volatile int sent_command ; volatile int phase ; }
s#scsi_request struct scsi_request { unsigned char __cmd [ 16 ] ; unsigned char * cmd ; unsigned short cmd_len ; int result ; unsigned int sense_len ; unsigned int resid_len ; int retries ; void * sense ; }
s#scsi_sense_hdr struct scsi_sense_hdr { t#u8 response_code ; t#u8 sense_key ; t#u8 asc ; t#u8 ascq ; t#u8 byte4 ; t#u8 byte5 ; t#u8 byte6 ; t#u8 additional_length ; }
s#scsi_target@7a80b23c struct scsi_target { UNKNOWN }
s#scsi_target@ee547d1b struct scsi_target { s#scsi_device * starget_sdev_user ; s#list_head siblings ; s#list_head devices ; s#device dev ; s#kref reap_ref ; unsigned int channel ; unsigned int id ; unsigned int create : 1 ; unsigned int single_lun : 1 ; unsigned int pdt_1f_for_no_lun : 1 ; unsigned int no_report_luns : 1 ; unsigned int expecting_lun_change : 1 ; t#atomic_t target_busy ; t#atomic_t target_blocked ; unsigned int can_queue ; unsigned int max_target_blocked ; char scsi_level ; e#scsi_target_state state ; void * hostdata ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long starget_data [ 0 ] ; }
s#scsi_transport_template@45ac62e3 struct scsi_transport_template { UNKNOWN }
s#scsi_transport_template@4cdd7909 struct scsi_transport_template { s#transport_container host_attrs ; s#transport_container target_attrs ; s#transport_container device_attrs ; int ( * user_scan ) ( s#Scsi_Host * , t#uint , t#uint , t#u64 ) ; int device_size ; int device_private_offset ; int target_size ; int target_private_offset ; int host_size ; unsigned int create_work_queue : 1 ; void ( * eh_strategy_handler ) ( s#Scsi_Host * ) ; }
s#scsi_vpd struct scsi_vpd { s#callback_head rcu ; int len ; unsigned char data [ ] ; }
s#sctp_mib@44a56c3f struct sctp_mib { unsigned long mibs [ E#__SCTP_MIB_MAX ] ; }
s#sctp_mib@9b8f12f8 struct sctp_mib { UNKNOWN }
s#seccomp struct seccomp { int mode ; s#seccomp_filter * filter ; }
s#seccomp_filter struct seccomp_filter { UNKNOWN }
s#seg6_pernet_data@eb2e9422 struct seg6_pernet_data { UNKNOWN }
s#seg6_pernet_data@ee92c854 struct seg6_pernet_data { s#mutex lock ; s#in6_addr * tun_src ; }
s#sem_undo_list struct sem_undo_list { UNKNOWN }
s#semaphore struct semaphore { t#raw_spinlock_t lock ; unsigned int count ; s#list_head wait_list ; }
s#seq_buf struct seq_buf { char * buffer ; t#size_t size ; t#size_t len ; t#loff_t readpos ; }
s#seq_file@9afb65e4 struct seq_file { UNKNOWN }
s#seq_file@cc612266 struct seq_file { char * buf ; t#size_t size ; t#size_t from ; t#size_t count ; t#size_t pad_until ; t#loff_t index ; t#loff_t read_pos ; t#u64 version ; s#mutex lock ; const s#seq_operations * op ; int poll_event ; const s#file * file ; void * private ; }
s#seq_operations@08363422 struct seq_operations { UNKNOWN }
s#seq_operations@af352468 struct seq_operations { void * ( * start ) ( s#seq_file * , t#loff_t * ) ; void ( * stop ) ( s#seq_file * , void * ) ; void * ( * next ) ( s#seq_file * , void * , t#loff_t * ) ; int ( * show ) ( s#seq_file * , void * ) ; }
s#seqcount struct seqcount { unsigned sequence ; s#lockdep_map dep_map ; }
s#serial_icounter_struct@07c098b2 struct serial_icounter_struct { int cts , dsr , rng , dcd ; int rx , tx ; int frame , overrun , parity , brk ; int buf_overrun ; int reserved [ 9 ] ; }
s#serial_icounter_struct@d94a6582 struct serial_icounter_struct { UNKNOWN }
s#serial_struct@0187e4b2 struct serial_struct { UNKNOWN }
s#serial_struct@e37eacf1 struct serial_struct { int type ; int line ; unsigned int port ; int irq ; int flags ; int xmit_fifo_size ; int custom_divisor ; int baud_base ; unsigned short close_delay ; char io_type ; char reserved_char [ 1 ] ; int hub6 ; unsigned short closing_wait ; unsigned short closing_wait2 ; unsigned char * iomem_base ; unsigned short iomem_reg_shift ; unsigned int port_high ; unsigned long iomap_base ; }
s#sfp_bus struct sfp_bus { UNKNOWN }
s#sg_io_v4 struct sg_io_v4 { t#__s32 guard ; t#__u32 protocol ; t#__u32 subprotocol ; t#__u32 request_len ; t#__u64 request ; t#__u64 request_tag ; t#__u32 request_attr ; t#__u32 request_priority ; t#__u32 request_extra ; t#__u32 max_response_len ; t#__u64 response ; t#__u32 dout_iovec_count ; t#__u32 dout_xfer_len ; t#__u32 din_iovec_count ; t#__u32 din_xfer_len ; t#__u64 dout_xferp ; t#__u64 din_xferp ; t#__u32 timeout ; t#__u32 flags ; t#__u64 usr_ptr ; t#__u32 spare_in ; t#__u32 driver_status ; t#__u32 transport_status ; t#__u32 device_status ; t#__u32 retry_delay ; t#__u32 info ; t#__u32 duration ; t#__u32 response_len ; t#__s32 din_resid ; t#__s32 dout_resid ; t#__u64 generated_tag ; t#__u32 spare_out ; t#__u32 padding ; }
s#sg_table@81d73f88 struct sg_table { s#scatterlist * sgl ; unsigned int nents ; unsigned int orig_nents ; }
s#sg_table@bad89e92 struct sg_table { UNKNOWN }
s#shrink_control struct shrink_control { t#gfp_t gfp_mask ; int nid ; unsigned long nr_to_scan ; unsigned long nr_scanned ; s#mem_cgroup * memcg ; }
s#shrinker struct shrinker { unsigned long ( * count_objects ) ( s#shrinker * , s#shrink_control * ) ; unsigned long ( * scan_objects ) ( s#shrinker * , s#shrink_control * ) ; long batch ; int seeks ; unsigned flags ; s#list_head list ; int id ; t#atomic_long_t * nr_deferred ; }
s#sigaction struct sigaction { t#__sighandler_t sa_handler ; unsigned long sa_flags ; t#__sigrestore_t sa_restorer ; t#sigset_t sa_mask ; }
s#sighand_struct@7ec6c431 struct sighand_struct { t#spinlock_t siglock ; t#refcount_t count ; t#wait_queue_head_t signalfd_wqh ; s#k_sigaction action [ 64 ] ; }
s#sighand_struct@e097dc66 struct sighand_struct { UNKNOWN }
s#signal_struct@7d107823 struct signal_struct { t#refcount_t sigcnt ; t#atomic_t live ; int nr_threads ; s#list_head thread_head ; t#wait_queue_head_t wait_chldexit ; s#task_struct * curr_target ; s#sigpending shared_pending ; s#hlist_head multiprocess ; int group_exit_code ; int notify_count ; s#task_struct * group_exit_task ; int group_stop_count ; unsigned int flags ; unsigned int is_child_subreaper : 1 ; unsigned int has_child_subreaper : 1 ; int posix_timer_id ; s#list_head posix_timers ; s#hrtimer real_timer ; t#ktime_t it_real_incr ; s#cpu_itimer it [ 2 ] ; s#thread_group_cputimer cputimer ; s#posix_cputimers posix_cputimers ; s#pid * pids [ E#PIDTYPE_MAX ] ; t#atomic_t tick_dep_mask ; s#pid * tty_old_pgrp ; int leader ; s#tty_struct * tty ; t#seqlock_t stats_lock ; t#u64 utime , stime , cutime , cstime ; t#u64 gtime ; t#u64 cgtime ; s#prev_cputime prev_cputime ; unsigned long nvcsw , nivcsw , cnvcsw , cnivcsw ; unsigned long min_flt , maj_flt , cmin_flt , cmaj_flt ; unsigned long inblock , oublock , cinblock , coublock ; unsigned long maxrss , cmaxrss ; s#task_io_accounting ioac ; unsigned long long sum_sched_runtime ; s#rlimit rlim [ 16 ] ; s#pacct_struct pacct ; s#taskstats * stats ; unsigned audit_tty ; s#tty_audit_buf * tty_audit_buf ; t#bool oom_flag_origin ; short oom_score_adj ; short oom_score_adj_min ; s#mm_struct * oom_mm ; s#mutex cred_guard_mutex ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#signal_struct@f9b7dce5 struct signal_struct { UNKNOWN }
s#sigpending struct sigpending { s#list_head list ; t#sigset_t signal ; }
s#simple_xattrs struct simple_xattrs { s#list_head head ; t#spinlock_t lock ; }
s#sk_buff@d4487beb struct sk_buff { UNKNOWN }
s#sk_buff@fe0da31a struct sk_buff { union { struct { s#sk_buff * next ; s#sk_buff * prev ; union { s#net_device * dev ; unsigned long dev_scratch ; } ; } ; s#rb_node rbnode ; s#list_head list ; } ; union { s#sock * sk ; int ip_defrag_offset ; } ; union { t#ktime_t tstamp ; t#u64 skb_mstamp_ns ; } ; char cb [ 48 ] __attribute__ ( ( __aligned__ ( 8 ) ) ) ; union { struct { unsigned long _skb_refdst ; void ( * destructor ) ( s#sk_buff * ) ; } ; s#list_head tcp_tsorted_anchor ; } ; unsigned long _nfct ; unsigned int len , data_len ; t#__u16 mac_len , hdr_len ; t#__u16 queue_mapping ; t#__u8 __cloned_offset [ 0 ] ; t#__u8 cloned : 1 , nohdr : 1 , fclone : 2 , peeked : 1 , head_frag : 1 , pfmemalloc : 1 ; t#__u8 active_extensions ; t#__u32 headers_start [ 0 ] ; t#__u8 __pkt_type_offset [ 0 ] ; t#__u8 pkt_type : 3 ; t#__u8 ignore_df : 1 ; t#__u8 nf_trace : 1 ; t#__u8 ip_summed : 2 ; t#__u8 ooo_okay : 1 ; t#__u8 l4_hash : 1 ; t#__u8 sw_hash : 1 ; t#__u8 wifi_acked_valid : 1 ; t#__u8 wifi_acked : 1 ; t#__u8 no_fcs : 1 ; t#__u8 encapsulation : 1 ; t#__u8 encap_hdr_csum : 1 ; t#__u8 csum_valid : 1 ; t#__u8 __pkt_vlan_present_offset [ 0 ] ; t#__u8 vlan_present : 1 ; t#__u8 csum_complete_sw : 1 ; t#__u8 csum_level : 2 ; t#__u8 csum_not_inet : 1 ; t#__u8 dst_pending_confirm : 1 ; t#__u8 ndisc_nodetype : 2 ; t#__u8 ipvs_property : 1 ; t#__u8 inner_protocol_type : 1 ; t#__u8 remcsum_offload : 1 ; t#__u8 offload_fwd_mark : 1 ; t#__u8 offload_l3_fwd_mark : 1 ; t#__u8 tc_skip_classify : 1 ; t#__u8 tc_at_ingress : 1 ; t#__u8 tc_redirected : 1 ; t#__u8 tc_from_ingress : 1 ; t#__u8 decrypted : 1 ; t#__u16 tc_index ; union { t#__wsum csum ; struct { t#__u16 csum_start ; t#__u16 csum_offset ; } ; } ; t#__u32 priority ; int skb_iif ; t#__u32 hash ; t#__be16 vlan_proto ; t#__u16 vlan_tci ; union { unsigned int napi_id ; unsigned int sender_cpu ; } ; t#__u32 secmark ; union { t#__u32 mark ; t#__u32 reserved_tailroom ; } ; union { t#__be16 inner_protocol ; t#__u8 inner_ipproto ; } ; t#__u16 inner_transport_header ; t#__u16 inner_network_header ; t#__u16 inner_mac_header ; t#__be16 protocol ; t#__u16 transport_header ; t#__u16 network_header ; t#__u16 mac_header ; t#__u32 headers_end [ 0 ] ; t#sk_buff_data_t tail ; t#sk_buff_data_t end ; unsigned char * head , * data ; unsigned int truesize ; t#refcount_t users ; s#skb_ext * extensions ; }
s#sk_buff_head struct sk_buff_head { s#sk_buff * next ; s#sk_buff * prev ; t#__u32 qlen ; t#spinlock_t lock ; }
s#sk_filter struct sk_filter { t#refcount_t refcnt ; s#callback_head rcu ; s#bpf_prog * prog ; }
s#skb_ext struct skb_ext { t#refcount_t refcnt ; t#u8 offset [ E#SKB_EXT_NUM ] ; t#u8 chunks ; char data [ 0 ] __attribute__ ( ( __aligned__ ( 8 ) ) ) ; }
s#skb_shared_hwtstamps struct skb_shared_hwtstamps { t#ktime_t hwtstamp ; }
s#skcipher_request struct skcipher_request { unsigned int cryptlen ; t#u8 * iv ; s#scatterlist * src ; s#scatterlist * dst ; s#crypto_async_request base ; void * __ctx [ ] __attribute__ ( ( __aligned__ ( __alignof__ ( unsigned long long ) ) ) ) ; }
s#smc_hashinfo struct smc_hashinfo { t#rwlock_t lock ; s#hlist_head ht ; }
s#sock@25784684 struct sock { UNKNOWN }
s#sock@4416faa5 struct sock { s#sock_common __sk_common ; t#socket_lock_t sk_lock ; t#atomic_t sk_drops ; int sk_rcvlowat ; s#sk_buff_head sk_error_queue ; s#sk_buff * sk_rx_skb_cache ; s#sk_buff_head sk_receive_queue ; struct { t#atomic_t rmem_alloc ; int len ; s#sk_buff * head ; s#sk_buff * tail ; } sk_backlog ; int sk_forward_alloc ; unsigned int sk_ll_usec ; unsigned int sk_napi_id ; int sk_rcvbuf ; s#sk_filter * sk_filter ; union { s#socket_wq * sk_wq ; s#socket_wq * sk_wq_raw ; } ; s#xfrm_policy * sk_policy [ 2 ] ; s#dst_entry * sk_rx_dst ; s#dst_entry * sk_dst_cache ; t#atomic_t sk_omem_alloc ; int sk_sndbuf ; int sk_wmem_queued ; t#refcount_t sk_wmem_alloc ; unsigned long sk_tsq_flags ; union { s#sk_buff * sk_send_head ; s#rb_root tcp_rtx_queue ; } ; s#sk_buff * sk_tx_skb_cache ; s#sk_buff_head sk_write_queue ; t#__s32 sk_peek_off ; int sk_write_pending ; t#__u32 sk_dst_pending_confirm ; t#u32 sk_pacing_status ; long sk_sndtimeo ; s#timer_list sk_timer ; t#__u32 sk_priority ; t#__u32 sk_mark ; unsigned long sk_pacing_rate ; unsigned long sk_max_pacing_rate ; s#page_frag sk_frag ; t#netdev_features_t sk_route_caps ; t#netdev_features_t sk_route_nocaps ; t#netdev_features_t sk_route_forced_caps ; int sk_gso_type ; unsigned int sk_gso_max_size ; t#gfp_t sk_allocation ; t#__u32 sk_txhash ; unsigned int __sk_flags_offset [ 0 ] ; unsigned int sk_padding : 1 , sk_kern_sock : 1 , sk_no_check_tx : 1 , sk_no_check_rx : 1 , sk_userlocks : 4 , sk_protocol : 8 , sk_type : 16 ; t#u16 sk_gso_max_segs ; t#u8 sk_pacing_shift ; unsigned long sk_lingertime ; s#proto * sk_prot_creator ; t#rwlock_t sk_callback_lock ; int sk_err , sk_err_soft ; t#u32 sk_ack_backlog ; t#u32 sk_max_ack_backlog ; t#kuid_t sk_uid ; s#pid * sk_peer_pid ; const s#cred * sk_peer_cred ; long sk_rcvtimeo ; t#ktime_t sk_stamp ; t#u16 sk_tsflags ; t#u8 sk_shutdown ; t#u32 sk_tskey ; t#atomic_t sk_zckey ; t#u8 sk_clockid ; t#u8 sk_txtime_deadline_mode : 1 , sk_txtime_report_errors : 1 , sk_txtime_unused : 6 ; s#socket * sk_socket ; void * sk_user_data ; void * sk_security ; s#sock_cgroup_data sk_cgrp_data ; s#mem_cgroup * sk_memcg ; void ( * sk_state_change ) ( s#sock * ) ; void ( * sk_data_ready ) ( s#sock * ) ; void ( * sk_write_space ) ( s#sock * ) ; void ( * sk_error_report ) ( s#sock * ) ; int ( * sk_backlog_rcv ) ( s#sock * , s#sk_buff * ) ; s#sk_buff * ( * sk_validate_xmit_skb ) ( s#sock * , s#net_device * , s#sk_buff * ) ; void ( * sk_destruct ) ( s#sock * ) ; s#sock_reuseport * sk_reuseport_cb ; s#bpf_sk_storage * sk_bpf_storage ; s#callback_head sk_rcu ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; }
s#sock_cgroup_data struct sock_cgroup_data { union { struct { t#u8 is_data ; t#u8 padding ; t#u16 prioidx ; t#u32 classid ; } __attribute__ ( ( __packed__ ) ) ; t#u64 val ; } ; }
s#sock_common struct sock_common { union { t#__addrpair skc_addrpair ; struct { t#__be32 skc_daddr ; t#__be32 skc_rcv_saddr ; } ; } ; union { unsigned int skc_hash ; t#__u16 skc_u16hashes [ 2 ] ; } ; union { t#__portpair skc_portpair ; struct { t#__be16 skc_dport ; t#__u16 skc_num ; } ; } ; unsigned short skc_family ; volatile unsigned char skc_state ; unsigned char skc_reuse : 4 ; unsigned char skc_reuseport : 1 ; unsigned char skc_ipv6only : 1 ; unsigned char skc_net_refcnt : 1 ; int skc_bound_dev_if ; union { s#hlist_node skc_bind_node ; s#hlist_node skc_portaddr_node ; } ; s#proto * skc_prot ; t#possible_net_t skc_net ; s#in6_addr skc_v6_daddr ; s#in6_addr skc_v6_rcv_saddr ; t#atomic64_t skc_cookie ; union { unsigned long skc_flags ; s#sock * skc_listener ; s#inet_timewait_death_row * skc_tw_dr ; } ; int skc_dontcopy_begin [ 0 ] ; union { s#hlist_node skc_node ; s#hlist_nulls_node skc_nulls_node ; } ; unsigned short skc_tx_queue_mapping ; unsigned short skc_rx_queue_mapping ; union { int skc_incoming_cpu ; t#u32 skc_rcv_wnd ; t#u32 skc_tw_rcv_nxt ; } ; t#refcount_t skc_refcnt ; int skc_dontcopy_end [ 0 ] ; union { t#u32 skc_rxhash ; t#u32 skc_window_clamp ; t#u32 skc_tw_snd_nxt ; } ; }
s#sock_filter struct sock_filter { t#__u16 code ; t#__u8 jt ; t#__u8 jf ; t#__u32 k ; }
s#sock_fprog_kern struct sock_fprog_kern { t#u16 len ; s#sock_filter * filter ; }
s#sock_reuseport@1f233d59 struct sock_reuseport { UNKNOWN }
s#sock_reuseport@577947e6 struct sock_reuseport { s#callback_head rcu ; t#u16 max_socks ; t#u16 num_socks ; unsigned int synq_overflow_ts ; unsigned int reuseport_id ; unsigned int bind_inany : 1 ; unsigned int has_conns : 1 ; s#bpf_prog * prog ; s#sock * socks [ 0 ] ; }
s#sockaddr struct sockaddr { t#sa_family_t sa_family ; char sa_data [ 14 ] ; }
s#socket@4b8cff44 struct socket { UNKNOWN }
s#socket@7480649c struct socket { t#socket_state state ; short type ; unsigned long flags ; s#file * file ; s#sock * sk ; const s#proto_ops * ops ; s#socket_wq wq ; }
s#socket_wq struct socket_wq { t#wait_queue_head_t wait ; s#fasync_struct * fasync_list ; unsigned long flags ; s#callback_head rcu ; }
s#spinlock struct spinlock { union { s#raw_spinlock rlock ; struct { t#u8 __padding [ ( __builtin_offsetof ( struct raw_spinlock , dep_map ) ) ] ; s#lockdep_map dep_map ; } ; } ; }
s#srcu_data struct srcu_data { unsigned long srcu_lock_count [ 2 ] ; unsigned long srcu_unlock_count [ 2 ] ; t#spinlock_t lock __attribute__ ( ( __aligned__ ( 1 << ( 6 ) ) ) ) ; s#rcu_segcblist srcu_cblist ; unsigned long srcu_gp_seq_needed ; unsigned long srcu_gp_seq_needed_exp ; t#bool srcu_cblist_invoking ; s#timer_list delay_work ; s#work_struct work ; s#callback_head srcu_barrier_head ; s#srcu_node * mynode ; unsigned long grpmask ; int cpu ; s#srcu_struct * ssp ; }
s#srcu_node struct srcu_node { t#spinlock_t lock ; unsigned long srcu_have_cbs [ 4 ] ; unsigned long srcu_data_have_cbs [ 4 ] ; unsigned long srcu_gp_seq_needed_exp ; s#srcu_node * srcu_parent ; int grplo ; int grphi ; }
s#srcu_struct struct srcu_struct { s#srcu_node node [ ( 1 + ( ( ( 8192 ) + ( ( ( 16 ) * 64 ) ) - 1 ) / ( ( ( 16 ) * 64 ) ) ) + ( ( ( 8192 ) + ( ( 16 ) ) - 1 ) / ( ( 16 ) ) ) ) ] ; s#srcu_node * level [ 3 + 1 ] ; s#mutex srcu_cb_mutex ; t#spinlock_t lock ; s#mutex srcu_gp_mutex ; unsigned int srcu_idx ; unsigned long srcu_gp_seq ; unsigned long srcu_gp_seq_needed ; unsigned long srcu_gp_seq_needed_exp ; unsigned long srcu_last_gp_end ; s#srcu_data * sda ; unsigned long srcu_barrier_seq ; s#mutex srcu_barrier_mutex ; s#completion srcu_barrier_completion ; t#atomic_t srcu_barrier_cpu_cnt ; s#delayed_work work ; s#lockdep_map dep_map ; }
s#static_key struct static_key { t#atomic_t enabled ; union { unsigned long type ; s#jump_entry * entries ; s#static_key_mod * next ; } ; }
s#static_key_false struct static_key_false { s#static_key key ; }
s#static_key_mod struct static_key_mod { UNKNOWN }
s#std_timing struct std_timing { t#u8 hsize ; t#u8 vfreq_aspect ; }
s#stp_proto struct stp_proto { unsigned char group_address [ 6 ] ; void ( * rcv ) ( const s#stp_proto * , s#sk_buff * , s#net_device * ) ; void * data ; }
s#subprocess_info struct subprocess_info { s#work_struct work ; s#completion * complete ; const char * path ; char * * argv ; char * * envp ; s#file * file ; int wait ; int retval ; t#pid_t pid ; int ( * init ) ( s#subprocess_info * , s#cred * ) ; void ( * cleanup ) ( s#subprocess_info * ) ; void * data ; }
s#subsys_private@c4423409 struct subsys_private { UNKNOWN }
s#subsys_private@f383e753 struct subsys_private { s#kset subsys ; s#kset * devices_kset ; s#list_head interfaces ; s#mutex mutex ; s#kset * drivers_kset ; s#klist klist_devices ; s#klist klist_drivers ; s#blocking_notifier_head bus_notifier ; unsigned int drivers_autoprobe : 1 ; s#bus_type * bus ; s#kset glue_dirs ; s#class * class ; }
s#super_block struct super_block { s#list_head s_list ; t#dev_t s_dev ; unsigned char s_blocksize_bits ; unsigned long s_blocksize ; t#loff_t s_maxbytes ; s#file_system_type * s_type ; const s#super_operations * s_op ; const s#dquot_operations * dq_op ; const s#quotactl_ops * s_qcop ; const s#export_operations * s_export_op ; unsigned long s_flags ; unsigned long s_iflags ; unsigned long s_magic ; s#dentry * s_root ; s#rw_semaphore s_umount ; int s_count ; t#atomic_t s_active ; void * s_security ; const s#xattr_handler * * s_xattr ; const s#fscrypt_operations * s_cop ; s#key * s_master_keys ; s#hlist_bl_head s_roots ; s#list_head s_mounts ; s#block_device * s_bdev ; s#backing_dev_info * s_bdi ; s#mtd_info * s_mtd ; s#hlist_node s_instances ; unsigned int s_quota_types ; s#quota_info s_dquot ; s#sb_writers s_writers ; void * s_fs_info ; t#u32 s_time_gran ; t#time64_t s_time_min ; t#time64_t s_time_max ; t#__u32 s_fsnotify_mask ; s#fsnotify_mark_connector * s_fsnotify_marks ; char s_id [ 32 ] ; t#uuid_t s_uuid ; unsigned int s_max_links ; t#fmode_t s_mode ; s#mutex s_vfs_rename_mutex ; const char * s_subtype ; const s#dentry_operations * s_d_op ; int cleancache_poolid ; s#shrinker s_shrink ; t#atomic_long_t s_remove_count ; t#atomic_long_t s_fsnotify_inode_refs ; int s_readonly_remount ; s#workqueue_struct * s_dio_done_wq ; s#hlist_head s_pins ; s#user_namespace * s_user_ns ; s#list_lru s_dentry_lru ; s#list_lru s_inode_lru ; s#callback_head rcu ; s#work_struct destroy_work ; s#mutex s_sync_lock ; int s_stack_depth ; t#spinlock_t s_inode_list_lock __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; s#list_head s_inodes ; t#spinlock_t s_inode_wblist_lock ; s#list_head s_inodes_wb ; }
s#super_operations struct super_operations { s#inode * ( * alloc_inode ) ( s#super_block * ) ; void ( * destroy_inode ) ( s#inode * ) ; void ( * free_inode ) ( s#inode * ) ; void ( * dirty_inode ) ( s#inode * , int ) ; int ( * write_inode ) ( s#inode * , s#writeback_control * ) ; int ( * drop_inode ) ( s#inode * ) ; void ( * evict_inode ) ( s#inode * ) ; void ( * put_super ) ( s#super_block * ) ; int ( * sync_fs ) ( s#super_block * , int ) ; int ( * freeze_super ) ( s#super_block * ) ; int ( * freeze_fs ) ( s#super_block * ) ; int ( * thaw_super ) ( s#super_block * ) ; int ( * unfreeze_fs ) ( s#super_block * ) ; int ( * statfs ) ( s#dentry * , s#kstatfs * ) ; int ( * remount_fs ) ( s#super_block * , int * , char * ) ; void ( * umount_begin ) ( s#super_block * ) ; int ( * show_options ) ( s#seq_file * , s#dentry * ) ; int ( * show_devname ) ( s#seq_file * , s#dentry * ) ; int ( * show_path ) ( s#seq_file * , s#dentry * ) ; int ( * show_stats ) ( s#seq_file * , s#dentry * ) ; t#ssize_t ( * quota_read ) ( s#super_block * , int , char * , t#size_t , t#loff_t ) ; t#ssize_t ( * quota_write ) ( s#super_block * , int , const char * , t#size_t , t#loff_t ) ; s#dquot * * ( * get_dquots ) ( s#inode * ) ; int ( * bdev_try_to_free_page ) ( s#super_block * , s#page * , t#gfp_t ) ; long ( * nr_cached_objects ) ( s#super_block * , s#shrink_control * ) ; long ( * free_cached_objects ) ( s#super_block * , s#shrink_control * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#svc_cacherep struct svc_cacherep { UNKNOWN }
s#svc_cred struct svc_cred { t#kuid_t cr_uid ; t#kgid_t cr_gid ; s#group_info * cr_group_info ; t#u32 cr_flavor ; char * cr_raw_principal ; char * cr_principal ; char * cr_targ_princ ; s#gss_api_mech * cr_gss_mech ; }
s#svc_deferred_req struct svc_deferred_req { t#u32 prot ; s#svc_xprt * xprt ; s#__kernel_sockaddr_storage addr ; t#size_t addrlen ; s#__kernel_sockaddr_storage daddr ; t#size_t daddrlen ; s#cache_deferred_req handle ; t#size_t xprt_hlen ; int argslen ; t#__be32 args [ 0 ] ; }
s#svc_pool struct svc_pool { unsigned int sp_id ; t#spinlock_t sp_lock ; s#list_head sp_sockets ; unsigned int sp_nrthreads ; s#list_head sp_all_threads ; s#svc_pool_stats sp_stats ; unsigned long sp_flags ; }
s#svc_pool_stats struct svc_pool_stats { t#atomic_long_t packets ; unsigned long sockets_queued ; t#atomic_long_t threads_woken ; t#atomic_long_t threads_timedout ; }
s#svc_procedure struct svc_procedure { t#__be32 ( * pc_func ) ( s#svc_rqst * ) ; int ( * pc_decode ) ( s#svc_rqst * , t#__be32 * ) ; int ( * pc_encode ) ( s#svc_rqst * , t#__be32 * ) ; void ( * pc_release ) ( s#svc_rqst * ) ; unsigned int pc_argsize ; unsigned int pc_ressize ; unsigned int pc_cachetype ; unsigned int pc_xdrressize ; }
s#svc_process_info struct svc_process_info { union { int ( * dispatch ) ( s#svc_rqst * , t#__be32 * ) ; struct { unsigned int lovers ; unsigned int hivers ; } mismatch ; } ; }
s#svc_program struct svc_program { s#svc_program * pg_next ; t#u32 pg_prog ; unsigned int pg_lovers ; unsigned int pg_hivers ; unsigned int pg_nvers ; const s#svc_version * * pg_vers ; char * pg_name ; char * pg_class ; s#svc_stat * pg_stats ; int ( * pg_authenticate ) ( s#svc_rqst * ) ; t#__be32 ( * pg_init_request ) ( s#svc_rqst * , const s#svc_program * , s#svc_process_info * ) ; int ( * pg_rpcbind_set ) ( s#net * , const s#svc_program * , t#u32 , int , unsigned short , unsigned short ) ; }
s#svc_rqst struct svc_rqst { s#list_head rq_all ; s#callback_head rq_rcu_head ; s#svc_xprt * rq_xprt ; s#__kernel_sockaddr_storage rq_addr ; t#size_t rq_addrlen ; s#__kernel_sockaddr_storage rq_daddr ; t#size_t rq_daddrlen ; s#svc_serv * rq_server ; s#svc_pool * rq_pool ; const s#svc_procedure * rq_procinfo ; s#auth_ops * rq_authop ; s#svc_cred rq_cred ; void * rq_xprt_ctxt ; s#svc_deferred_req * rq_deferred ; t#size_t rq_xprt_hlen ; s#xdr_buf rq_arg ; s#xdr_buf rq_res ; s#page * rq_pages [ ( ( ( 1 * 1024 * 1024u ) + ( ( 1UL ) << 12 ) - 1 ) / ( ( 1UL ) << 12 ) + 2 + 1 ) + 1 ] ; s#page * * rq_respages ; s#page * * rq_next_page ; s#page * * rq_page_end ; s#kvec rq_vec [ ( ( ( 1 * 1024 * 1024u ) + ( ( 1UL ) << 12 ) - 1 ) / ( ( 1UL ) << 12 ) + 2 + 1 ) ] ; t#__be32 rq_xid ; t#u32 rq_prog ; t#u32 rq_vers ; t#u32 rq_proc ; t#u32 rq_prot ; int rq_cachetype ; unsigned long rq_flags ; t#ktime_t rq_qtime ; void * rq_argp ; void * rq_resp ; void * rq_auth_data ; int rq_auth_slack ; int rq_reserved ; t#ktime_t rq_stime ; s#cache_req rq_chandle ; s#auth_domain * rq_client ; s#auth_domain * rq_gssclient ; s#svc_cacherep * rq_cacherep ; s#task_struct * rq_task ; t#spinlock_t rq_lock ; s#net * rq_bc_net ; }
s#svc_serv@7b932daf struct svc_serv { s#svc_program * sv_program ; s#svc_stat * sv_stats ; t#spinlock_t sv_lock ; unsigned int sv_nrthreads ; unsigned int sv_maxconn ; unsigned int sv_max_payload ; unsigned int sv_max_mesg ; unsigned int sv_xdrsize ; s#list_head sv_permsocks ; s#list_head sv_tempsocks ; int sv_tmpcnt ; s#timer_list sv_temptimer ; char * sv_name ; unsigned int sv_nrpools ; s#svc_pool * sv_pools ; const s#svc_serv_ops * sv_ops ; s#list_head sv_cb_list ; t#spinlock_t sv_cb_lock ; t#wait_queue_head_t sv_cb_waitq ; t#bool sv_bc_enabled ; }
s#svc_serv@e7dddd2a struct svc_serv { UNKNOWN }
s#svc_serv_ops struct svc_serv_ops { void ( * svo_shutdown ) ( s#svc_serv * , s#net * ) ; int ( * svo_function ) ( void * ) ; void ( * svo_enqueue_xprt ) ( s#svc_xprt * ) ; int ( * svo_setup ) ( s#svc_serv * , s#svc_pool * , int ) ; s#module * svo_module ; }
s#svc_stat@0852e4f4 struct svc_stat { s#svc_program * program ; unsigned int netcnt , netudpcnt , nettcpcnt , nettcpconn ; unsigned int rpccnt , rpcbadfmt , rpcbadauth , rpcbadclnt ; }
s#svc_stat@7210fbe2 struct svc_stat { UNKNOWN }
s#svc_version struct svc_version { t#u32 vs_vers ; t#u32 vs_nproc ; const s#svc_procedure * vs_proc ; unsigned int * vs_count ; t#u32 vs_xdrsize ; t#bool vs_hidden ; t#bool vs_rpcb_optnl ; t#bool vs_need_cong_ctrl ; int ( * vs_dispatch ) ( s#svc_rqst * , t#__be32 * ) ; }
s#svc_xprt@192b6122 struct svc_xprt { s#svc_xprt_class * xpt_class ; const s#svc_xprt_ops * xpt_ops ; s#kref xpt_ref ; s#list_head xpt_list ; s#list_head xpt_ready ; unsigned long xpt_flags ; s#svc_serv * xpt_server ; t#atomic_t xpt_reserved ; t#atomic_t xpt_nr_rqsts ; s#mutex xpt_mutex ; t#spinlock_t xpt_lock ; void * xpt_auth_cache ; s#list_head xpt_deferred ; s#__kernel_sockaddr_storage xpt_local ; t#size_t xpt_locallen ; s#__kernel_sockaddr_storage xpt_remote ; t#size_t xpt_remotelen ; char xpt_remotebuf [ ( 48 ) + 10 ] ; s#list_head xpt_users ; s#net * xpt_net ; const s#cred * xpt_cred ; s#rpc_xprt * xpt_bc_xprt ; s#rpc_xprt_switch * xpt_bc_xps ; }
s#svc_xprt@9dbd2a3e struct svc_xprt { UNKNOWN }
s#svc_xprt_class struct svc_xprt_class { const char * xcl_name ; s#module * xcl_owner ; const s#svc_xprt_ops * xcl_ops ; s#list_head xcl_list ; t#u32 xcl_max_payload ; int xcl_ident ; }
s#svc_xprt_ops struct svc_xprt_ops { s#svc_xprt * ( * xpo_create ) ( s#svc_serv * , s#net * , s#sockaddr * , int , int ) ; s#svc_xprt * ( * xpo_accept ) ( s#svc_xprt * ) ; int ( * xpo_has_wspace ) ( s#svc_xprt * ) ; int ( * xpo_recvfrom ) ( s#svc_rqst * ) ; int ( * xpo_sendto ) ( s#svc_rqst * ) ; int ( * xpo_read_payload ) ( s#svc_rqst * , unsigned int , unsigned int ) ; void ( * xpo_release_rqst ) ( s#svc_rqst * ) ; void ( * xpo_detach ) ( s#svc_xprt * ) ; void ( * xpo_free ) ( s#svc_xprt * ) ; void ( * xpo_secure_port ) ( s#svc_rqst * ) ; void ( * xpo_kill_temp_xprt ) ( s#svc_xprt * ) ; }
s#swap_cluster_info struct swap_cluster_info { t#spinlock_t lock ; unsigned int data : 24 ; unsigned int flags : 8 ; }
s#swap_cluster_list struct swap_cluster_list { s#swap_cluster_info head ; s#swap_cluster_info tail ; }
s#swap_info_struct@9fa38aaa struct swap_info_struct { unsigned long flags ; signed short prio ; s#plist_node list ; signed char type ; unsigned int max ; unsigned char * swap_map ; s#swap_cluster_info * cluster_info ; s#swap_cluster_list free_clusters ; unsigned int lowest_bit ; unsigned int highest_bit ; unsigned int pages ; unsigned int inuse_pages ; unsigned int cluster_next ; unsigned int cluster_nr ; s#percpu_cluster * percpu_cluster ; s#rb_root swap_extent_root ; s#block_device * bdev ; s#file * swap_file ; unsigned int old_block_size ; unsigned long * frontswap_map ; t#atomic_t frontswap_pages ; t#spinlock_t lock ; t#spinlock_t cont_lock ; s#work_struct discard_work ; s#swap_cluster_list discard_clusters ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; s#plist_node avail_lists [ 0 ] ; }
s#swap_info_struct@a9138d45 struct swap_info_struct { UNKNOWN }
s#switchdev_obj struct switchdev_obj { s#net_device * orig_dev ; e#switchdev_obj_id id ; t#u32 flags ; void * complete_priv ; void ( * complete ) ( s#net_device * , int , void * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#switchdev_obj_port_mdb struct switchdev_obj_port_mdb { s#switchdev_obj obj ; unsigned char addr [ 6 ] ; t#u16 vid ; }
s#switchdev_obj_port_vlan struct switchdev_obj_port_vlan { s#switchdev_obj obj ; t#u16 flags ; t#u16 vid_begin ; t#u16 vid_end ; }
s#swregs_state struct swregs_state { t#u32 cwd ; t#u32 swd ; t#u32 twd ; t#u32 fip ; t#u32 fcs ; t#u32 foo ; t#u32 fos ; t#u32 st_space [ 20 ] ; t#u8 ftop ; t#u8 changed ; t#u8 lookahead ; t#u8 no_update ; t#u8 rm ; t#u8 alimit ; s#math_emu_info * info ; t#u32 entry_eip ; }
s#sysfs_ops struct sysfs_ops { t#ssize_t ( * show ) ( s#kobject * , s#attribute * , char * ) ; t#ssize_t ( * store ) ( s#kobject * , s#attribute * , const char * , t#size_t ) ; }
s#sysinfo struct sysinfo { t#__kernel_long_t uptime ; t#__kernel_ulong_t loads [ 3 ] ; t#__kernel_ulong_t totalram ; t#__kernel_ulong_t freeram ; t#__kernel_ulong_t sharedram ; t#__kernel_ulong_t bufferram ; t#__kernel_ulong_t totalswap ; t#__kernel_ulong_t freeswap ; t#__u16 procs ; t#__u16 pad ; t#__kernel_ulong_t totalhigh ; t#__kernel_ulong_t freehigh ; t#__u32 mem_unit ; char _f [ 20 - 2 * sizeof ( __kernel_ulong_t ) - sizeof ( __u32 ) ] ; }
s#sysv_sem struct sysv_sem { s#sem_undo_list * undo_list ; }
s#sysv_shm struct sysv_shm { s#list_head shm_clist ; }
s#task_cputime struct task_cputime { t#u64 stime ; t#u64 utime ; unsigned long long sum_exec_runtime ; }
s#task_cputime_atomic struct task_cputime_atomic { t#atomic64_t utime ; t#atomic64_t stime ; t#atomic64_t sum_exec_runtime ; }
s#task_delay_info@13bb9f30 struct task_delay_info { t#raw_spinlock_t lock ; unsigned int flags ; t#u64 blkio_start ; t#u64 blkio_delay ; t#u64 swapin_delay ; t#u32 blkio_count ; t#u32 swapin_count ; t#u64 freepages_start ; t#u64 freepages_delay ; t#u64 thrashing_start ; t#u64 thrashing_delay ; t#u32 freepages_count ; t#u32 thrashing_count ; }
s#task_delay_info@57aa8129 struct task_delay_info { UNKNOWN }
s#task_group@4547b22f struct task_group { UNKNOWN }
s#task_group@cc1a0e3d struct task_group { s#cgroup_subsys_state css ; s#sched_entity * * se ; s#cfs_rq * * cfs_rq ; unsigned long shares ; t#atomic_long_t load_avg __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; s#sched_rt_entity * * rt_se ; s#rt_rq * * rt_rq ; s#rt_bandwidth rt_bandwidth ; s#callback_head rcu ; s#list_head list ; s#task_group * parent ; s#list_head siblings ; s#list_head children ; s#cfs_bandwidth cfs_bandwidth ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#task_io_accounting struct task_io_accounting { t#u64 rchar ; t#u64 wchar ; t#u64 syscr ; t#u64 syscw ; t#u64 read_bytes ; t#u64 write_bytes ; t#u64 cancelled_write_bytes ; }
s#task_rss_stat struct task_rss_stat { int events ; int count [ E#NR_MM_COUNTERS ] ; }
s#task_struct@1b9c735e struct task_struct { UNKNOWN }
s#task_struct@73c78347 struct task_struct { s#thread_info thread_info ; volatile long state ; void * stack ; t#refcount_t usage ; unsigned int flags ; unsigned int ptrace ; s#llist_node wake_entry ; int on_cpu ; unsigned int cpu ; unsigned int wakee_flips ; unsigned long wakee_flip_decay_ts ; s#task_struct * last_wakee ; int recent_used_cpu ; int wake_cpu ; int on_rq ; int prio ; int static_prio ; int normal_prio ; unsigned int rt_priority ; const s#sched_class * sched_class ; s#sched_entity se ; s#sched_rt_entity rt ; s#task_group * sched_task_group ; s#sched_dl_entity dl ; s#hlist_head preempt_notifiers ; unsigned int btrace_seq ; unsigned int policy ; int nr_cpus_allowed ; const t#cpumask_t * cpus_ptr ; t#cpumask_t cpus_mask ; unsigned long rcu_tasks_nvcsw ; t#u8 rcu_tasks_holdout ; t#u8 rcu_tasks_idx ; int rcu_tasks_idle_cpu ; s#list_head rcu_tasks_holdout_list ; s#sched_info sched_info ; s#list_head tasks ; s#plist_node pushable_tasks ; s#rb_node pushable_dl_tasks ; s#mm_struct * mm ; s#mm_struct * active_mm ; s#vmacache vmacache ; s#task_rss_stat rss_stat ; int exit_state ; int exit_code ; int exit_signal ; int pdeath_signal ; unsigned long jobctl ; unsigned int personality ; unsigned sched_reset_on_fork : 1 ; unsigned sched_contributes_to_load : 1 ; unsigned sched_migrated : 1 ; unsigned sched_remote_wakeup : 1 ; unsigned sched_psi_wake_requeue : 1 ; unsigned : 0 ; unsigned in_execve : 1 ; unsigned in_iowait : 1 ; unsigned restore_sigmask : 1 ; unsigned in_user_fault : 1 ; unsigned no_cgroup_migration : 1 ; unsigned frozen : 1 ; unsigned use_memdelay : 1 ; unsigned long atomic_flags ; s#restart_block restart_block ; t#pid_t pid ; t#pid_t tgid ; unsigned long stack_canary ; s#task_struct * real_parent ; s#task_struct * parent ; s#list_head children ; s#list_head sibling ; s#task_struct * group_leader ; s#list_head ptraced ; s#list_head ptrace_entry ; s#pid * thread_pid ; s#hlist_node pid_links [ E#PIDTYPE_MAX ] ; s#list_head thread_group ; s#list_head thread_node ; s#completion * vfork_done ; int * set_child_tid ; int * clear_child_tid ; t#u64 utime ; t#u64 stime ; t#u64 gtime ; s#prev_cputime prev_cputime ; s#vtime vtime ; t#atomic_t tick_dep_mask ; unsigned long nvcsw ; unsigned long nivcsw ; t#u64 start_time ; t#u64 real_start_time ; unsigned long min_flt ; unsigned long maj_flt ; s#posix_cputimers posix_cputimers ; const s#cred * ptracer_cred ; const s#cred * real_cred ; const s#cred * cred ; s#key * cached_requested_key ; char comm [ 16 ] ; s#nameidata * nameidata ; s#sysv_sem sysvsem ; s#sysv_shm sysvshm ; unsigned long last_switch_count ; unsigned long last_switch_time ; s#fs_struct * fs ; s#files_struct * files ; s#nsproxy * nsproxy ; s#signal_struct * signal ; s#sighand_struct * sighand ; t#sigset_t blocked ; t#sigset_t real_blocked ; t#sigset_t saved_sigmask ; s#sigpending pending ; unsigned long sas_ss_sp ; t#size_t sas_ss_size ; unsigned int sas_ss_flags ; s#callback_head * task_works ; s#audit_context * audit_context ; t#kuid_t loginuid ; unsigned int sessionid ; s#seccomp seccomp ; t#u32 parent_exec_id ; t#u32 self_exec_id ; t#spinlock_t alloc_lock ; t#raw_spinlock_t pi_lock ; s#wake_q_node wake_q ; s#rb_root_cached pi_waiters ; s#task_struct * pi_top_task ; s#rt_mutex_waiter * pi_blocked_on ; s#mutex_waiter * blocked_on ; int non_block_count ; unsigned int irq_events ; unsigned long hardirq_enable_ip ; unsigned long hardirq_disable_ip ; unsigned int hardirq_enable_event ; unsigned int hardirq_disable_event ; int hardirqs_enabled ; int hardirq_context ; unsigned long softirq_disable_ip ; unsigned long softirq_enable_ip ; unsigned int softirq_disable_event ; unsigned int softirq_enable_event ; int softirqs_enabled ; int softirq_context ; t#u64 curr_chain_key ; int lockdep_depth ; unsigned int lockdep_recursion ; s#held_lock held_locks [ 48UL ] ; void * journal_info ; s#bio_list * bio_list ; s#blk_plug * plug ; s#reclaim_state * reclaim_state ; s#backing_dev_info * backing_dev_info ; s#io_context * io_context ; s#capture_control * capture_control ; unsigned long ptrace_message ; t#kernel_siginfo_t * last_siginfo ; s#task_io_accounting ioac ; unsigned int psi_flags ; t#u64 acct_rss_mem1 ; t#u64 acct_vm_mem1 ; t#u64 acct_timexpd ; t#nodemask_t mems_allowed ; t#seqcount_t mems_allowed_seq ; int cpuset_mem_spread_rotor ; int cpuset_slab_spread_rotor ; s#css_set * cgroups ; s#list_head cg_list ; t#u32 closid ; t#u32 rmid ; s#robust_list_head * robust_list ; s#compat_robust_list_head * compat_robust_list ; s#list_head pi_state_list ; s#futex_pi_state * pi_state_cache ; s#mutex futex_exit_mutex ; unsigned int futex_state ; s#perf_event_context * perf_event_ctxp [ E#perf_nr_task_contexts ] ; s#mutex perf_event_mutex ; s#list_head perf_event_list ; s#mempolicy * mempolicy ; short il_prev ; short pref_node_fork ; int numa_scan_seq ; unsigned int numa_scan_period ; unsigned int numa_scan_period_max ; int numa_preferred_nid ; unsigned long numa_migrate_retry ; t#u64 node_stamp ; t#u64 last_task_numa_placement ; t#u64 last_sum_exec_runtime ; s#callback_head numa_work ; s#numa_group * numa_group ; unsigned long * numa_faults ; unsigned long total_numa_faults ; unsigned long numa_faults_locality [ 3 ] ; unsigned long numa_pages_migrated ; s#rseq * rseq ; t#u32 rseq_sig ; unsigned long rseq_event_mask ; s#tlbflush_unmap_batch tlb_ubc ; union { t#refcount_t rcu_users ; s#callback_head rcu ; } ; s#pipe_inode_info * splice_pipe ; s#page_frag task_frag ; s#task_delay_info * delays ; int make_it_fail ; unsigned int fail_nth ; int nr_dirtied ; int nr_dirtied_pause ; unsigned long dirty_paused_when ; int latency_record_count ; s#latency_record latency_record [ 32 ] ; t#u64 timer_slack_ns ; t#u64 default_timer_slack_ns ; int curr_ret_stack ; int curr_ret_depth ; s#ftrace_ret_stack * ret_stack ; unsigned long long ftrace_timestamp ; t#atomic_t trace_overrun ; t#atomic_t tracing_graph_pause ; unsigned long trace ; unsigned long trace_recursion ; s#mem_cgroup * memcg_in_oom ; t#gfp_t memcg_oom_gfp_mask ; int memcg_oom_order ; unsigned int memcg_nr_pages_over_high ; s#mem_cgroup * active_memcg ; s#request_queue * throttle_queue ; s#uprobe_task * utask ; unsigned int sequential_io ; unsigned int sequential_io_avg ; unsigned long task_state_change ; int pagefault_disabled ; s#task_struct * oom_reaper_list ; s#vm_struct * stack_vm_area ; t#refcount_t stack_refcount ; void * security ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; unsigned long uek_reserved8 ; s#thread_struct thread ; }
s#tasklet_struct struct tasklet_struct { s#tasklet_struct * next ; unsigned long state ; t#atomic_t count ; void ( * func ) ( unsigned long ) ; unsigned long data ; }
s#taskstats@43548338 struct taskstats { UNKNOWN }
s#taskstats@c98d8516 struct taskstats { t#__u16 version ; t#__u32 ac_exitcode ; t#__u8 ac_flag ; t#__u8 ac_nice ; t#__u64 cpu_count __attribute__ ( ( aligned ( 8 ) ) ) ; t#__u64 cpu_delay_total ; t#__u64 blkio_count ; t#__u64 blkio_delay_total ; t#__u64 swapin_count ; t#__u64 swapin_delay_total ; t#__u64 cpu_run_real_total ; t#__u64 cpu_run_virtual_total ; char ac_comm [ 32 ] ; t#__u8 ac_sched __attribute__ ( ( aligned ( 8 ) ) ) ; t#__u8 ac_pad [ 3 ] ; t#__u32 ac_uid __attribute__ ( ( aligned ( 8 ) ) ) ; t#__u32 ac_gid ; t#__u32 ac_pid ; t#__u32 ac_ppid ; t#__u32 ac_btime ; t#__u64 ac_etime __attribute__ ( ( aligned ( 8 ) ) ) ; t#__u64 ac_utime ; t#__u64 ac_stime ; t#__u64 ac_minflt ; t#__u64 ac_majflt ; t#__u64 coremem ; t#__u64 virtmem ; t#__u64 hiwater_rss ; t#__u64 hiwater_vm ; t#__u64 read_char ; t#__u64 write_char ; t#__u64 read_syscalls ; t#__u64 write_syscalls ; t#__u64 read_bytes ; t#__u64 write_bytes ; t#__u64 cancelled_write_bytes ; t#__u64 nvcsw ; t#__u64 nivcsw ; t#__u64 ac_utimescaled ; t#__u64 ac_stimescaled ; t#__u64 cpu_scaled_run_real_total ; t#__u64 freepages_count ; t#__u64 freepages_delay_total ; t#__u64 thrashing_count ; t#__u64 thrashing_delay_total ; }
s#tc_sizespec struct tc_sizespec { unsigned char cell_log ; unsigned char size_log ; short cell_align ; int overhead ; unsigned int linklayer ; unsigned int mpu ; unsigned int mtu ; unsigned int tsize ; }
s#tc_stats struct tc_stats { t#__u64 bytes ; t#__u32 packets ; t#__u32 drops ; t#__u32 overlimits ; t#__u32 bps ; t#__u32 pps ; t#__u32 qlen ; t#__u32 backlog ; }
s#tcf_block struct tcf_block { s#mutex lock ; s#list_head chain_list ; t#u32 index ; t#refcount_t refcnt ; s#net * net ; s#Qdisc * q ; s#rw_semaphore cb_lock ; s#flow_block flow_block ; s#list_head owner_list ; t#bool keep_dst ; t#atomic_t offloadcnt ; unsigned int nooffloaddevcnt ; unsigned int lockeddevcnt ; struct { s#tcf_chain * chain ; s#list_head filter_chain_list ; } chain0 ; s#callback_head rcu ; s#hlist_head proto_destroy_ht [ 1 << ( 7 ) ] ; s#mutex proto_destroy_lock ; }
s#tcf_chain struct tcf_chain { s#mutex filter_chain_lock ; s#tcf_proto * filter_chain ; s#list_head list ; s#tcf_block * block ; t#u32 index ; unsigned int refcnt ; unsigned int action_refcnt ; t#bool explicitly_created ; t#bool flushing ; const s#tcf_proto_ops * tmplt_ops ; void * tmplt_priv ; s#callback_head rcu ; }
s#tcf_proto struct tcf_proto { s#tcf_proto * next ; void * root ; int ( * classify ) ( s#sk_buff * , const s#tcf_proto * , s#tcf_result * ) ; t#__be16 protocol ; t#u32 prio ; void * data ; const s#tcf_proto_ops * ops ; s#tcf_chain * chain ; t#spinlock_t lock ; t#bool deleting ; t#refcount_t refcnt ; s#callback_head rcu ; s#hlist_node destroy_ht_node ; }
s#tcf_proto_ops struct tcf_proto_ops { s#list_head head ; char kind [ 16 ] ; int ( * classify ) ( s#sk_buff * , const s#tcf_proto * , s#tcf_result * ) ; int ( * init ) ( s#tcf_proto * ) ; void ( * destroy ) ( s#tcf_proto * , t#bool , s#netlink_ext_ack * ) ; void * ( * get ) ( s#tcf_proto * , t#u32 ) ; void ( * put ) ( s#tcf_proto * , void * ) ; int ( * change ) ( s#net * , s#sk_buff * , s#tcf_proto * , unsigned long , t#u32 , s#nlattr * * , void * * , t#bool , t#bool , s#netlink_ext_ack * ) ; int ( * delete ) ( s#tcf_proto * , void * , t#bool * , t#bool , s#netlink_ext_ack * ) ; t#bool ( * delete_empty ) ( s#tcf_proto * ) ; void ( * walk ) ( s#tcf_proto * , s#tcf_walker * , t#bool ) ; int ( * reoffload ) ( s#tcf_proto * , t#bool , t#flow_setup_cb_t * , void * , s#netlink_ext_ack * ) ; void ( * hw_add ) ( s#tcf_proto * , void * ) ; void ( * hw_del ) ( s#tcf_proto * , void * ) ; void ( * bind_class ) ( void * , t#u32 , unsigned long , void * , unsigned long ) ; void * ( * tmplt_create ) ( s#net * , s#tcf_chain * , s#nlattr * * , s#netlink_ext_ack * ) ; void ( * tmplt_destroy ) ( void * ) ; int ( * dump ) ( s#net * , s#tcf_proto * , void * , s#sk_buff * , s#tcmsg * , t#bool ) ; int ( * tmplt_dump ) ( s#sk_buff * , s#net * , void * ) ; s#module * owner ; int flags ; }
s#tcf_result struct tcf_result { union { struct { unsigned long class ; t#u32 classid ; } ; const s#tcf_proto * goto_tp ; struct { t#bool ingress ; s#gnet_stats_queue * qstats ; } ; } ; }
s#tcf_walker@0e5bce9a struct tcf_walker { int stop ; int skip ; int count ; t#bool nonempty ; unsigned long cookie ; int ( * fn ) ( s#tcf_proto * , void * , s#tcf_walker * ) ; }
s#tcf_walker@58fadffa struct tcf_walker { UNKNOWN }
s#tcmsg struct tcmsg { unsigned char tcm_family ; unsigned char tcm__pad1 ; unsigned short tcm__pad2 ; int tcm_ifindex ; t#__u32 tcm_handle ; t#__u32 tcm_parent ; t#__u32 tcm_info ; }
s#tcp_bbr_info struct tcp_bbr_info { t#__u32 bbr_bw_lo ; t#__u32 bbr_bw_hi ; t#__u32 bbr_min_rtt ; t#__u32 bbr_pacing_gain ; t#__u32 bbr_cwnd_gain ; }
s#tcp_congestion_ops@92350be6 struct tcp_congestion_ops { s#list_head list ; t#u32 key ; t#u32 flags ; void ( * init ) ( s#sock * ) ; void ( * release ) ( s#sock * ) ; t#u32 ( * ssthresh ) ( s#sock * ) ; void ( * cong_avoid ) ( s#sock * , t#u32 , t#u32 ) ; void ( * set_state ) ( s#sock * , t#u8 ) ; void ( * cwnd_event ) ( s#sock * , e#tcp_ca_event ) ; void ( * in_ack_event ) ( s#sock * , t#u32 ) ; t#u32 ( * undo_cwnd ) ( s#sock * ) ; void ( * pkts_acked ) ( s#sock * , const s#ack_sample * ) ; t#u32 ( * min_tso_segs ) ( s#sock * ) ; t#u32 ( * sndbuf_expand ) ( s#sock * ) ; void ( * cong_control ) ( s#sock * , const s#rate_sample * ) ; t#size_t ( * get_info ) ( s#sock * , t#u32 , int * , u#tcp_cc_info * ) ; char name [ 16 ] ; s#module * owner ; }
s#tcp_congestion_ops@a057e2b5 struct tcp_congestion_ops { UNKNOWN }
s#tcp_dctcp_info struct tcp_dctcp_info { t#__u16 dctcp_enabled ; t#__u16 dctcp_ce_state ; t#__u32 dctcp_alpha ; t#__u32 dctcp_ab_ecn ; t#__u32 dctcp_ab_tot ; }
s#tcp_fastopen_context@6f553f23 struct tcp_fastopen_context { t#siphash_key_t key [ 2 ] ; int num ; s#callback_head rcu ; }
s#tcp_fastopen_context@8c605e6d struct tcp_fastopen_context { UNKNOWN }
s#tcp_mib struct tcp_mib { unsigned long mibs [ E#__TCP_MIB_MAX ] ; }
s#tcp_states_t struct tcp_states_t { UNKNOWN }
s#tcpvegas_info struct tcpvegas_info { t#__u32 tcpv_enabled ; t#__u32 tcpv_rttcnt ; t#__u32 tcpv_rtt ; t#__u32 tcpv_minrtt ; }
s#termiox struct termiox { t#__u16 x_hflag ; t#__u16 x_cflag ; t#__u16 x_rflag [ 5 ] ; t#__u16 x_sflag ; }
s#thread_group_cputimer struct thread_group_cputimer { s#task_cputime_atomic cputime_atomic ; }
s#thread_info struct thread_info { unsigned long flags ; t#u32 status ; }
s#thread_struct struct thread_struct { s#desc_struct tls_array [ 3 ] ; unsigned long sp ; unsigned short es ; unsigned short ds ; unsigned short fsindex ; unsigned short gsindex ; unsigned long fsbase ; unsigned long gsbase ; s#perf_event * ptrace_bps [ 4 ] ; unsigned long debugreg6 ; unsigned long ptrace_dr7 ; unsigned long cr2 ; unsigned long trap_nr ; unsigned long error_code ; unsigned long * io_bitmap_ptr ; unsigned long iopl ; unsigned io_bitmap_max ; t#mm_segment_t addr_limit ; unsigned int sig_on_uaccess_err : 1 ; unsigned int uaccess_err : 1 ; s#fpu fpu ; }
s#throtl_data struct throtl_data { UNKNOWN }
s#ti_sci_inta_msi_desc struct ti_sci_inta_msi_desc { t#u16 dev_index ; }
s#timer_list struct timer_list { s#hlist_node entry ; unsigned long expires ; void ( * function ) ( s#timer_list * ) ; t#u32 flags ; s#lockdep_map lockdep_map ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#timer_rand_state struct timer_rand_state { UNKNOWN }
s#timerqueue_head struct timerqueue_head { s#rb_root_cached rb_root ; }
s#timerqueue_node struct timerqueue_node { s#rb_node node ; t#ktime_t expires ; }
s#timespec struct timespec { t#__kernel_time_t tv_sec ; long tv_nsec ; }
s#timespec64 struct timespec64 { t#time64_t tv_sec ; long tv_nsec ; }
s#timeval struct timeval { t#__kernel_time_t tv_sec ; t#__kernel_suseconds_t tv_usec ; }
s#timewait_sock_ops@c9c9c483 struct timewait_sock_ops { s#kmem_cache * twsk_slab ; char * twsk_slab_name ; unsigned int twsk_obj_size ; int ( * twsk_unique ) ( s#sock * , s#sock * , void * ) ; void ( * twsk_destructor ) ( s#sock * ) ; }
s#timewait_sock_ops@e9b123c0 struct timewait_sock_ops { UNKNOWN }
s#timezone struct timezone { int tz_minuteswest ; int tz_dsttime ; }
s#tipc_bearer@55f19674 struct tipc_bearer { UNKNOWN }
s#tipc_bearer@65a75c44 struct tipc_bearer { void * media_ptr ; t#u32 mtu ; s#tipc_media_addr addr ; char name [ 32 ] ; s#tipc_media * media ; s#tipc_media_addr bcast_addr ; s#packet_type pt ; s#callback_head rcu ; t#u32 priority ; t#u32 window ; t#u32 tolerance ; t#u32 domain ; t#u32 identity ; s#tipc_discoverer * disc ; char net_plane ; unsigned long up ; }
s#tipc_discoverer struct tipc_discoverer { UNKNOWN }
s#tipc_media struct tipc_media { int ( * send_msg ) ( s#net * , s#sk_buff * , s#tipc_bearer * , s#tipc_media_addr * ) ; int ( * enable_media ) ( s#net * , s#tipc_bearer * , s#nlattr * [ ] ) ; void ( * disable_media ) ( s#tipc_bearer * ) ; int ( * addr2str ) ( s#tipc_media_addr * , char * , int ) ; int ( * addr2msg ) ( char * , s#tipc_media_addr * ) ; int ( * msg2addr ) ( s#tipc_bearer * , s#tipc_media_addr * , char * ) ; int ( * raw2addr ) ( s#tipc_bearer * , s#tipc_media_addr * , char * ) ; t#u32 priority ; t#u32 tolerance ; t#u32 window ; t#u32 mtu ; t#u32 type_id ; t#u32 hwaddr_len ; char name [ 16 ] ; }
s#tipc_media_addr struct tipc_media_addr { t#u8 value [ 32 ] ; t#u8 media_id ; t#u8 broadcast ; }
s#tlb_context struct tlb_context { t#u64 ctx_id ; t#u64 tlb_gen ; }
s#tlb_state struct tlb_state { s#mm_struct * loaded_mm ; union { s#mm_struct * last_user_mm ; unsigned long last_user_mm_ibpb ; } ; t#u16 loaded_mm_asid ; t#u16 next_asid ; t#bool is_lazy ; t#bool invalidate_other ; unsigned short user_pcid_flush_mask ; unsigned long cr4 ; s#tlb_context ctxs [ 6 ] ; }
s#tlbflush_unmap_batch struct tlbflush_unmap_batch { s#arch_tlbflush_unmap_batch arch ; t#bool flush_required ; t#bool writable ; }
s#tls12_crypto_info_aes_gcm_128 struct tls12_crypto_info_aes_gcm_128 { s#tls_crypto_info info ; unsigned char iv [ 8 ] ; unsigned char key [ 16 ] ; unsigned char salt [ 4 ] ; unsigned char rec_seq [ 8 ] ; }
s#tls12_crypto_info_aes_gcm_256 struct tls12_crypto_info_aes_gcm_256 { s#tls_crypto_info info ; unsigned char iv [ 8 ] ; unsigned char key [ 32 ] ; unsigned char salt [ 4 ] ; unsigned char rec_seq [ 8 ] ; }
s#tls_context struct tls_context { s#tls_prot_info prot_info ; t#u8 tx_conf : 3 ; t#u8 rx_conf : 3 ; int ( * push_pending_record ) ( s#sock * , int ) ; void ( * sk_write_space ) ( s#sock * ) ; void * priv_ctx_tx ; void * priv_ctx_rx ; s#net_device * netdev ; s#cipher_context tx ; s#cipher_context rx ; s#scatterlist * partially_sent_record ; t#u16 partially_sent_offset ; t#bool in_tcp_sendpages ; t#bool pending_open_record_frags ; s#mutex tx_lock ; unsigned long flags ; s#proto * sk_proto ; void ( * sk_destruct ) ( s#sock * ) ; u#tls_crypto_context crypto_send ; u#tls_crypto_context crypto_recv ; s#list_head list ; t#refcount_t refcount ; s#callback_head rcu ; }
s#tls_crypto_info struct tls_crypto_info { t#__u16 version ; t#__u16 cipher_type ; }
s#tls_prot_info struct tls_prot_info { t#u16 version ; t#u16 cipher_type ; t#u16 prepend_size ; t#u16 tag_size ; t#u16 overhead_size ; t#u16 iv_size ; t#u16 salt_size ; t#u16 rec_seq_size ; t#u16 aad_size ; t#u16 tail_size ; }
s#tlsdev_ops@4e0b3003 struct tlsdev_ops { UNKNOWN }
s#tlsdev_ops@a62d30e2 struct tlsdev_ops { int ( * tls_dev_add ) ( s#net_device * , s#sock * , e#tls_offload_ctx_dir , s#tls_crypto_info * , t#u32 ) ; void ( * tls_dev_del ) ( s#net_device * , s#tls_context * , e#tls_offload_ctx_dir ) ; int ( * tls_dev_resync ) ( s#net_device * , s#sock * , t#u32 , t#u8 * , e#tls_offload_ctx_dir ) ; }
s#tm struct tm { int tm_sec ; int tm_min ; int tm_hour ; int tm_mday ; int tm_mon ; long tm_year ; int tm_wday ; int tm_yday ; }
s#trace_array@0621e4a4 struct trace_array { UNKNOWN }
s#trace_array@a37454c4 struct trace_array { s#list_head list ; char * name ; s#trace_buffer trace_buffer ; s#trace_buffer max_buffer ; t#bool allocated_snapshot ; unsigned long max_latency ; s#trace_pid_list * filtered_pids ; t#arch_spinlock_t max_lock ; int buffer_disabled ; int sys_refcount_enter ; int sys_refcount_exit ; s#trace_event_file * enter_syscall_files [ 474 ] ; s#trace_event_file * exit_syscall_files [ 474 ] ; int stop_count ; int clock_id ; int nr_topts ; t#bool clear_trace ; int buffer_percent ; unsigned int n_err_log_entries ; s#tracer * current_trace ; unsigned int trace_flags ; unsigned char trace_flags_index [ 32 ] ; unsigned int flags ; t#raw_spinlock_t start_lock ; s#list_head err_log ; s#dentry * dir ; s#dentry * options ; s#dentry * percpu_dir ; s#dentry * event_dir ; s#trace_options * topts ; s#list_head systems ; s#list_head events ; s#trace_event_file * trace_marker_file ; t#cpumask_var_t tracing_cpumask ; int ref ; int trace_ref ; s#ftrace_ops * ops ; s#trace_pid_list * function_pids ; s#list_head func_probes ; s#list_head mod_trace ; s#list_head mod_notrace ; int function_enabled ; int time_stamp_abs_ref ; s#list_head hist_vars ; s#cond_snapshot * cond_snapshot ; }
s#trace_array_cpu struct trace_array_cpu { t#atomic_t disabled ; void * buffer_page ; unsigned long entries ; unsigned long saved_latency ; unsigned long critical_start ; unsigned long critical_end ; unsigned long critical_sequence ; unsigned long nice ; unsigned long policy ; unsigned long rt_priority ; unsigned long skipped_entries ; t#u64 preempt_timestamp ; t#pid_t pid ; t#kuid_t uid ; char comm [ 16 ] ; t#bool ignore_pid ; t#bool ftrace_ignore_pid ; }
s#trace_buffer@638f6e6e struct trace_buffer { s#trace_array * tr ; s#ring_buffer * buffer ; s#trace_array_cpu * data ; t#u64 time_start ; int cpu ; }
s#trace_buffer@d5396653 struct trace_buffer { UNKNOWN }
s#trace_entry struct trace_entry { unsigned short type ; unsigned char flags ; unsigned char preempt_count ; int pid ; }
s#trace_eval_map@2ac6e30f struct trace_eval_map { UNKNOWN }
s#trace_eval_map@b76c02a9 struct trace_eval_map { const char * system ; const char * eval_string ; unsigned long eval_value ; }
s#trace_event struct trace_event { s#hlist_node node ; s#list_head list ; int type ; s#trace_event_functions * funcs ; }
s#trace_event_buffer struct trace_event_buffer { s#ring_buffer * buffer ; s#ring_buffer_event * event ; s#trace_event_file * trace_file ; void * entry ; unsigned long flags ; int pc ; }
s#trace_event_call@943b33bd struct trace_event_call { UNKNOWN }
s#trace_event_call@e24e7fca struct trace_event_call { s#list_head list ; s#trace_event_class * class ; union { char * name ; s#tracepoint * tp ; } ; s#trace_event event ; char * print_fmt ; s#event_filter * filter ; void * mod ; void * data ; int flags ; int perf_refcount ; s#hlist_head * perf_events ; s#bpf_prog_array * prog_array ; int ( * perf_perm ) ( s#trace_event_call * , s#perf_event * ) ; }
s#trace_event_class struct trace_event_class { const char * system ; void * probe ; void * perf_probe ; int ( * reg ) ( s#trace_event_call * , e#trace_reg , void * ) ; int ( * define_fields ) ( s#trace_event_call * ) ; s#list_head * ( * get_fields ) ( s#trace_event_call * ) ; s#list_head fields ; int ( * raw_init ) ( s#trace_event_call * ) ; }
s#trace_event_file struct trace_event_file { s#list_head list ; s#trace_event_call * event_call ; s#event_filter * filter ; s#dentry * dir ; s#trace_array * tr ; s#trace_subsystem_dir * system ; s#list_head triggers ; unsigned long flags ; t#atomic_t sm_ref ; t#atomic_t tm_ref ; }
s#trace_event_functions struct trace_event_functions { t#trace_print_func trace ; t#trace_print_func raw ; t#trace_print_func hex ; t#trace_print_func binary ; }
s#trace_iterator struct trace_iterator { s#trace_array * tr ; s#tracer * trace ; s#trace_buffer * trace_buffer ; void * private ; int cpu_file ; s#mutex mutex ; s#ring_buffer_iter * * buffer_iter ; unsigned long iter_flags ; s#trace_seq tmp_seq ; t#cpumask_var_t started ; t#bool snapshot ; s#trace_seq seq ; s#trace_entry * ent ; unsigned long lost_events ; int leftover ; int ent_size ; int cpu ; t#u64 ts ; t#loff_t pos ; long idx ; }
s#trace_option_dentry struct trace_option_dentry { s#tracer_opt * opt ; s#tracer_flags * flags ; s#trace_array * tr ; s#dentry * entry ; }
s#trace_options struct trace_options { s#tracer * tracer ; s#trace_option_dentry * topts ; }
s#trace_pid_list struct trace_pid_list { int pid_max ; unsigned long * pids ; }
s#trace_seq struct trace_seq { unsigned char buffer [ ( ( 1UL ) << 12 ) ] ; s#seq_buf seq ; int full ; }
s#trace_subsystem_dir struct trace_subsystem_dir { s#list_head list ; s#event_subsystem * subsystem ; s#trace_array * tr ; s#dentry * entry ; int ref_count ; int nr_events ; }
s#tracepoint struct tracepoint { const char * name ; s#static_key key ; int ( * regfunc ) ( void ) ; void ( * unregfunc ) ( void ) ; s#tracepoint_func * funcs ; }
s#tracepoint_func struct tracepoint_func { void * func ; void * data ; int prio ; }
s#tracer@04454c6c struct tracer { const char * name ; int ( * init ) ( s#trace_array * ) ; void ( * reset ) ( s#trace_array * ) ; void ( * start ) ( s#trace_array * ) ; void ( * stop ) ( s#trace_array * ) ; int ( * update_thresh ) ( s#trace_array * ) ; void ( * open ) ( s#trace_iterator * ) ; void ( * pipe_open ) ( s#trace_iterator * ) ; void ( * close ) ( s#trace_iterator * ) ; void ( * pipe_close ) ( s#trace_iterator * ) ; t#ssize_t ( * read ) ( s#trace_iterator * , s#file * , char * , t#size_t , t#loff_t * ) ; t#ssize_t ( * splice_read ) ( s#trace_iterator * , s#file * , t#loff_t * , s#pipe_inode_info * , t#size_t , unsigned int ) ; void ( * print_header ) ( s#seq_file * ) ; e#print_line_t ( * print_line ) ( s#trace_iterator * ) ; int ( * set_flag ) ( s#trace_array * , t#u32 , t#u32 , int ) ; int ( * flag_changed ) ( s#trace_array * , t#u32 , int ) ; s#tracer * next ; s#tracer_flags * flags ; int enabled ; t#bool print_max ; t#bool allow_instances ; t#bool use_max_tr ; t#bool noboot ; }
s#tracer@3969359b struct tracer { UNKNOWN }
s#tracer_flags struct tracer_flags { t#u32 val ; s#tracer_opt * opts ; s#tracer * trace ; }
s#tracer_opt struct tracer_opt { const char * name ; t#u32 bit ; }
s#transport_container struct transport_container { s#attribute_container ac ; const s#attribute_group * statistics ; }
s#ttm_backend_func struct ttm_backend_func { int ( * bind ) ( s#ttm_tt * , s#ttm_mem_reg * ) ; int ( * unbind ) ( s#ttm_tt * ) ; void ( * destroy ) ( s#ttm_tt * ) ; }
s#ttm_bo_device struct ttm_bo_device { s#list_head device_list ; s#ttm_bo_global * glob ; s#ttm_bo_driver * driver ; s#ttm_mem_type_manager man [ 8 ] ; s#drm_vma_offset_manager vma_manager ; s#list_head ddestroy ; s#address_space * dev_mapping ; s#delayed_work wq ; t#bool need_dma32 ; t#bool no_retry ; }
s#ttm_bo_driver struct ttm_bo_driver { s#ttm_tt * ( * ttm_tt_create ) ( s#ttm_buffer_object * , t#uint32_t ) ; int ( * ttm_tt_populate ) ( s#ttm_tt * , s#ttm_operation_ctx * ) ; void ( * ttm_tt_unpopulate ) ( s#ttm_tt * ) ; int ( * invalidate_caches ) ( s#ttm_bo_device * , t#uint32_t ) ; int ( * init_mem_type ) ( s#ttm_bo_device * , t#uint32_t , s#ttm_mem_type_manager * ) ; t#bool ( * eviction_valuable ) ( s#ttm_buffer_object * , const s#ttm_place * ) ; void ( * evict_flags ) ( s#ttm_buffer_object * , s#ttm_placement * ) ; int ( * move ) ( s#ttm_buffer_object * , t#bool , s#ttm_operation_ctx * , s#ttm_mem_reg * ) ; int ( * verify_access ) ( s#ttm_buffer_object * , s#file * ) ; void ( * move_notify ) ( s#ttm_buffer_object * , t#bool , s#ttm_mem_reg * ) ; int ( * fault_reserve_notify ) ( s#ttm_buffer_object * ) ; void ( * swap_notify ) ( s#ttm_buffer_object * ) ; int ( * io_mem_reserve ) ( s#ttm_bo_device * , s#ttm_mem_reg * ) ; void ( * io_mem_free ) ( s#ttm_bo_device * , s#ttm_mem_reg * ) ; unsigned long ( * io_mem_pfn ) ( s#ttm_buffer_object * , unsigned long ) ; int ( * access_memory ) ( s#ttm_buffer_object * , unsigned long , void * , int , int ) ; void ( * del_from_lru_notify ) ( s#ttm_buffer_object * ) ; void ( * release_notify ) ( s#ttm_buffer_object * ) ; }
s#ttm_bo_global extern struct ttm_bo_global { s#kobject kobj ; s#ttm_mem_global * mem_glob ; s#page * dummy_read_page ; t#spinlock_t lru_lock ; s#list_head device_list ; s#list_head swap_lru [ 4U ] ; t#atomic_t bo_count ; }
s#ttm_bo_kmap_obj struct ttm_bo_kmap_obj { void * virtual ; s#page * page ; enum { ttm_bo_map_iomap = 1 | 0x80 , ttm_bo_map_vmap = 2 , ttm_bo_map_kmap = 3 , ttm_bo_map_premapped = 4 | 0x80 , } bo_kmap_type ; s#ttm_buffer_object * bo ; }
s#ttm_buffer_object struct ttm_buffer_object { s#drm_gem_object base ; s#ttm_bo_device * bdev ; e#ttm_bo_type type ; void ( * destroy ) ( s#ttm_buffer_object * ) ; unsigned long num_pages ; t#size_t acc_size ; s#kref kref ; s#kref list_kref ; s#ttm_mem_reg mem ; s#file * persistent_swap_storage ; s#ttm_tt * ttm ; t#bool evicted ; t#atomic_t cpu_writers ; s#list_head lru ; s#list_head ddestroy ; s#list_head swap ; s#list_head io_reserve_lru ; s#dma_fence * moving ; unsigned priority ; t#uint64_t offset ; s#sg_table * sg ; s#mutex wu_mutex ; }
s#ttm_bus_placement struct ttm_bus_placement { void * addr ; t#phys_addr_t base ; unsigned long size ; unsigned long offset ; t#bool is_iomem ; t#bool io_reserved_vm ; t#uint64_t io_reserved_count ; }
s#ttm_lru_bulk_move struct ttm_lru_bulk_move { s#ttm_lru_bulk_move_pos tt [ 4U ] ; s#ttm_lru_bulk_move_pos vram [ 4U ] ; s#ttm_lru_bulk_move_pos swap [ 4U ] ; }
s#ttm_lru_bulk_move_pos struct ttm_lru_bulk_move_pos { s#ttm_buffer_object * first ; s#ttm_buffer_object * last ; }
s#ttm_mem_global extern struct ttm_mem_global { s#kobject kobj ; s#ttm_bo_global * bo_glob ; s#workqueue_struct * swap_queue ; s#work_struct work ; t#spinlock_t lock ; t#uint64_t lower_mem_limit ; s#ttm_mem_zone * zones [ 2 ] ; unsigned int num_zones ; s#ttm_mem_zone * zone_kernel ; s#ttm_mem_zone * zone_dma32 ; }
s#ttm_mem_reg struct ttm_mem_reg { void * mm_node ; unsigned long start ; unsigned long size ; unsigned long num_pages ; t#uint32_t page_alignment ; t#uint32_t mem_type ; t#uint32_t placement ; s#ttm_bus_placement bus ; }
s#ttm_mem_type_manager struct ttm_mem_type_manager { s#ttm_bo_device * bdev ; t#bool has_type ; t#bool use_type ; t#uint32_t flags ; t#uint64_t gpu_offset ; t#uint64_t size ; t#uint32_t available_caching ; t#uint32_t default_caching ; const s#ttm_mem_type_manager_func * func ; void * priv ; s#mutex io_reserve_mutex ; t#bool use_io_reserve_lru ; t#bool io_reserve_fastpath ; t#spinlock_t move_lock ; s#list_head io_reserve_lru ; s#list_head lru [ 4U ] ; s#dma_fence * move ; }
s#ttm_mem_type_manager_func struct ttm_mem_type_manager_func { int ( * init ) ( s#ttm_mem_type_manager * , unsigned long ) ; int ( * takedown ) ( s#ttm_mem_type_manager * ) ; int ( * get_node ) ( s#ttm_mem_type_manager * , s#ttm_buffer_object * , const s#ttm_place * , s#ttm_mem_reg * ) ; void ( * put_node ) ( s#ttm_mem_type_manager * , s#ttm_mem_reg * ) ; void ( * debug ) ( s#ttm_mem_type_manager * , s#drm_printer * ) ; }
s#ttm_mem_zone struct ttm_mem_zone { UNKNOWN }
s#ttm_operation_ctx struct ttm_operation_ctx { t#bool interruptible ; t#bool no_wait_gpu ; s#dma_resv * resv ; t#uint64_t bytes_moved ; t#uint32_t flags ; }
s#ttm_place struct ttm_place { unsigned fpfn ; unsigned lpfn ; t#uint32_t flags ; }
s#ttm_placement struct ttm_placement { unsigned num_placement ; const s#ttm_place * placement ; unsigned num_busy_placement ; const s#ttm_place * busy_placement ; }
s#ttm_tt struct ttm_tt { s#ttm_bo_device * bdev ; s#ttm_backend_func * func ; s#page * * pages ; t#uint32_t page_flags ; unsigned long num_pages ; s#sg_table * sg ; s#file * swap_storage ; e#ttm_caching_state caching_state ; enum { tt_bound , tt_unbound , tt_unpopulated , } state ; }
s#tty_audit_buf struct tty_audit_buf { UNKNOWN }
s#tty_buffer struct tty_buffer { union { s#tty_buffer * next ; s#llist_node free ; } ; int used ; int size ; int commit ; int read ; int flags ; unsigned long data [ 0 ] ; }
s#tty_bufhead struct tty_bufhead { s#tty_buffer * head ; s#work_struct work ; s#mutex lock ; t#atomic_t priority ; s#tty_buffer sentinel ; s#llist_head free ; t#atomic_t mem_used ; int mem_limit ; s#tty_buffer * tail ; }
s#tty_driver struct tty_driver { int magic ; s#kref kref ; s#cdev * * cdevs ; s#module * owner ; const char * driver_name ; const char * name ; int name_base ; int major ; int minor_start ; unsigned int num ; short type ; short subtype ; s#ktermios init_termios ; unsigned long flags ; s#proc_dir_entry * proc_entry ; s#tty_driver * other ; s#tty_struct * * ttys ; s#tty_port * * ports ; s#ktermios * * termios ; void * driver_state ; const s#tty_operations * ops ; s#list_head tty_drivers ; }
s#tty_ldisc struct tty_ldisc { s#tty_ldisc_ops * ops ; s#tty_struct * tty ; }
s#tty_ldisc_ops struct tty_ldisc_ops { int magic ; char * name ; int num ; int flags ; int ( * open ) ( s#tty_struct * ) ; void ( * close ) ( s#tty_struct * ) ; void ( * flush_buffer ) ( s#tty_struct * ) ; t#ssize_t ( * read ) ( s#tty_struct * , s#file * , unsigned char * , t#size_t ) ; t#ssize_t ( * write ) ( s#tty_struct * , s#file * , const unsigned char * , t#size_t ) ; int ( * ioctl ) ( s#tty_struct * , s#file * , unsigned int , unsigned long ) ; int ( * compat_ioctl ) ( s#tty_struct * , s#file * , unsigned int , unsigned long ) ; void ( * set_termios ) ( s#tty_struct * , s#ktermios * ) ; t#__poll_t ( * poll ) ( s#tty_struct * , s#file * , s#poll_table_struct * ) ; int ( * hangup ) ( s#tty_struct * ) ; void ( * receive_buf ) ( s#tty_struct * , const unsigned char * , char * , int ) ; void ( * write_wakeup ) ( s#tty_struct * ) ; void ( * dcd_change ) ( s#tty_struct * , unsigned int ) ; int ( * receive_buf2 ) ( s#tty_struct * , const unsigned char * , char * , int ) ; s#module * owner ; int refcount ; }
s#tty_operations struct tty_operations { s#tty_struct * ( * lookup ) ( s#tty_driver * , s#file * , int ) ; int ( * install ) ( s#tty_driver * , s#tty_struct * ) ; void ( * remove ) ( s#tty_driver * , s#tty_struct * ) ; int ( * open ) ( s#tty_struct * , s#file * ) ; void ( * close ) ( s#tty_struct * , s#file * ) ; void ( * shutdown ) ( s#tty_struct * ) ; void ( * cleanup ) ( s#tty_struct * ) ; int ( * write ) ( s#tty_struct * , const unsigned char * , int ) ; int ( * put_char ) ( s#tty_struct * , unsigned char ) ; void ( * flush_chars ) ( s#tty_struct * ) ; int ( * write_room ) ( s#tty_struct * ) ; int ( * chars_in_buffer ) ( s#tty_struct * ) ; int ( * ioctl ) ( s#tty_struct * , unsigned int , unsigned long ) ; long ( * compat_ioctl ) ( s#tty_struct * , unsigned int , unsigned long ) ; void ( * set_termios ) ( s#tty_struct * , s#ktermios * ) ; void ( * throttle ) ( s#tty_struct * ) ; void ( * unthrottle ) ( s#tty_struct * ) ; void ( * stop ) ( s#tty_struct * ) ; void ( * start ) ( s#tty_struct * ) ; void ( * hangup ) ( s#tty_struct * ) ; int ( * break_ctl ) ( s#tty_struct * , int ) ; void ( * flush_buffer ) ( s#tty_struct * ) ; void ( * set_ldisc ) ( s#tty_struct * ) ; void ( * wait_until_sent ) ( s#tty_struct * , int ) ; void ( * send_xchar ) ( s#tty_struct * , char ) ; int ( * tiocmget ) ( s#tty_struct * ) ; int ( * tiocmset ) ( s#tty_struct * , unsigned int , unsigned int ) ; int ( * resize ) ( s#tty_struct * , s#winsize * ) ; int ( * set_termiox ) ( s#tty_struct * , s#termiox * ) ; int ( * get_icount ) ( s#tty_struct * , s#serial_icounter_struct * ) ; int ( * get_serial ) ( s#tty_struct * , s#serial_struct * ) ; int ( * set_serial ) ( s#tty_struct * , s#serial_struct * ) ; void ( * show_fdinfo ) ( s#tty_struct * , s#seq_file * ) ; int ( * poll_init ) ( s#tty_driver * , int , char * ) ; int ( * poll_get_char ) ( s#tty_driver * , int ) ; void ( * poll_put_char ) ( s#tty_driver * , int , char ) ; int ( * proc_show ) ( s#seq_file * , void * ) ; }
s#tty_port struct tty_port { s#tty_bufhead buf ; s#tty_struct * tty ; s#tty_struct * itty ; const s#tty_port_operations * ops ; const s#tty_port_client_operations * client_ops ; t#spinlock_t lock ; int blocked_open ; int count ; t#wait_queue_head_t open_wait ; t#wait_queue_head_t delta_msr_wait ; unsigned long flags ; unsigned long iflags ; unsigned char console : 1 , low_latency : 1 ; s#mutex mutex ; s#mutex buf_mutex ; unsigned char * xmit_buf ; unsigned int close_delay ; unsigned int closing_wait ; int drain_delay ; s#kref kref ; void * client_data ; }
s#tty_port_client_operations struct tty_port_client_operations { int ( * receive_buf ) ( s#tty_port * , const unsigned char * , const unsigned char * , t#size_t ) ; void ( * write_wakeup ) ( s#tty_port * ) ; }
s#tty_port_operations struct tty_port_operations { int ( * carrier_raised ) ( s#tty_port * ) ; void ( * dtr_rts ) ( s#tty_port * , int ) ; void ( * shutdown ) ( s#tty_port * ) ; int ( * activate ) ( s#tty_port * , s#tty_struct * ) ; void ( * destruct ) ( s#tty_port * ) ; }
s#tty_struct@71ff2bce struct tty_struct { UNKNOWN }
s#tty_struct@950549ed struct tty_struct { int magic ; s#kref kref ; s#device * dev ; s#tty_driver * driver ; const s#tty_operations * ops ; int index ; s#ld_semaphore ldisc_sem ; s#tty_ldisc * ldisc ; s#mutex atomic_write_lock ; s#mutex legacy_mutex ; s#mutex throttle_mutex ; s#rw_semaphore termios_rwsem ; s#mutex winsize_mutex ; t#spinlock_t ctrl_lock ; t#spinlock_t flow_lock ; s#ktermios termios , termios_locked ; s#termiox * termiox ; char name [ 64 ] ; s#pid * pgrp ; s#pid * session ; unsigned long flags ; int count ; s#winsize winsize ; unsigned long stopped : 1 , flow_stopped : 1 , unused : 64 - 2 ; int hw_stopped ; unsigned long ctrl_status : 8 , packet : 1 , unused_ctrl : 64 - 9 ; unsigned int receive_room ; int flow_change ; s#tty_struct * link ; s#fasync_struct * fasync ; t#wait_queue_head_t write_wait ; t#wait_queue_head_t read_wait ; s#work_struct hangup_work ; void * disc_data ; void * driver_data ; t#spinlock_t files_lock ; s#list_head tty_files ; int closing ; unsigned char * write_buf ; int write_cnt ; s#work_struct SAK_work ; s#tty_port * port ; }
s#u64_stats_sync struct u64_stats_sync { }
s#ucounts@1f7dd376 struct ucounts { s#hlist_node node ; s#user_namespace * ns ; t#kuid_t uid ; int count ; t#atomic_t ucount [ E#UCOUNT_COUNTS ] ; }
s#ucounts@ce8044bf struct ucounts { UNKNOWN }
s#udp_hslot struct udp_hslot { s#hlist_head head ; int count ; t#spinlock_t lock ; }
s#udp_mib struct udp_mib { unsigned long mibs [ E#__UDP_MIB_MAX ] ; }
s#udp_table@65f9c4a3 struct udp_table { s#udp_hslot * hash ; s#udp_hslot * hash2 ; unsigned int mask ; unsigned int log ; }
s#udp_table@fd544100 struct udp_table { UNKNOWN }
s#udp_tunnel_info@c81bddce struct udp_tunnel_info { UNKNOWN }
s#udp_tunnel_info@f257dedc struct udp_tunnel_info { unsigned short type ; t#sa_family_t sa_family ; t#__be16 port ; }
s#uevent_sock struct uevent_sock { UNKNOWN }
s#uid_gid_extent struct uid_gid_extent { t#u32 first ; t#u32 lower_first ; t#u32 count ; }
s#uid_gid_map struct uid_gid_map { t#u32 nr_extents ; union { s#uid_gid_extent extent [ 5 ] ; struct { s#uid_gid_extent * forward ; s#uid_gid_extent * reverse ; } ; } ; }
s#uncached_list struct uncached_list { UNKNOWN }
s#upid struct upid { int nr ; s#pid_namespace * ns ; }
s#uprobe struct uprobe { UNKNOWN }
s#uprobe_task struct uprobe_task { e#uprobe_task_state state ; union { struct { s#arch_uprobe_task autask ; unsigned long vaddr ; } ; struct { s#callback_head dup_xol_work ; unsigned long dup_xol_addr ; } ; } ; s#uprobe * active_uprobe ; unsigned long xol_vaddr ; s#return_instance * return_instances ; unsigned int depth ; }
s#uprobes_state struct uprobes_state { s#xol_area * xol_area ; }
s#user_namespace@e4129c73 struct user_namespace { UNKNOWN }
s#user_namespace@efbfb978 struct user_namespace { s#uid_gid_map uid_map ; s#uid_gid_map gid_map ; s#uid_gid_map projid_map ; t#atomic_t count ; s#user_namespace * parent ; int level ; t#kuid_t owner ; t#kgid_t group ; s#ns_common ns ; unsigned long flags ; s#list_head keyring_name_list ; s#key * user_keyring_register ; s#rw_semaphore keyring_sem ; s#key * persistent_keyring_register ; s#work_struct work ; s#ctl_table_set set ; s#ctl_table_header * sysctls ; s#ucounts * ucounts ; int ucount_max [ E#UCOUNT_COUNTS ] ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#user_struct@95a11e87 struct user_struct { t#refcount_t __count ; t#atomic_t processes ; t#atomic_t sigpending ; t#atomic_t fanotify_listeners ; t#atomic_long_t epoll_watches ; unsigned long mq_bytes ; unsigned long locked_shm ; unsigned long unix_inflight ; t#atomic_long_t pipe_bufs ; s#hlist_node uidhash_node ; t#kuid_t uid ; t#atomic_long_t locked_vm ; s#ratelimit_state ratelimit ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#user_struct@9707419f struct user_struct { UNKNOWN }
s#userfaultfd_ctx struct userfaultfd_ctx { UNKNOWN }
s#util_est struct util_est { unsigned int enqueued ; unsigned int ewma ; }
s#uts_namespace@3472311d struct uts_namespace { s#kref kref ; s#new_utsname name ; s#user_namespace * user_ns ; s#ucounts * ucounts ; s#ns_common ns ; }
s#uts_namespace@d3e2a34d struct uts_namespace { UNKNOWN }
s#uv_cpu_info_s struct uv_cpu_info_s { void * p_uv_hub_info ; unsigned char blade_cpu_id ; s#uv_scir_s scir ; }
s#uv_gam_range_s struct uv_gam_range_s { t#u32 limit ; t#u16 nasid ; t#s8 base ; t#u8 reserved ; }
s#uv_hub_info_s struct uv_hub_info_s { unsigned long global_mmr_base ; unsigned long global_mmr_shift ; unsigned long gpa_mask ; unsigned short * socket_to_node ; unsigned short * socket_to_pnode ; unsigned short * pnode_to_socket ; s#uv_gam_range_s * gr_table ; unsigned short min_socket ; unsigned short min_pnode ; unsigned char m_val ; unsigned char n_val ; unsigned char gr_table_len ; unsigned char hub_revision ; unsigned char apic_pnode_shift ; unsigned char gpa_shift ; unsigned char m_shift ; unsigned char n_lshift ; unsigned int gnode_extra ; unsigned long gnode_upper ; unsigned long lowmem_remap_top ; unsigned long lowmem_remap_base ; unsigned long global_gru_base ; unsigned long global_gru_shift ; unsigned short pnode ; unsigned short pnode_mask ; unsigned short coherency_domain_number ; unsigned short numa_blade_id ; unsigned short nr_possible_cpus ; unsigned short nr_online_cpus ; short memory_nid ; unsigned int hub_type ; unsigned char nasid_shift ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#uv_scir_s struct uv_scir_s { s#timer_list timer ; unsigned long offset ; unsigned long last ; unsigned long idle_on ; unsigned long idle_off ; unsigned char state ; unsigned char enabled ; }
s#va_format struct va_format { const char * fmt ; t#va_list * va ; }
s#vdso_image@7db1df11 struct vdso_image { void * data ; unsigned long size ; unsigned long alt , alt_len ; long sym_vvar_start ; long sym_vvar_page ; long sym_pvclock_page ; long sym_hvclock_page ; long sym_VDSO32_NOTE_MASK ; long sym___kernel_sigreturn ; long sym___kernel_rt_sigreturn ; long sym___kernel_vsyscall ; long sym_int80_landing_pad ; }
s#vdso_image@a6dd4e37 struct vdso_image { UNKNOWN }
s#vfsmount@300e1803 struct vfsmount { UNKNOWN }
s#vfsmount@e8166fae struct vfsmount { s#dentry * mnt_root ; s#super_block * mnt_sb ; int mnt_flags ; }
s#vlan_group struct vlan_group { unsigned int nr_vlan_devs ; s#hlist_node hlist ; s#net_device * * vlan_devices_arrays [ E#VLAN_PROTO_NUM ] [ 8 ] ; }
s#vlan_info@226d9bcf struct vlan_info { s#net_device * real_dev ; s#vlan_group grp ; s#list_head vid_list ; unsigned int nr_vids ; s#callback_head rcu ; }
s#vlan_info@f17b3f88 struct vlan_info { UNKNOWN }
s#vm_area_struct struct vm_area_struct { unsigned long vm_start ; unsigned long vm_end ; s#vm_area_struct * vm_next , * vm_prev ; s#rb_node vm_rb ; unsigned long rb_subtree_gap ; s#mm_struct * vm_mm ; t#pgprot_t vm_page_prot ; unsigned long vm_flags ; struct { s#rb_node rb ; unsigned long rb_subtree_last ; } shared ; s#list_head anon_vma_chain ; s#anon_vma * anon_vma ; const s#vm_operations_struct * vm_ops ; unsigned long vm_pgoff ; s#file * vm_file ; void * vm_private_data ; t#atomic_long_t swap_readahead_info ; s#mempolicy * vm_policy ; s#vm_userfaultfd_ctx vm_userfaultfd_ctx ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#vm_fault struct vm_fault { s#vm_area_struct * vma ; unsigned int flags ; t#gfp_t gfp_mask ; unsigned long pgoff ; unsigned long address ; t#pmd_t * pmd ; t#pud_t * pud ; t#pte_t orig_pte ; s#page * cow_page ; s#mem_cgroup * memcg ; s#page * page ; t#pte_t * pte ; t#spinlock_t * ptl ; t#pgtable_t prealloc_pte ; }
s#vm_operations_struct@3620399f struct vm_operations_struct { UNKNOWN }
s#vm_operations_struct@736be16f struct vm_operations_struct { void ( * open ) ( s#vm_area_struct * ) ; void ( * close ) ( s#vm_area_struct * ) ; int ( * split ) ( s#vm_area_struct * , unsigned long ) ; int ( * mremap ) ( s#vm_area_struct * ) ; t#vm_fault_t ( * fault ) ( s#vm_fault * ) ; t#vm_fault_t ( * huge_fault ) ( s#vm_fault * , e#page_entry_size ) ; void ( * map_pages ) ( s#vm_fault * , unsigned long , unsigned long ) ; unsigned long ( * pagesize ) ( s#vm_area_struct * ) ; t#vm_fault_t ( * page_mkwrite ) ( s#vm_fault * ) ; t#vm_fault_t ( * pfn_mkwrite ) ( s#vm_fault * ) ; int ( * access ) ( s#vm_area_struct * , unsigned long , void * , int , int ) ; const char * ( * name ) ( s#vm_area_struct * ) ; int ( * set_policy ) ( s#vm_area_struct * , s#mempolicy * ) ; s#mempolicy * ( * get_policy ) ( s#vm_area_struct * , unsigned long ) ; s#page * ( * find_special_page ) ( s#vm_area_struct * , unsigned long ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#vm_struct struct vm_struct { s#vm_struct * next ; void * addr ; unsigned long size ; unsigned long flags ; s#page * * pages ; unsigned int nr_pages ; t#phys_addr_t phys_addr ; const void * caller ; }
s#vm_userfaultfd_ctx struct vm_userfaultfd_ctx { s#userfaultfd_ctx * ctx ; }
s#vmacache struct vmacache { t#u64 seqnum ; s#vm_area_struct * vmas [ ( 1U << 2 ) ] ; }
s#vmem_altmap struct vmem_altmap { const unsigned long base_pfn ; const unsigned long end_pfn ; const unsigned long reserve ; unsigned long free ; unsigned long align ; unsigned long alloc ; }
s#vmpressure struct vmpressure { unsigned long scanned ; unsigned long reclaimed ; unsigned long tree_scanned ; unsigned long tree_reclaimed ; t#spinlock_t sr_lock ; s#list_head events ; s#mutex events_lock ; s#work_struct work ; }
s#vtime struct vtime { t#seqcount_t seqcount ; unsigned long long starttime ; e#vtime_state state ; t#u64 utime ; t#u64 stime ; t#u64 gtime ; }
s#wait_queue_entry struct wait_queue_entry { unsigned int flags ; void * private ; t#wait_queue_func_t func ; s#list_head entry ; }
s#wait_queue_head struct wait_queue_head { t#spinlock_t lock ; s#list_head head ; }
s#wake_irq@491e180a struct wake_irq { UNKNOWN }
s#wake_irq@c4d4f412 struct wake_irq { s#device * dev ; unsigned int status ; int irq ; const char * name ; }
s#wake_q_node struct wake_q_node { s#wake_q_node * next ; }
s#wakeup_source struct wakeup_source { const char * name ; int id ; s#list_head entry ; t#spinlock_t lock ; s#wake_irq * wakeirq ; s#timer_list timer ; unsigned long timer_expires ; t#ktime_t total_time ; t#ktime_t max_time ; t#ktime_t last_time ; t#ktime_t start_prevent_time ; t#ktime_t prevent_sleep_time ; unsigned long event_count ; unsigned long active_count ; unsigned long relax_count ; unsigned long expire_count ; unsigned long wakeup_count ; s#device * dev ; t#bool active : 1 ; t#bool autosleep_enabled : 1 ; }
s#wb_completion struct wb_completion { t#atomic_t cnt ; t#wait_queue_head_t * waitq ; }
s#wb_domain struct wb_domain { t#spinlock_t lock ; s#fprop_global completions ; s#timer_list period_timer ; unsigned long period_time ; unsigned long dirty_limit_tstamp ; unsigned long dirty_limit ; }
s#winsize struct winsize { unsigned short ws_row ; unsigned short ws_col ; unsigned short ws_xpixel ; unsigned short ws_ypixel ; }
s#wiphy struct wiphy { t#u8 perm_addr [ 6 ] ; t#u8 addr_mask [ 6 ] ; s#mac_address * addresses ; const s#ieee80211_txrx_stypes * mgmt_stypes ; const s#ieee80211_iface_combination * iface_combinations ; int n_iface_combinations ; t#u16 software_iftypes ; t#u16 n_addresses ; t#u16 interface_modes ; t#u16 max_acl_mac_addrs ; t#u32 flags , regulatory_flags , features ; t#u8 ext_features [ ( ( ( E#NUM_NL80211_EXT_FEATURES ) + ( 8 ) - 1 ) / ( 8 ) ) ] ; t#u32 ap_sme_capa ; e#cfg80211_signal_type signal_type ; int bss_priv_size ; t#u8 max_scan_ssids ; t#u8 max_sched_scan_reqs ; t#u8 max_sched_scan_ssids ; t#u8 max_match_sets ; t#u16 max_scan_ie_len ; t#u16 max_sched_scan_ie_len ; t#u32 max_sched_scan_plans ; t#u32 max_sched_scan_plan_interval ; t#u32 max_sched_scan_plan_iterations ; int n_cipher_suites ; const t#u32 * cipher_suites ; int n_akm_suites ; const t#u32 * akm_suites ; t#u8 retry_short ; t#u8 retry_long ; t#u32 frag_threshold ; t#u32 rts_threshold ; t#u8 coverage_class ; char fw_version [ 32 ] ; t#u32 hw_version ; const s#wiphy_wowlan_support * wowlan ; s#cfg80211_wowlan * wowlan_config ; t#u16 max_remain_on_channel_duration ; t#u8 max_num_pmkids ; t#u32 available_antennas_tx ; t#u32 available_antennas_rx ; t#u32 probe_resp_offload ; const t#u8 * extended_capabilities , * extended_capabilities_mask ; t#u8 extended_capabilities_len ; const s#wiphy_iftype_ext_capab * iftype_ext_capab ; unsigned int num_iftype_ext_capab ; const void * privid ; s#ieee80211_supported_band * bands [ E#NUM_NL80211_BANDS ] ; void ( * reg_notifier ) ( s#wiphy * , s#regulatory_request * ) ; const s#ieee80211_regdomain * regd ; s#device dev ; t#bool registered ; s#dentry * debugfsdir ; const s#ieee80211_ht_cap * ht_capa_mod_mask ; const s#ieee80211_vht_cap * vht_capa_mod_mask ; s#list_head wdev_list ; t#possible_net_t _net ; const s#iw_handler_def * wext ; const s#wiphy_coalesce_support * coalesce ; const s#wiphy_vendor_command * vendor_commands ; const s#nl80211_vendor_cmd_info * vendor_events ; int n_vendor_commands , n_vendor_events ; t#u16 max_ap_assoc_sta ; t#u8 max_num_csa_counters ; t#u8 max_adj_channel_rssi_comp ; t#u32 bss_select_support ; t#u8 nan_supported_bands ; t#u32 txq_limit ; t#u32 txq_memory_limit ; t#u32 txq_quantum ; t#u8 support_mbssid : 1 , support_only_he_mbssid : 1 ; const s#cfg80211_pmsr_capabilities * pmsr_capa ; char priv [ 0 ] __attribute__ ( ( __aligned__ ( 32 ) ) ) ; }
s#wiphy_coalesce_support struct wiphy_coalesce_support { int n_rules ; int max_delay ; int n_patterns ; int pattern_max_len ; int pattern_min_len ; int max_pkt_offset ; }
s#wiphy_iftype_ext_capab struct wiphy_iftype_ext_capab { e#nl80211_iftype iftype ; const t#u8 * extended_capabilities ; const t#u8 * extended_capabilities_mask ; t#u8 extended_capabilities_len ; }
s#wiphy_vendor_command struct wiphy_vendor_command { s#nl80211_vendor_cmd_info info ; t#u32 flags ; int ( * doit ) ( s#wiphy * , s#wireless_dev * , const void * , int ) ; int ( * dumpit ) ( s#wiphy * , s#wireless_dev * , s#sk_buff * , const void * , int , unsigned long * ) ; const s#nla_policy * policy ; unsigned int maxattr ; }
s#wiphy_wowlan_support struct wiphy_wowlan_support { t#u32 flags ; int n_patterns ; int pattern_max_len ; int pattern_min_len ; int max_pkt_offset ; int max_nd_match_sets ; const s#wiphy_wowlan_tcp_support * tcp ; }
s#wiphy_wowlan_tcp_support struct wiphy_wowlan_tcp_support { const s#nl80211_wowlan_tcp_data_token_feature * tok ; t#u32 data_payload_max ; t#u32 data_interval_max ; t#u32 wake_payload_max ; t#bool seq ; }
s#wireless_dev@7bc3c537 struct wireless_dev { UNKNOWN }
s#wireless_dev@ac4289f4 struct wireless_dev { s#wiphy * wiphy ; e#nl80211_iftype iftype ; s#list_head list ; s#net_device * netdev ; t#u32 identifier ; s#list_head mgmt_registrations ; t#spinlock_t mgmt_registrations_lock ; s#mutex mtx ; t#bool use_4addr , is_running ; t#u8 address [ 6 ] __attribute__ ( ( __aligned__ ( sizeof ( u16 ) ) ) ) ; t#u8 ssid [ 32 ] ; t#u8 ssid_len , mesh_id_len , mesh_id_up_len ; s#cfg80211_conn * conn ; s#cfg80211_cached_keys * connect_keys ; e#ieee80211_bss_type conn_bss_type ; t#u32 conn_owner_nlportid ; s#work_struct disconnect_wk ; t#u8 disconnect_bssid [ 6 ] ; s#list_head event_list ; t#spinlock_t event_lock ; s#cfg80211_internal_bss * current_bss ; s#cfg80211_chan_def preset_chandef ; s#cfg80211_chan_def chandef ; t#bool ibss_fixed ; t#bool ibss_dfs_possible ; t#bool ps ; int ps_timeout ; int beacon_interval ; t#u32 ap_unexpected_nlportid ; t#u32 owner_nlportid ; t#bool nl_owner_dead ; t#bool cac_started ; unsigned long cac_start_time ; unsigned int cac_time_ms ; struct { s#cfg80211_ibss_params ibss ; s#cfg80211_connect_params connect ; s#cfg80211_cached_keys * keys ; const t#u8 * ie ; t#size_t ie_len ; t#u8 bssid [ 6 ] ; t#u8 prev_bssid [ 6 ] ; t#u8 ssid [ 32 ] ; t#s8 default_key , default_mgmt_key ; t#bool prev_bssid_valid ; } wext ; s#cfg80211_cqm_config * cqm_config ; s#list_head pmsr_list ; t#spinlock_t pmsr_lock ; s#work_struct pmsr_free_wk ; }
s#work_struct struct work_struct { t#atomic_long_t data ; s#list_head entry ; t#work_func_t func ; s#lockdep_map lockdep_map ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#workqueue_struct struct workqueue_struct { UNKNOWN }
s#wpan_dev@cc263e5d struct wpan_dev { s#wpan_phy * wpan_phy ; int iftype ; s#list_head list ; s#net_device * netdev ; const s#wpan_dev_header_ops * header_ops ; s#net_device * lowpan_dev ; t#u32 identifier ; t#__le16 pan_id ; t#__le16 short_addr ; t#__le64 extended_addr ; t#atomic_t bsn ; t#atomic_t dsn ; t#u8 min_be ; t#u8 max_be ; t#u8 csma_retries ; t#s8 frame_retries ; t#bool lbt ; t#bool promiscuous_mode ; t#bool ackreq ; }
s#wpan_dev@dcad4f7d struct wpan_dev { UNKNOWN }
s#wpan_dev_header_ops struct wpan_dev_header_ops { int ( * create ) ( s#sk_buff * , s#net_device * , const s#ieee802154_addr * , const s#ieee802154_addr * , unsigned int ) ; }
s#wpan_phy struct wpan_phy { const void * privid ; t#u32 flags ; t#u8 current_channel ; t#u8 current_page ; s#wpan_phy_supported supported ; t#s32 transmit_power ; s#wpan_phy_cca cca ; t#__le64 perm_extended_addr ; t#s32 cca_ed_level ; t#u8 symbol_duration ; t#u16 lifs_period ; t#u16 sifs_period ; s#device dev ; t#possible_net_t _net ; char priv [ 0 ] __attribute__ ( ( __aligned__ ( 32 ) ) ) ; }
s#wpan_phy_cca struct wpan_phy_cca { e#nl802154_cca_modes mode ; e#nl802154_cca_opts opt ; }
s#wpan_phy_supported struct wpan_phy_supported { t#u32 channels [ 31 + 1 ] , cca_modes , cca_opts , iftypes ; e#nl802154_supported_bool_states lbt ; t#u8 min_minbe , max_minbe , min_maxbe , max_maxbe , min_csma_backoffs , max_csma_backoffs ; t#s8 min_frame_retries , max_frame_retries ; t#size_t tx_powers_size , cca_ed_levels_size ; const t#s32 * tx_powers , * cca_ed_levels ; }
s#writeback_control@164d496b struct writeback_control { long nr_to_write ; long pages_skipped ; t#loff_t range_start ; t#loff_t range_end ; e#writeback_sync_modes sync_mode ; unsigned for_kupdate : 1 ; unsigned for_background : 1 ; unsigned tagged_writepages : 1 ; unsigned for_reclaim : 1 ; unsigned range_cyclic : 1 ; unsigned for_sync : 1 ; unsigned no_cgroup_owner : 1 ; unsigned punt_to_cgroup : 1 ; s#bdi_writeback * wb ; s#inode * inode ; int wb_id ; int wb_lcand_id ; int wb_tcand_id ; t#size_t wb_bytes ; t#size_t wb_lcand_bytes ; t#size_t wb_tcand_bytes ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; }
s#writeback_control@480d8bf2 struct writeback_control { UNKNOWN }
s#ww_acquire_ctx@5198829a struct ww_acquire_ctx { UNKNOWN }
s#ww_acquire_ctx@65179dfb struct ww_acquire_ctx { s#task_struct * task ; unsigned long stamp ; unsigned int acquired ; unsigned short wounded ; unsigned short is_wait_die ; unsigned int done_acquire ; s#ww_class * ww_class ; s#ww_mutex * contending_lock ; s#lockdep_map dep_map ; unsigned int deadlock_inject_interval ; unsigned int deadlock_inject_countdown ; }
s#ww_class struct ww_class { t#atomic_long_t stamp ; s#lock_class_key acquire_key ; s#lock_class_key mutex_key ; const char * acquire_name ; const char * mutex_name ; unsigned int is_wait_die ; }
s#ww_mutex struct ww_mutex { s#mutex base ; s#ww_acquire_ctx * ctx ; s#ww_class * ww_class ; }
s#xarray struct xarray { t#spinlock_t xa_lock ; t#gfp_t xa_flags ; void * xa_head ; }
s#xattr struct xattr { const char * name ; void * value ; t#size_t value_len ; }
s#xattr_handler@16eddf4d struct xattr_handler { UNKNOWN }
s#xattr_handler@7bf97ef7 struct xattr_handler { const char * name ; const char * prefix ; int flags ; t#bool ( * list ) ( s#dentry * ) ; int ( * get ) ( const s#xattr_handler * , s#dentry * , s#inode * , const char * , void * , t#size_t ) ; int ( * set ) ( const s#xattr_handler * , s#dentry * , s#inode * , const char * , const void * , t#size_t , int ) ; }
s#xdp_frame struct xdp_frame { void * data ; t#u16 len ; t#u16 headroom ; t#u16 metasize ; s#xdp_mem_info mem ; s#net_device * dev_rx ; }
s#xdp_mem_info struct xdp_mem_info { t#u32 type ; t#u32 id ; }
s#xdp_ring struct xdp_ring { t#u32 producer __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; t#u32 consumer __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; t#u32 flags ; }
s#xdp_rxq_info struct xdp_rxq_info { s#net_device * dev ; t#u32 queue_index ; t#u32 reg_state ; s#xdp_mem_info mem ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; }
s#xdp_umem@9bb07a90 struct xdp_umem { UNKNOWN }
s#xdp_umem@baa32ed1 struct xdp_umem { s#xsk_queue * fq ; s#xsk_queue * cq ; s#xdp_umem_page * pages ; t#u64 chunk_mask ; t#u64 size ; t#u32 headroom ; t#u32 chunk_size_nohr ; s#user_struct * user ; unsigned long address ; t#refcount_t users ; s#work_struct work ; s#page * * pgs ; t#u32 npgs ; t#u16 queue_id ; t#u8 need_wakeup ; t#u8 flags ; int id ; s#net_device * dev ; s#xdp_umem_fq_reuse * fq_reuse ; t#bool zc ; t#spinlock_t xsk_list_lock ; s#list_head xsk_list ; }
s#xdp_umem_fq_reuse struct xdp_umem_fq_reuse { t#u32 nentries ; t#u32 length ; t#u64 handles [ ] ; }
s#xdp_umem_page struct xdp_umem_page { void * addr ; t#dma_addr_t dma ; }
s#xdr_buf struct xdr_buf { s#kvec head [ 1 ] , tail [ 1 ] ; s#bio_vec * bvec ; s#page * * pages ; unsigned int page_base , page_len , flags ; unsigned int buflen , len ; }
s#xdr_netobj struct xdr_netobj { unsigned int len ; t#u8 * data ; }
s#xdr_stream struct xdr_stream { t#__be32 * p ; s#xdr_buf * buf ; t#__be32 * end ; s#kvec * iov ; s#kvec scratch ; s#page * * page_ptr ; unsigned int nwords ; s#rpc_rqst * rqst ; }
s#xfrm_address_filter struct xfrm_address_filter { t#xfrm_address_t saddr ; t#xfrm_address_t daddr ; t#__u16 family ; t#__u8 splen ; t#__u8 dplen ; }
s#xfrm_algo struct xfrm_algo { char alg_name [ 64 ] ; unsigned int alg_key_len ; char alg_key [ 0 ] ; }
s#xfrm_algo_aead struct xfrm_algo_aead { char alg_name [ 64 ] ; unsigned int alg_key_len ; unsigned int alg_icv_len ; char alg_key [ 0 ] ; }
s#xfrm_algo_auth struct xfrm_algo_auth { char alg_name [ 64 ] ; unsigned int alg_key_len ; unsigned int alg_trunc_len ; char alg_key [ 0 ] ; }
s#xfrm_encap_tmpl struct xfrm_encap_tmpl { t#__u16 encap_type ; t#__be16 encap_sport ; t#__be16 encap_dport ; t#xfrm_address_t encap_oa ; }
s#xfrm_id struct xfrm_id { t#xfrm_address_t daddr ; t#__be32 spi ; t#__u8 proto ; }
s#xfrm_lifetime_cfg struct xfrm_lifetime_cfg { t#__u64 soft_byte_limit ; t#__u64 hard_byte_limit ; t#__u64 soft_packet_limit ; t#__u64 hard_packet_limit ; t#__u64 soft_add_expires_seconds ; t#__u64 hard_add_expires_seconds ; t#__u64 soft_use_expires_seconds ; t#__u64 hard_use_expires_seconds ; }
s#xfrm_lifetime_cur struct xfrm_lifetime_cur { t#__u64 bytes ; t#__u64 packets ; t#__u64 add_time ; t#__u64 use_time ; }
s#xfrm_mark struct xfrm_mark { t#__u32 v ; t#__u32 m ; }
s#xfrm_mode struct xfrm_mode { t#u8 encap ; t#u8 family ; t#u8 flags ; }
s#xfrm_policy@5e47c369 struct xfrm_policy { t#possible_net_t xp_net ; s#hlist_node bydst ; s#hlist_node byidx ; t#rwlock_t lock ; t#refcount_t refcnt ; t#u32 pos ; s#timer_list timer ; t#atomic_t genid ; t#u32 priority ; t#u32 index ; t#u32 if_id ; s#xfrm_mark mark ; s#xfrm_selector selector ; s#xfrm_lifetime_cfg lft ; s#xfrm_lifetime_cur curlft ; s#xfrm_policy_walk_entry walk ; s#xfrm_policy_queue polq ; t#bool bydst_reinsert ; t#u8 type ; t#u8 action ; t#u8 flags ; t#u8 xfrm_nr ; t#u16 family ; s#xfrm_sec_ctx * security ; s#xfrm_tmpl xfrm_vec [ 6 ] ; s#hlist_node bydst_inexact_list ; s#callback_head rcu ; }
s#xfrm_policy@a692f712 struct xfrm_policy { UNKNOWN }
s#xfrm_policy_hash struct xfrm_policy_hash { s#hlist_head * table ; unsigned int hmask ; t#u8 dbits4 ; t#u8 sbits4 ; t#u8 dbits6 ; t#u8 sbits6 ; }
s#xfrm_policy_hthresh struct xfrm_policy_hthresh { s#work_struct work ; t#seqlock_t lock ; t#u8 lbits4 ; t#u8 rbits4 ; t#u8 lbits6 ; t#u8 rbits6 ; }
s#xfrm_policy_queue struct xfrm_policy_queue { s#sk_buff_head hold_queue ; s#timer_list hold_timer ; unsigned long timeout ; }
s#xfrm_policy_walk_entry struct xfrm_policy_walk_entry { s#list_head all ; t#u8 dead ; }
s#xfrm_replay struct xfrm_replay { void ( * advance ) ( s#xfrm_state * , t#__be32 ) ; int ( * check ) ( s#xfrm_state * , s#sk_buff * , t#__be32 ) ; int ( * recheck ) ( s#xfrm_state * , s#sk_buff * , t#__be32 ) ; void ( * notify ) ( s#xfrm_state * , int ) ; int ( * overflow ) ( s#xfrm_state * , s#sk_buff * ) ; }
s#xfrm_replay_state struct xfrm_replay_state { t#__u32 oseq ; t#__u32 seq ; t#__u32 bitmap ; }
s#xfrm_replay_state_esn struct xfrm_replay_state_esn { unsigned int bmp_len ; t#__u32 oseq ; t#__u32 seq ; t#__u32 oseq_hi ; t#__u32 seq_hi ; t#__u32 replay_window ; t#__u32 bmp [ 0 ] ; }
s#xfrm_sec_ctx@09045510 struct xfrm_sec_ctx { t#__u8 ctx_doi ; t#__u8 ctx_alg ; t#__u16 ctx_len ; t#__u32 ctx_sid ; char ctx_str [ 0 ] ; }
s#xfrm_sec_ctx@a097fdcc struct xfrm_sec_ctx { UNKNOWN }
s#xfrm_selector struct xfrm_selector { t#xfrm_address_t daddr ; t#xfrm_address_t saddr ; t#__be16 dport ; t#__be16 dport_mask ; t#__be16 sport ; t#__be16 sport_mask ; t#__u16 family ; t#__u8 prefixlen_d ; t#__u8 prefixlen_s ; t#__u8 proto ; int ifindex ; t#__kernel_uid32_t user ; }
s#xfrm_state@92682e23 struct xfrm_state { UNKNOWN }
s#xfrm_state@9ae89e4f struct xfrm_state { t#possible_net_t xs_net ; union { s#hlist_node gclist ; s#hlist_node bydst ; } ; s#hlist_node bysrc ; s#hlist_node byspi ; t#refcount_t refcnt ; t#spinlock_t lock ; s#xfrm_id id ; s#xfrm_selector sel ; s#xfrm_mark mark ; t#u32 if_id ; t#u32 tfcpad ; t#u32 genid ; s#xfrm_state_walk km ; struct { t#u32 reqid ; t#u8 mode ; t#u8 replay_window ; t#u8 aalgo , ealgo , calgo ; t#u8 flags ; t#u16 family ; t#xfrm_address_t saddr ; int header_len ; int trailer_len ; t#u32 extra_flags ; s#xfrm_mark smark ; } props ; s#xfrm_lifetime_cfg lft ; s#xfrm_algo_auth * aalg ; s#xfrm_algo * ealg ; s#xfrm_algo * calg ; s#xfrm_algo_aead * aead ; const char * geniv ; s#xfrm_encap_tmpl * encap ; t#xfrm_address_t * coaddr ; s#xfrm_state * tunnel ; t#atomic_t tunnel_users ; s#xfrm_replay_state replay ; s#xfrm_replay_state_esn * replay_esn ; s#xfrm_replay_state preplay ; s#xfrm_replay_state_esn * preplay_esn ; const s#xfrm_replay * repl ; t#u32 xflags ; t#u32 replay_maxage ; t#u32 replay_maxdiff ; s#timer_list rtimer ; s#xfrm_stats stats ; s#xfrm_lifetime_cur curlft ; s#hrtimer mtimer ; s#xfrm_state_offload xso ; long saved_tmo ; t#time64_t lastused ; s#page_frag xfrag ; const s#xfrm_type * type ; s#xfrm_mode inner_mode ; s#xfrm_mode inner_mode_iaf ; s#xfrm_mode outer_mode ; const s#xfrm_type_offload * type_offload ; s#xfrm_sec_ctx * security ; void * data ; }
s#xfrm_state_offload struct xfrm_state_offload { s#net_device * dev ; unsigned long offload_handle ; unsigned int num_exthdrs ; t#u8 flags ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#xfrm_state_walk struct xfrm_state_walk { s#list_head all ; t#u8 state ; t#u8 dying ; t#u8 proto ; t#u32 seq ; s#xfrm_address_filter * filter ; unsigned long uek_reserved1 ; }
s#xfrm_stats struct xfrm_stats { t#__u32 replay_window ; t#__u32 replay ; t#__u32 integrity_failed ; }
s#xfrm_tmpl struct xfrm_tmpl { s#xfrm_id id ; t#xfrm_address_t saddr ; unsigned short encap_family ; t#u32 reqid ; t#u8 mode ; t#u8 share ; t#u8 optional ; t#u8 allalgs ; t#u32 aalgos ; t#u32 ealgos ; t#u32 calgos ; }
s#xfrm_type struct xfrm_type { char * description ; s#module * owner ; t#u8 proto ; t#u8 flags ; int ( * init_state ) ( s#xfrm_state * ) ; void ( * destructor ) ( s#xfrm_state * ) ; int ( * input ) ( s#xfrm_state * , s#sk_buff * ) ; int ( * output ) ( s#xfrm_state * , s#sk_buff * ) ; int ( * reject ) ( s#xfrm_state * , s#sk_buff * , const s#flowi * ) ; int ( * hdr_offset ) ( s#xfrm_state * , s#sk_buff * , t#u8 * * ) ; }
s#xfrm_type_offload struct xfrm_type_offload { char * description ; s#module * owner ; t#u8 proto ; void ( * encap ) ( s#xfrm_state * , s#sk_buff * ) ; int ( * input_tail ) ( s#xfrm_state * , s#sk_buff * ) ; int ( * xmit ) ( s#xfrm_state * , s#sk_buff * , t#netdev_features_t ) ; }
s#xfrmdev_ops struct xfrmdev_ops { int ( * xdo_dev_state_add ) ( s#xfrm_state * ) ; void ( * xdo_dev_state_delete ) ( s#xfrm_state * ) ; void ( * xdo_dev_state_free ) ( s#xfrm_state * ) ; t#bool ( * xdo_dev_offload_ok ) ( s#sk_buff * , s#xfrm_state * ) ; void ( * xdo_dev_state_advance_esn ) ( s#xfrm_state * ) ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; unsigned long uek_reserved5 ; unsigned long uek_reserved6 ; unsigned long uek_reserved7 ; }
s#xol_area struct xol_area { UNKNOWN }
s#xps_dev_maps struct xps_dev_maps { s#callback_head rcu ; s#xps_map * attr_map [ 0 ] ; }
s#xps_map struct xps_map { unsigned int len ; unsigned int alloc_len ; s#callback_head rcu ; t#u16 queues [ 0 ] ; }
s#xregs_state struct xregs_state { s#fxregs_state i387 ; s#xstate_header header ; t#u8 extended_state_area [ 0 ] ; }
s#xsk_queue@210033fd struct xsk_queue { UNKNOWN }
s#xsk_queue@c28db320 struct xsk_queue { t#u64 chunk_mask ; t#u64 size ; t#u32 ring_mask ; t#u32 nentries ; t#u32 prod_head ; t#u32 prod_tail ; t#u32 cons_head ; t#u32 cons_tail ; s#xdp_ring * ring ; t#u64 invalid_descs ; }
s#xstate_header struct xstate_header { t#u64 xfeatures ; t#u64 xcomp_bv ; t#u64 reserved [ 6 ] ; }
s#xt_table@346cc783 struct xt_table { s#list_head list ; unsigned int valid_hooks ; s#xt_table_info * private ; s#module * me ; t#u_int8_t af ; int priority ; int ( * table_init ) ( s#net * ) ; const char name [ 32 ] ; }
s#xt_table@e8d708cb struct xt_table { UNKNOWN }
s#xt_table_info struct xt_table_info { unsigned int size ; unsigned int number ; unsigned int initial_entries ; unsigned int hook_entry [ E#NF_INET_NUMHOOKS ] ; unsigned int underflow [ E#NF_INET_NUMHOOKS ] ; unsigned int stacksize ; void * * * jumpstack ; unsigned char entries [ 0 ] __attribute__ ( ( __aligned__ ( 8 ) ) ) ; }
s#zone struct zone { unsigned long _watermark [ E#NR_WMARK ] ; unsigned long watermark_boost ; unsigned long nr_reserved_highatomic ; long lowmem_reserve [ 5 ] ; int node ; s#pglist_data * zone_pgdat ; s#per_cpu_pageset * pageset ; unsigned long zone_start_pfn ; t#atomic_long_t managed_pages ; unsigned long spanned_pages ; unsigned long present_pages ; const char * name ; unsigned long nr_isolate_pageblock ; t#seqlock_t span_seqlock ; int initialized ; s#zone_padding _pad1_ ; s#free_area free_area [ 11 ] ; unsigned long flags ; t#spinlock_t lock ; s#zone_padding _pad2_ ; unsigned long percpu_drift_mark ; unsigned long compact_cached_free_pfn ; unsigned long compact_cached_migrate_pfn [ 2 ] ; unsigned long compact_init_migrate_pfn ; unsigned long compact_init_free_pfn ; unsigned int compact_considered ; unsigned int compact_defer_shift ; int compact_order_failed ; t#bool compact_blockskip_flush ; t#bool contiguous ; s#zone_padding _pad3_ ; t#atomic_long_t vm_stat [ E#NR_VM_ZONE_STAT_ITEMS ] ; t#atomic_long_t vm_numa_stat [ E#NR_VM_NUMA_STAT_ITEMS ] ; unsigned long uek_reserved1 ; unsigned long uek_reserved2 ; unsigned long uek_reserved3 ; unsigned long uek_reserved4 ; }
s#zone_padding struct zone_padding { char x [ 0 ] ; }
s#zone_reclaim_stat struct zone_reclaim_stat { unsigned long recent_rotated [ 2 ] ; unsigned long recent_scanned [ 2 ] ; }
s#zonelist struct zonelist { s#zoneref _zonerefs [ ( ( 1 << 10 ) * 5 ) + 1 ] ; }
s#zoneref struct zoneref { s#zone * zone ; int zone_idx ; }
sas_attach_transport extern s#scsi_transport_template * sas_attach_transport ( s#sas_function_template * )
sas_end_device_alloc extern s#sas_rphy * sas_end_device_alloc ( s#sas_port * )
sas_expander_alloc extern s#sas_rphy * sas_expander_alloc ( s#sas_port * , e#sas_device_type )
sas_phy_add extern int sas_phy_add ( s#sas_phy * )
sas_phy_alloc extern s#sas_phy * sas_phy_alloc ( s#device * , int )
sas_phy_delete extern void sas_phy_delete ( s#sas_phy * )
sas_port_add int sas_port_add ( s#sas_port * )
sas_port_add_phy void sas_port_add_phy ( s#sas_port * , s#sas_phy * )
sas_port_alloc_num s#sas_port * sas_port_alloc_num ( s#device * )
sas_port_delete void sas_port_delete ( s#sas_port * )
sas_port_delete_phy void sas_port_delete_phy ( s#sas_port * , s#sas_phy * )
sas_port_free void sas_port_free ( s#sas_port * )
sas_release_transport extern void sas_release_transport ( s#scsi_transport_template * )
sas_rphy_add extern int sas_rphy_add ( s#sas_rphy * )
sb_set_blocksize extern int sb_set_blocksize ( s#super_block * , int )
sched_setscheduler extern int sched_setscheduler ( s#task_struct * , int , const s#sched_param * )
schedule void schedule ( void )
schedule_hrtimeout_range extern int schedule_hrtimeout_range ( t#ktime_t * , t#u64 , const e#hrtimer_mode )
schedule_timeout extern long schedule_timeout ( long )
schedule_timeout_uninterruptible extern long schedule_timeout_uninterruptible ( long )
scnprintf extern __attribute__ ( ( __format__ ( printf , 3 , 4 ) ) ) int scnprintf ( char * , t#size_t , const char * , ... )
scsi_add_device extern int scsi_add_device ( s#Scsi_Host * , t#uint , t#uint , t#u64 )
scsi_add_host_with_dma extern int __attribute__ ( ( __warn_unused_result__ ) ) scsi_add_host_with_dma ( s#Scsi_Host * , s#device * , s#device * )
scsi_block_requests extern void scsi_block_requests ( s#Scsi_Host * )
scsi_build_sense_buffer extern void scsi_build_sense_buffer ( int , t#u8 * , t#u8 , t#u8 , t#u8 )
scsi_change_queue_depth extern int scsi_change_queue_depth ( s#scsi_device * , int )
scsi_cmd_ioctl extern int scsi_cmd_ioctl ( s#request_queue * , s#gendisk * , t#fmode_t , unsigned int , void * )
scsi_device_get extern int __attribute__ ( ( __warn_unused_result__ ) ) scsi_device_get ( s#scsi_device * )
scsi_device_put extern void scsi_device_put ( s#scsi_device * )
scsi_device_type extern const char * scsi_device_type ( unsigned )
scsi_dma_map extern int scsi_dma_map ( s#scsi_cmnd * )
scsi_dma_unmap extern void scsi_dma_unmap ( s#scsi_cmnd * )
scsi_host_alloc extern s#Scsi_Host * scsi_host_alloc ( s#scsi_host_template * , int )
scsi_host_put extern void scsi_host_put ( s#Scsi_Host * )
scsi_is_fc_rport int scsi_is_fc_rport ( const s#device * )
scsi_is_host_device int scsi_is_host_device ( const s#device * )
scsi_is_sdev_device extern int scsi_is_sdev_device ( const s#device * )
scsi_normalize_sense extern t#bool scsi_normalize_sense ( const t#u8 * , int , s#scsi_sense_hdr * )
scsi_remove_device extern void scsi_remove_device ( s#scsi_device * )
scsi_remove_host extern void scsi_remove_host ( s#Scsi_Host * )
scsi_req_init void scsi_req_init ( s#scsi_request * )
scsi_unblock_requests extern void scsi_unblock_requests ( s#Scsi_Host * )
scsicam_bios_param extern int scsicam_bios_param ( s#block_device * , t#sector_t , int * )
security_inode_init_security int security_inode_init_security ( s#inode * , s#inode * , const s#qstr * , t#initxattrs t#initxattrs , void * )
send_sig extern int send_sig ( int , s#task_struct * , int )
send_sig_info extern int send_sig_info ( int , s#kernel_siginfo * , s#task_struct * )
seq_escape void seq_escape ( s#seq_file * , const char * , const char * )
seq_lseek t#loff_t seq_lseek ( s#file * , t#loff_t , int )
seq_open int seq_open ( s#file * , const s#seq_operations * )
seq_printf __attribute__ ( ( __format__ ( printf , 2 , 3 ) ) ) void seq_printf ( s#seq_file * , const char * , ... )
seq_putc void seq_putc ( s#seq_file * , char )
seq_puts void seq_puts ( s#seq_file * , const char * )
seq_read t#ssize_t seq_read ( s#file * , char * , t#size_t , t#loff_t * )
seq_release int seq_release ( s#inode * , s#file * )
set_anon_super int set_anon_super ( s#super_block * , void * )
set_blocksize extern int set_blocksize ( s#block_device * , int )
set_cpus_allowed_ptr extern int set_cpus_allowed_ptr ( s#task_struct * , const s#cpumask * )
set_disk_ro extern void set_disk_ro ( s#gendisk * , int )
set_nlink extern void set_nlink ( s#inode * , unsigned int )
set_normalized_timespec64 extern void set_normalized_timespec64 ( s#timespec64 * , t#time64_t , t#s64 )
set_page_dirty int set_page_dirty ( s#page * )
set_user_nice extern void set_user_nice ( s#task_struct * , long )
setattr_prepare extern int setattr_prepare ( s#dentry * , s#iattr * )
sg_copy_from_buffer t#size_t sg_copy_from_buffer ( s#scatterlist * , unsigned int , const void * , t#size_t )
sg_copy_to_buffer t#size_t sg_copy_to_buffer ( s#scatterlist * , unsigned int , void * , t#size_t )
sg_next s#scatterlist * sg_next ( s#scatterlist * )
sget s#super_block * sget ( s#file_system_type * , int ( * ) ( s#super_block * , void * ) , int ( * ) ( s#super_block * , void * ) , int , void * )
si_meminfo extern void si_meminfo ( s#sysinfo * )
sigprocmask extern int sigprocmask ( int , t#sigset_t * , t#sigset_t * )
simple_read_from_buffer extern t#ssize_t simple_read_from_buffer ( void * , t#size_t , t#loff_t * , const void * , t#size_t )
simple_strtol extern long simple_strtol ( const char * , char * * , unsigned int )
simple_strtoul extern unsigned long simple_strtoul ( const char * , char * * , unsigned int )
simple_strtoull extern unsigned long long simple_strtoull ( const char * , char * * , unsigned int )
simple_write_begin extern int simple_write_begin ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * * , void * * )
simple_write_end extern int simple_write_end ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * , void * )
simple_write_to_buffer extern t#ssize_t simple_write_to_buffer ( void * , t#size_t , t#loff_t * , const void * , t#size_t )
single_open int single_open ( s#file * , int ( * ) ( s#seq_file * , void * ) , void * )
single_release int single_release ( s#inode * , s#file * )
skb_checksum t#__wsum skb_checksum ( const s#sk_buff * , int , int , t#__wsum )
skb_clone_tx_timestamp void skb_clone_tx_timestamp ( s#sk_buff * )
skb_copy_bits int skb_copy_bits ( const s#sk_buff * , int , void * , int )
skb_pull void * skb_pull ( s#sk_buff * , unsigned int )
skb_push void * skb_push ( s#sk_buff * , unsigned int )
skb_put void * skb_put ( s#sk_buff * , unsigned int )
skb_tstamp_tx void skb_tstamp_tx ( s#sk_buff * , s#skb_shared_hwtstamps * )
sme_me_mask extern t#u64 sme_me_mask
smp_call_function void smp_call_function ( t#smp_call_func_t , void * , int )
smp_call_function_many void smp_call_function_many ( const s#cpumask * , t#smp_call_func_t , void * , t#bool )
smp_call_function_single int smp_call_function_single ( int , t#smp_call_func_t , void * , int )
sn_coherency_id extern long sn_coherency_id
sn_partition_id extern long sn_partition_id
sn_region_size extern long sn_region_size
snprintf extern __attribute__ ( ( __format__ ( printf , 3 , 4 ) ) ) int snprintf ( char * , t#size_t , const char * , ... )
sock_create int sock_create ( int , int , int , s#socket * * )
sock_create_kern int sock_create_kern ( s#net * , int , int , int , s#socket * * )
sock_release void sock_release ( s#socket * )
sock_setsockopt int sock_setsockopt ( s#socket * , int , int , char * , unsigned int )
sockfd_lookup s#socket * sockfd_lookup ( int , int * )
sort void sort ( void * , t#size_t , t#size_t , int ( * ) ( const void * , const void * ) , void ( * ) ( void * , void * , int ) )
sprint_symbol extern int sprint_symbol ( char * , unsigned long )
sprintf extern __attribute__ ( ( __format__ ( printf , 2 , 3 ) ) ) int sprintf ( char * , const char * , ... )
sscanf extern __attribute__ ( ( __format__ ( scanf , 2 , 3 ) ) ) int sscanf ( const char * , const char * , ... )
strcasecmp extern int strcasecmp ( const char * , const char * )
strcat char * strcat ( char * , const char * )
strchr extern char * strchr ( const char * , int )
strcmp int strcmp ( const char * , const char * )
strcpy char * strcpy ( char * , const char * )
strim extern char * strim ( char * )
strlcat extern t#size_t strlcat ( char * , const char * , t#__kernel_size_t )
strlcpy t#size_t strlcpy ( char * , const char * , t#size_t )
strlen t#size_t strlen ( const char * )
strncasecmp extern int strncasecmp ( const char * , const char * , t#size_t )
strncat extern char * strncat ( char * , const char * , t#__kernel_size_t )
strncmp extern int strncmp ( const char * , const char * , t#__kernel_size_t )
strncpy extern char * strncpy ( char * , const char * , t#__kernel_size_t )
strncpy_from_user extern __attribute__ ( ( __warn_unused_result__ ) ) long strncpy_from_user ( char * , const char * , long )
strnlen extern t#__kernel_size_t strnlen ( const char * , t#__kernel_size_t )
strrchr extern char * strrchr ( const char * , int )
strscpy t#ssize_t strscpy ( char * , const char * , t#size_t )
strsep extern char * strsep ( char * * , const char * )
strspn extern t#__kernel_size_t strspn ( const char * , const char * )
strstr extern char * strstr ( const char * , const char * )
submit_bio extern t#blk_qc_t submit_bio ( s#bio * )
super_setup_bdi extern int super_setup_bdi ( s#super_block * )
super_setup_bdi_name extern __attribute__ ( ( __format__ ( printf , 2 , 3 ) ) ) int super_setup_bdi_name ( s#super_block * , char * , ... )
synchronize_irq extern void synchronize_irq ( unsigned int )
synchronize_rcu void synchronize_rcu ( void )
sys_tz extern s#timezone sys_tz
sysfs_create_bin_file int __attribute__ ( ( __warn_unused_result__ ) ) sysfs_create_bin_file ( s#kobject * , const s#bin_attribute * )
sysfs_remove_bin_file void sysfs_remove_bin_file ( s#kobject * , const s#bin_attribute * )
system_wq extern s#workqueue_struct * system_wq
t#Elf64_Addr typedef t#__u64 Elf64_Addr
t#Elf64_Half typedef t#__u16 Elf64_Half
t#Elf64_Sym typedef s#elf64_sym Elf64_Sym
t#Elf64_Word typedef t#__u32 Elf64_Word
t#Elf64_Xword typedef t#__u64 Elf64_Xword
t#__addrpair typedef t#__u64 __addrpair
t#__be16 typedef t#__u16 __be16
t#__be32 typedef t#__u32 __be32
t#__be64 typedef t#__u64 __be64
t#__gnuc_va_list typedef __builtin_va_list __gnuc_va_list
t#__kernel_clock_t typedef t#__kernel_long_t __kernel_clock_t
t#__kernel_clockid_t typedef int __kernel_clockid_t
t#__kernel_dev_t typedef t#u32 __kernel_dev_t
t#__kernel_fsid_t typedef struct { int val [ 2 ] ; } __kernel_fsid_t
t#__kernel_gid32_t typedef unsigned int __kernel_gid32_t
t#__kernel_ino_t typedef t#__kernel_ulong_t __kernel_ino_t
t#__kernel_loff_t typedef long long __kernel_loff_t
t#__kernel_long_t typedef long __kernel_long_t
t#__kernel_mqd_t typedef int __kernel_mqd_t
t#__kernel_off_t typedef t#__kernel_long_t __kernel_off_t
t#__kernel_pid_t typedef int __kernel_pid_t
t#__kernel_rwf_t typedef int __kernel_rwf_t
t#__kernel_sa_family_t typedef unsigned short __kernel_sa_family_t
t#__kernel_size_t typedef t#__kernel_ulong_t __kernel_size_t
t#__kernel_ssize_t typedef t#__kernel_long_t __kernel_ssize_t
t#__kernel_suseconds_t typedef t#__kernel_long_t __kernel_suseconds_t
t#__kernel_time64_t typedef long long __kernel_time64_t
t#__kernel_time_t typedef t#__kernel_long_t __kernel_time_t
t#__kernel_timer_t typedef int __kernel_timer_t
t#__kernel_uid32_t typedef unsigned int __kernel_uid32_t
t#__kernel_ulong_t typedef unsigned long __kernel_ulong_t
t#__le16 typedef t#__u16 __le16
t#__le32 typedef t#__u32 __le32
t#__le64 typedef t#__u64 __le64
t#__poll_t typedef unsigned __poll_t
t#__portpair typedef t#__u32 __portpair
t#__restorefn_t typedef void __restorefn_t ( void )
t#__s16 typedef __signed__ short __s16
t#__s32 typedef __signed__ int __s32
t#__s64 __extension__ typedef __signed__ long long __s64
t#__s8 typedef __signed__ char __s8
t#__sighandler_t typedef t#__signalfn_t * __sighandler_t
t#__signalfn_t typedef void __signalfn_t ( int )
t#__sigrestore_t typedef t#__restorefn_t * __sigrestore_t
t#__sum16 typedef t#__u16 __sum16
t#__u16 typedef unsigned short __u16
t#__u32 typedef unsigned int __u32
t#__u64 __extension__ typedef unsigned long long __u64
t#__u8 typedef unsigned char __u8
t#__wsum typedef t#__u32 __wsum
t#acpi_physical_address typedef t#u64 acpi_physical_address
t#acpi_size typedef t#u64 acpi_size
t#activate_complete typedef void ( * activate_complete ) ( void * , int )
t#arch_rwlock_t typedef s#qrwlock arch_rwlock_t
t#arch_spinlock_t typedef s#qspinlock arch_spinlock_t
t#atomic64_t typedef struct { t#s64 counter ; } atomic64_t
t#atomic_long_t typedef t#atomic64_t atomic_long_t
t#atomic_t typedef struct { int counter ; } atomic_t
t#bh_end_io_t typedef void ( bh_end_io_t ) ( s#buffer_head * , int )
t#bio_end_io_t typedef void ( bio_end_io_t ) ( s#bio * )
t#blist_flags_t typedef t#__u64 blist_flags_t
t#blk_mq_req_flags_t typedef t#__u32 blk_mq_req_flags_t
t#blk_qc_t typedef unsigned int blk_qc_t
t#blk_status_t typedef t#u8 blk_status_t
t#blkcnt_t typedef t#u64 blkcnt_t
t#bool typedef _Bool bool
t#busy_fn typedef t#bool ( busy_fn ) ( s#request_queue * )
t#call_single_data_t typedef s#__call_single_data call_single_data_t
t#cc_t typedef unsigned char cc_t
t#cisco_proto typedef struct { unsigned int interval ; unsigned int timeout ; } cisco_proto
t#cleanup_rq_fn typedef void ( cleanup_rq_fn ) ( s#request * )
t#clockid_t typedef t#__kernel_clockid_t clockid_t
t#commit_rqs_fn typedef void ( commit_rqs_fn ) ( s#blk_mq_hw_ctx * )
t#compat_long_t typedef t#s32 compat_long_t
t#compat_uptr_t typedef t#u32 compat_uptr_t
t#complete_fn typedef void ( complete_fn ) ( s#request * )
t#cond_update_fn_t typedef t#bool ( * cond_update_fn_t ) ( s#trace_array * , void * )
t#congested_fn typedef int ( congested_fn ) ( void * , int )
t#cpu_stop_fn_t typedef int ( * cpu_stop_fn_t ) ( void * )
t#cpumask_t typedef s#cpumask cpumask_t
t#cpumask_var_t typedef s#cpumask * cpumask_var_t
t#crypto_completion_t typedef void ( * crypto_completion_t ) ( s#crypto_async_request * , int )
t#dev_t typedef t#__kernel_dev_t dev_t
t#dma_addr_t typedef t#u64 dma_addr_t
t#dma_drain_needed_fn typedef int ( dma_drain_needed_fn ) ( s#request * )
t#dma_fence_func_t typedef void ( * dma_fence_func_t ) ( s#dma_fence * , s#dma_fence_cb * )
t#drm_ioctl_t typedef int drm_ioctl_t ( s#drm_device * , void * , s#drm_file * )
t#drm_magic_t typedef unsigned int drm_magic_t
t#dsa_fdb_dump_cb_t typedef int dsa_fdb_dump_cb_t ( const unsigned char * , t#u16 , t#bool , void * )
t#errseq_t typedef t#u32 errseq_t
t#exit_hctx_fn typedef void ( exit_hctx_fn ) ( s#blk_mq_hw_ctx * , unsigned int )
t#exit_request_fn typedef void ( exit_request_fn ) ( s#blk_mq_tag_set * , s#request * , unsigned int )
t#filldir_t typedef int ( * filldir_t ) ( s#dir_context * , const char * , int , t#loff_t , t#u64 , unsigned )
t#filler_t typedef int filler_t ( void * , s#page * )
t#fl_owner_t typedef void * fl_owner_t
t#flow_setup_cb_t typedef int flow_setup_cb_t ( e#tc_setup_type , void * , void * )
t#fmode_t typedef unsigned int fmode_t
t#fr_proto typedef struct { unsigned int t391 ; unsigned int t392 ; unsigned int n391 ; unsigned int n392 ; unsigned int n393 ; unsigned short lmi ; unsigned short dce ; } fr_proto
t#fr_proto_pvc typedef struct { unsigned int dlci ; } fr_proto_pvc
t#fr_proto_pvc_info typedef struct { unsigned int dlci ; char master [ 16 ] ; } fr_proto_pvc_info
t#fscache_operation_cancel_t typedef void ( * fscache_operation_cancel_t ) ( s#fscache_operation * )
t#fscache_operation_processor_t typedef void ( * fscache_operation_processor_t ) ( s#fscache_operation * )
t#fscache_operation_release_t typedef void ( * fscache_operation_release_t ) ( s#fscache_operation * )
t#fscache_page_retrieval_func_t typedef int ( * fscache_page_retrieval_func_t ) ( s#fscache_retrieval * , s#page * , t#gfp_t )
t#fscache_pages_retrieval_func_t typedef int ( * fscache_pages_retrieval_func_t ) ( s#fscache_retrieval * , s#list_head * , unsigned * , t#gfp_t )
t#fscache_rw_complete_t typedef void ( * fscache_rw_complete_t ) ( s#page * , void * , int )
t#fsnotify_connp_t typedef s#fsnotify_mark_connector * fsnotify_connp_t
t#ftrace_func_t typedef void ( * ftrace_func_t ) ( unsigned long , unsigned long , s#ftrace_ops * , s#pt_regs * )
t#gate_desc typedef s#gate_struct gate_desc
t#genpool_algo_t typedef unsigned long ( * genpool_algo_t ) ( unsigned long * , unsigned long , unsigned long , unsigned int , void * , s#gen_pool * , unsigned long )
t#get_block_t typedef int ( get_block_t ) ( s#inode * , t#sector_t , s#buffer_head * , int )
t#get_budget_fn typedef t#bool ( get_budget_fn ) ( s#blk_mq_hw_ctx * )
t#gfp_t typedef unsigned int gfp_t
t#gid_t typedef t#__kernel_gid32_t gid_t
t#gro_result_t typedef e#gro_result gro_result_t
t#init_hctx_fn typedef int ( init_hctx_fn ) ( s#blk_mq_hw_ctx * , void * , unsigned int )
t#init_request_fn typedef int ( init_request_fn ) ( s#blk_mq_tag_set * , s#request * , unsigned int , unsigned int )
t#initxattrs typedef int ( * initxattrs ) ( s#inode * , const s#xattr * , void * )
t#ino_t typedef t#__kernel_ino_t ino_t
t#int32_t typedef t#s32 int32_t
t#integrity_complete_fn typedef void ( integrity_complete_fn ) ( s#request * , unsigned int )
t#integrity_prepare_fn typedef void ( integrity_prepare_fn ) ( s#request * )
t#integrity_processing_fn typedef t#blk_status_t ( integrity_processing_fn ) ( s#blk_integrity_iter * )
t#iommu_dev_fault_handler_t typedef int ( * iommu_dev_fault_handler_t ) ( s#iommu_fault * , void * )
t#iommu_fault_handler_t typedef int ( * iommu_fault_handler_t ) ( s#iommu_domain * , s#device * , unsigned long , int , void * )
t#iommu_mm_exit_handler_t typedef int ( * iommu_mm_exit_handler_t ) ( s#device * , s#iommu_sva * , void * )
t#irq_flow_handler_t typedef void ( * irq_flow_handler_t ) ( s#irq_desc * )
t#irq_handler_t typedef t#irqreturn_t ( * irq_handler_t ) ( int , void * )
t#irq_hw_number_t typedef unsigned long irq_hw_number_t
t#irqreturn_t typedef e#irqreturn irqreturn_t
t#isolate_mode_t typedef unsigned isolate_mode_t
t#iw_handler typedef int ( * iw_handler ) ( s#net_device * , s#iw_request_info * , u#iwreq_data * , char * )
t#kernel_cap_t typedef s#kernel_cap_struct kernel_cap_t
t#kernel_siginfo_t typedef s#kernel_siginfo kernel_siginfo_t
t#kernel_ulong_t typedef unsigned long kernel_ulong_t
t#key_perm_t typedef t#uint32_t key_perm_t
t#key_restrict_link_func_t typedef int ( * key_restrict_link_func_t ) ( s#key * , const s#key_type * , const u#key_payload * , s#key * )
t#key_serial_t typedef t#int32_t key_serial_t
t#kgid_t typedef struct { t#gid_t val ; } kgid_t
t#kprojid_t typedef struct { t#projid_t val ; } kprojid_t
t#kthread_work_func_t typedef void ( * kthread_work_func_t ) ( s#kthread_work * )
t#ktime_t typedef t#s64 ktime_t
t#kuid_t typedef struct { t#uid_t val ; } kuid_t
t#kxdrdproc_t typedef int ( * kxdrdproc_t ) ( s#rpc_rqst * , s#xdr_stream * , void * )
t#kxdreproc_t typedef void ( * kxdreproc_t ) ( s#rpc_rqst * , s#xdr_stream * , const void * )
t#local64_t typedef struct { t#local_t a ; } local64_t
t#local_t typedef struct { t#atomic_long_t a ; } local_t
t#loff_t typedef t#__kernel_loff_t loff_t
t#make_request_fn typedef t#blk_qc_t ( make_request_fn ) ( s#request_queue * , s#bio * )
t#map_queues_fn typedef int ( map_queues_fn ) ( s#blk_mq_tag_set * )
t#match_table_t typedef s#match_token match_table_t [ ]
t#mempool_alloc_t typedef void * ( mempool_alloc_t ) ( t#gfp_t , void * )
t#mempool_free_t typedef void ( mempool_free_t ) ( void * , void * )
t#mempool_t typedef s#mempool_s mempool_t
t#mm_context_t typedef struct { t#u64 ctx_id ; t#atomic64_t tlb_gen ; s#rw_semaphore ldt_usr_sem ; s#ldt_struct * ldt ; unsigned short ia32_compat ; s#mutex lock ; void * vdso ; const s#vdso_image * vdso_image ; t#atomic_t perf_rdpmc_allowed ; t#u16 pkey_allocation_map ; t#s16 execute_only_pkey ; void * bd_addr ; } mm_context_t
t#mm_segment_t typedef struct { unsigned long seg ; } mm_segment_t
t#mqd_t typedef t#__kernel_mqd_t mqd_t
t#netdev_features_t typedef t#u64 netdev_features_t
t#netdev_tx_t typedef e#netdev_tx netdev_tx_t
t#nf_hookfn typedef unsigned int nf_hookfn ( void * , s#sk_buff * , const s#nf_hook_state * )
t#nf_logfn typedef void nf_logfn ( s#net * , t#u_int8_t , unsigned int , const s#sk_buff * , const s#net_device * , const s#net_device * , const s#nf_loginfo * , const char * )
t#nfs4_stateid typedef s#nfs4_stateid_struct nfs4_stateid
t#nfs4_verifier typedef struct { char data [ 8 ] ; } nfs4_verifier
t#nlink_t typedef t#u32 nlink_t
t#nodemask_t typedef struct { unsigned long bits [ ( ( ( ( 1 << 10 ) ) + ( ( sizeof ( long ) * 8 ) ) - 1 ) / ( ( sizeof ( long ) * 8 ) ) ) ] ; } nodemask_t
t#notifier_fn_t typedef int ( * notifier_fn_t ) ( s#notifier_block * , unsigned long , void * )
t#nvmem_reg_read_t typedef int ( * nvmem_reg_read_t ) ( void * , unsigned int , void * , t#size_t )
t#nvmem_reg_write_t typedef int ( * nvmem_reg_write_t ) ( void * , unsigned int , void * , t#size_t )
t#off_t typedef t#__kernel_off_t off_t
t#old_time32_t typedef t#s32 old_time32_t
t#p4d_t typedef struct { t#p4dval_t p4d ; } p4d_t
t#p4dval_t typedef unsigned long p4dval_t
t#pci_bus_flags_t typedef unsigned short pci_bus_flags_t
t#pci_channel_state_t typedef unsigned int pci_channel_state_t
t#pci_dev_flags_t typedef unsigned short pci_dev_flags_t
t#pci_ers_result_t typedef unsigned int pci_ers_result_t
t#pci_power_t typedef int pci_power_t
t#percpu_ref_func_t typedef void ( percpu_ref_func_t ) ( s#percpu_ref * )
t#perf_copy_f typedef unsigned long ( * perf_copy_f ) ( void * , const void * , unsigned long , unsigned long )
t#perf_overflow_handler_t typedef void ( * perf_overflow_handler_t ) ( s#perf_event * , s#perf_sample_data * , s#pt_regs * )
t#pgd_t typedef struct { t#pgdval_t pgd ; } pgd_t
t#pgdval_t typedef unsigned long pgdval_t
t#pgprot_t typedef s#pgprot pgprot_t
t#pgprotval_t typedef unsigned long pgprotval_t
t#pgtable_t typedef s#page * pgtable_t
t#phandle typedef t#u32 phandle
t#phy_interface_t typedef enum { PHY_INTERFACE_MODE_NA , PHY_INTERFACE_MODE_INTERNAL , PHY_INTERFACE_MODE_MII , PHY_INTERFACE_MODE_GMII , PHY_INTERFACE_MODE_SGMII , PHY_INTERFACE_MODE_TBI , PHY_INTERFACE_MODE_REVMII , PHY_INTERFACE_MODE_RMII , PHY_INTERFACE_MODE_RGMII , PHY_INTERFACE_MODE_RGMII_ID , PHY_INTERFACE_MODE_RGMII_RXID , PHY_INTERFACE_MODE_RGMII_TXID , PHY_INTERFACE_MODE_RTBI , PHY_INTERFACE_MODE_SMII , PHY_INTERFACE_MODE_XGMII , PHY_INTERFACE_MODE_MOCA , PHY_INTERFACE_MODE_QSGMII , PHY_INTERFACE_MODE_TRGMII , PHY_INTERFACE_MODE_1000BASEX , PHY_INTERFACE_MODE_2500BASEX , PHY_INTERFACE_MODE_RXAUI , PHY_INTERFACE_MODE_XAUI , PHY_INTERFACE_MODE_10GKR , PHY_INTERFACE_MODE_USXGMII , PHY_INTERFACE_MODE_MAX , } phy_interface_t
t#phys_addr_t typedef t#u64 phys_addr_t
t#pid_t typedef t#__kernel_pid_t pid_t
t#pm_message_t typedef s#pm_message pm_message_t
t#pmd_t typedef struct { t#pmdval_t pmd ; } pmd_t
t#pmdval_t typedef unsigned long pmdval_t
t#poll_fn typedef int ( poll_fn ) ( s#blk_mq_hw_ctx * )
t#poll_queue_proc typedef void ( * poll_queue_proc ) ( s#file * , t#wait_queue_head_t * , s#poll_table_struct * , unsigned long )
t#possible_net_t typedef struct { s#net * net ; } possible_net_t
t#proc_handler typedef int proc_handler ( s#ctl_table * , int , void * , t#size_t * , t#loff_t * )
t#proc_write_t typedef int ( * proc_write_t ) ( s#file * , char * , t#size_t )
t#projid_t typedef t#__kernel_uid32_t projid_t
t#pte_t typedef struct { t#pteval_t pte ; } pte_t
t#pteval_t typedef unsigned long pteval_t
t#pud_t typedef struct { t#pudval_t pud ; } pud_t
t#pudval_t typedef unsigned long pudval_t
t#put_budget_fn typedef void ( put_budget_fn ) ( s#blk_mq_hw_ctx * )
t#qsize_t typedef long long qsize_t
t#queue_rq_fn typedef t#blk_status_t ( queue_rq_fn ) ( s#blk_mq_hw_ctx * , const s#blk_mq_queue_data * )
t#raw_hdlc_proto typedef struct { unsigned short encoding ; unsigned short parity ; } raw_hdlc_proto
t#raw_spinlock_t typedef s#raw_spinlock raw_spinlock_t
t#read_descriptor_t typedef struct { t#size_t written ; t#size_t count ; union { char * buf ; void * data ; } arg ; int error ; } read_descriptor_t
t#refcount_t typedef s#refcount_struct refcount_t
t#req_flags_t typedef t#__u32 req_flags_t
t#request_key_actor_t typedef int ( * request_key_actor_t ) ( s#key * , void * )
t#resource_size_t typedef t#phys_addr_t resource_size_t
t#rht_hashfn_t typedef t#u32 ( * rht_hashfn_t ) ( const void * , t#u32 , t#u32 )
t#rht_obj_cmpfn_t typedef int ( * rht_obj_cmpfn_t ) ( s#rhashtable_compare_arg * , const void * )
t#rht_obj_hashfn_t typedef t#u32 ( * rht_obj_hashfn_t ) ( const void * , t#u32 , t#u32 )
t#rpc_authflavor_t typedef t#u32 rpc_authflavor_t
t#rq_end_io_fn typedef void ( rq_end_io_fn ) ( s#request * , t#blk_status_t )
t#rwf_t typedef t#__kernel_rwf_t rwf_t
t#rwlock_t typedef struct { t#arch_rwlock_t raw_lock ; unsigned int magic , owner_cpu ; void * owner ; s#lockdep_map dep_map ; } rwlock_t
t#rx_handler_func_t typedef t#rx_handler_result_t rx_handler_func_t ( s#sk_buff * * )
t#rx_handler_result_t typedef e#rx_handler_result rx_handler_result_t
t#s16 typedef t#__s16 s16
t#s32 typedef t#__s32 s32
t#s64 typedef t#__s64 s64
t#s8 typedef t#__s8 s8
t#sa_family_t typedef t#__kernel_sa_family_t sa_family_t
t#sector_t typedef t#u64 sector_t
t#seqcount_t typedef s#seqcount seqcount_t
t#seqlock_t typedef struct { s#seqcount seqcount ; t#spinlock_t lock ; } seqlock_t
t#sigset_t typedef struct { unsigned long sig [ ( 64 / 64 ) ] ; } sigset_t
t#sigval_t typedef u#sigval sigval_t
t#siphash_key_t typedef struct { t#u64 key [ 2 ] ; } siphash_key_t
t#size_t typedef t#__kernel_size_t size_t
t#sk_buff_data_t typedef unsigned int sk_buff_data_t
t#sk_read_actor_t typedef int ( * sk_read_actor_t ) ( t#read_descriptor_t * , s#sk_buff * , unsigned int , t#size_t )
t#slab_flags_t typedef unsigned int slab_flags_t
t#smp_call_func_t typedef void ( * smp_call_func_t ) ( void * )
t#socket_lock_t typedef struct { t#spinlock_t slock ; int owned ; t#wait_queue_head_t wq ; s#lockdep_map dep_map ; } socket_lock_t
t#socket_state typedef enum { SS_FREE = 0 , SS_UNCONNECTED , SS_CONNECTING , SS_CONNECTED , SS_DISCONNECTING } socket_state
t#speed_t typedef unsigned int speed_t
t#spinlock_t typedef s#spinlock spinlock_t
t#ssize_t typedef t#__kernel_ssize_t ssize_t
t#substring_t typedef struct { char * from ; char * to ; } substring_t
t#sync_serial_settings typedef struct { unsigned int clock_rate ; unsigned int clock_type ; unsigned short loopback ; } sync_serial_settings
t#tcflag_t typedef unsigned int tcflag_t
t#te1_settings typedef struct { unsigned int clock_rate ; unsigned int clock_type ; unsigned short loopback ; unsigned int slot_map ; } te1_settings
t#time64_t typedef t#__s64 time64_t
t#time_t typedef t#__kernel_time_t time_t
t#timeout_fn typedef e#blk_eh_timer_return ( timeout_fn ) ( s#request * , t#bool )
t#trace_print_func typedef e#print_line_t ( * trace_print_func ) ( s#trace_iterator * , int , s#trace_event * )
t#tracepoint_ptr_t typedef const int tracepoint_ptr_t
t#u16 typedef t#__u16 u16
t#u32 typedef t#__u32 u32
t#u64 typedef t#__u64 u64
t#u8 typedef t#__u8 u8
t#u_char typedef unsigned char u_char
t#u_int16_t typedef t#u16 u_int16_t
t#u_int32_t typedef t#u32 u_int32_t
t#u_int64_t typedef t#u64 u_int64_t
t#u_int8_t typedef t#u8 u_int8_t
t#uid_t typedef t#__kernel_uid32_t uid_t
t#uint typedef unsigned int uint
t#uint16_t typedef t#u16 uint16_t
t#uint32_t typedef t#u32 uint32_t
t#uint64_t typedef t#u64 uint64_t
t#uint8_t typedef t#u8 uint8_t
t#umode_t typedef unsigned short umode_t
t#unicode_t typedef t#u32 unicode_t
t#uuid_t typedef struct { t#__u8 b [ 16 ] ; } uuid_t
t#va_list typedef t#__gnuc_va_list va_list
t#vm_fault_t typedef unsigned int vm_fault_t
t#wait_queue_entry_t typedef s#wait_queue_entry wait_queue_entry_t
t#wait_queue_func_t typedef int ( * wait_queue_func_t ) ( s#wait_queue_entry * , unsigned , int , void * )
t#wait_queue_head_t typedef s#wait_queue_head wait_queue_head_t
t#wchar_t typedef t#u16 wchar_t
t#work_func_t typedef void ( * work_func_t ) ( s#work_struct * )
t#xa_mark_t typedef unsigned xa_mark_t
t#xfrm_address_t typedef union { t#__be32 a4 ; t#__be32 a6 [ 4 ] ; s#in6_addr in6 ; } xfrm_address_t
tag_pages_for_writeback void tag_pages_for_writeback ( s#address_space * , unsigned long , unsigned long )
tasklet_init extern void tasklet_init ( s#tasklet_struct * , void ( * ) ( unsigned long ) , unsigned long )
thaw_bdev extern int thaw_bdev ( s#block_device * , s#super_block * )
this_cpu_off extern __attribute__ ( ( section ( ".data..percpu" "..read_mostly" ) ) ) __typeof__ ( unsigned long ) this_cpu_off
time64_to_tm void time64_to_tm ( t#time64_t , int , s#tm * )
touch_atime extern void touch_atime ( const s#path * )
trace_define_field extern int trace_define_field ( s#trace_event_call * , const char * , const char * , int , int , int , int )
trace_event_buffer_commit void trace_event_buffer_commit ( s#trace_event_buffer * )
trace_event_buffer_reserve void * trace_event_buffer_reserve ( s#trace_event_buffer * , s#trace_event_file * , unsigned long )
trace_event_ignore_this_pid t#bool trace_event_ignore_this_pid ( s#trace_event_file * )
trace_event_raw_init extern int trace_event_raw_init ( s#trace_event_call * )
trace_event_reg extern int trace_event_reg ( s#trace_event_call * , e#trace_reg , void * )
trace_handle_return e#print_line_t trace_handle_return ( s#trace_seq * )
trace_print_hex_seq const char * trace_print_hex_seq ( s#trace_seq * , const unsigned char * , int , t#bool )
trace_raw_output_prep int trace_raw_output_prep ( s#trace_iterator * , s#trace_event * )
trace_seq_printf extern __attribute__ ( ( __format__ ( printf , 2 , 3 ) ) ) void trace_seq_printf ( s#trace_seq * , const char * , ... )
truncate_inode_pages extern void truncate_inode_pages ( s#address_space * , t#loff_t )
truncate_inode_pages_final extern void truncate_inode_pages_final ( s#address_space * )
truncate_inode_pages_range extern void truncate_inode_pages_range ( s#address_space * , t#loff_t , t#loff_t )
truncate_pagecache extern void truncate_pagecache ( s#inode * , t#loff_t )
truncate_setsize extern void truncate_setsize ( s#inode * , t#loff_t )
try_module_get extern t#bool try_module_get ( s#module * )
tsc_khz extern unsigned int tsc_khz
ttm_bo_add_to_lru void ttm_bo_add_to_lru ( s#ttm_buffer_object * )
ttm_bo_del_sub_from_lru void ttm_bo_del_sub_from_lru ( s#ttm_buffer_object * )
ttm_bo_device_init int ttm_bo_device_init ( s#ttm_bo_device * , s#ttm_bo_driver * , s#address_space * , t#bool )
ttm_bo_device_release int ttm_bo_device_release ( s#ttm_bo_device * )
ttm_bo_dma_acc_size t#size_t ttm_bo_dma_acc_size ( s#ttm_bo_device * , unsigned long , unsigned )
ttm_bo_eviction_valuable t#bool ttm_bo_eviction_valuable ( s#ttm_buffer_object * , const s#ttm_place * )
ttm_bo_init int ttm_bo_init ( s#ttm_bo_device * , s#ttm_buffer_object * , unsigned long , e#ttm_bo_type , s#ttm_placement * , t#uint32_t , t#bool , t#size_t , s#sg_table * , s#dma_resv * , void ( * ) ( s#ttm_buffer_object * ) )
ttm_bo_init_mm int ttm_bo_init_mm ( s#ttm_bo_device * , unsigned , unsigned long )
ttm_bo_kmap int ttm_bo_kmap ( s#ttm_buffer_object * , unsigned long , unsigned long , s#ttm_bo_kmap_obj * )
ttm_bo_kunmap void ttm_bo_kunmap ( s#ttm_bo_kmap_obj * )
ttm_bo_manager_func extern const s#ttm_mem_type_manager_func ttm_bo_manager_func
ttm_bo_mmap int ttm_bo_mmap ( s#file * , s#vm_area_struct * , s#ttm_bo_device * )
ttm_bo_move_to_lru_tail void ttm_bo_move_to_lru_tail ( s#ttm_buffer_object * , s#ttm_lru_bulk_move * )
ttm_bo_put void ttm_bo_put ( s#ttm_buffer_object * )
ttm_bo_validate int ttm_bo_validate ( s#ttm_buffer_object * , s#ttm_placement * , s#ttm_operation_ctx * )
ttm_tt_fini void ttm_tt_fini ( s#ttm_tt * )
ttm_tt_init int ttm_tt_init ( s#ttm_tt * , s#ttm_buffer_object * , t#uint32_t )
tty_kref_put extern void tty_kref_put ( s#tty_struct * )
tty_name extern const char * tty_name ( const s#tty_struct * )
u#__sifields union __sifields { struct { t#__kernel_pid_t _pid ; t#__kernel_uid32_t _uid ; } _kill ; struct { t#__kernel_timer_t _tid ; int _overrun ; t#sigval_t _sigval ; int _sys_private ; } _timer ; struct { t#__kernel_pid_t _pid ; t#__kernel_uid32_t _uid ; t#sigval_t _sigval ; } _rt ; struct { t#__kernel_pid_t _pid ; t#__kernel_uid32_t _uid ; int _status ; t#__kernel_clock_t _utime ; t#__kernel_clock_t _stime ; } _sigchld ; struct { void * _addr ; union { short _addr_lsb ; struct { char _dummy_bnd [ ( __alignof__ ( void * ) < sizeof ( short ) ? sizeof ( short ) : __alignof__ ( void * ) ) ] ; void * _lower ; void * _upper ; } _addr_bnd ; struct { char _dummy_pkey [ ( __alignof__ ( void * ) < sizeof ( short ) ? sizeof ( short ) : __alignof__ ( void * ) ) ] ; t#__u32 _pkey ; } _addr_pkey ; } ; } _sigfault ; struct { long _band ; int _fd ; } _sigpoll ; struct { void * _call_addr ; int _syscall ; unsigned int _arch ; } _sigsys ; }
u#bpf_attr union bpf_attr { struct { t#__u32 map_type ; t#__u32 key_size ; t#__u32 value_size ; t#__u32 max_entries ; t#__u32 map_flags ; t#__u32 inner_map_fd ; t#__u32 numa_node ; char map_name [ 16U ] ; t#__u32 map_ifindex ; t#__u32 btf_fd ; t#__u32 btf_key_type_id ; t#__u32 btf_value_type_id ; } ; struct { t#__u32 map_fd ; t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) key ; union { t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) value ; t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) next_key ; } ; t#__u64 flags ; } ; struct { t#__u32 prog_type ; t#__u32 insn_cnt ; t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) insns ; t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) license ; t#__u32 log_level ; t#__u32 log_size ; t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) log_buf ; t#__u32 kern_version ; t#__u32 prog_flags ; char prog_name [ 16U ] ; t#__u32 prog_ifindex ; t#__u32 expected_attach_type ; t#__u32 prog_btf_fd ; t#__u32 func_info_rec_size ; t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) func_info ; t#__u32 func_info_cnt ; t#__u32 line_info_rec_size ; t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) line_info ; t#__u32 line_info_cnt ; } ; struct { t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) pathname ; t#__u32 bpf_fd ; t#__u32 file_flags ; } ; struct { t#__u32 target_fd ; t#__u32 attach_bpf_fd ; t#__u32 attach_type ; t#__u32 attach_flags ; } ; struct { t#__u32 prog_fd ; t#__u32 retval ; t#__u32 data_size_in ; t#__u32 data_size_out ; t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) data_in ; t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) data_out ; t#__u32 repeat ; t#__u32 duration ; t#__u32 ctx_size_in ; t#__u32 ctx_size_out ; t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) ctx_in ; t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) ctx_out ; } test ; struct { union { t#__u32 start_id ; t#__u32 prog_id ; t#__u32 map_id ; t#__u32 btf_id ; } ; t#__u32 next_id ; t#__u32 open_flags ; } ; struct { t#__u32 bpf_fd ; t#__u32 info_len ; t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) info ; } info ; struct { t#__u32 target_fd ; t#__u32 attach_type ; t#__u32 query_flags ; t#__u32 attach_flags ; t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) prog_ids ; t#__u32 prog_cnt ; } query ; struct { t#__u64 name ; t#__u32 prog_fd ; } raw_tracepoint ; struct { t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) btf ; t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) btf_log_buf ; t#__u32 btf_size ; t#__u32 btf_log_size ; t#__u32 btf_log_level ; } ; struct { t#__u32 pid ; t#__u32 fd ; t#__u32 flags ; t#__u32 buf_len ; t#__u64 __attribute__ ( ( aligned ( 8 ) ) ) buf ; t#__u32 prog_id ; t#__u32 fd_type ; t#__u64 probe_offset ; t#__u64 probe_addr ; } task_fd_query ; }
u#ethtool_flow_union union ethtool_flow_union { s#ethtool_tcpip4_spec tcp_ip4_spec ; s#ethtool_tcpip4_spec udp_ip4_spec ; s#ethtool_tcpip4_spec sctp_ip4_spec ; s#ethtool_ah_espip4_spec ah_ip4_spec ; s#ethtool_ah_espip4_spec esp_ip4_spec ; s#ethtool_usrip4_spec usr_ip4_spec ; s#ethtool_tcpip6_spec tcp_ip6_spec ; s#ethtool_tcpip6_spec udp_ip6_spec ; s#ethtool_tcpip6_spec sctp_ip6_spec ; s#ethtool_ah_espip6_spec ah_ip6_spec ; s#ethtool_ah_espip6_spec esp_ip6_spec ; s#ethtool_usrip6_spec usr_ip6_spec ; s#ethhdr ether_spec ; t#__u8 hdata [ 52 ] ; }
u#flowi_uli union flowi_uli { struct { t#__be16 dport ; t#__be16 sport ; } ports ; struct { t#__u8 type ; t#__u8 code ; } icmpt ; struct { t#__le16 dport ; t#__le16 sport ; } dnports ; t#__be32 spi ; t#__be32 gre_key ; struct { t#__u8 type ; } mht ; }
u#fpregs_state union fpregs_state { s#fregs_state fsave ; s#fxregs_state fxsave ; s#swregs_state soft ; s#xregs_state xsave ; t#u8 __padding [ ( ( 1UL ) << 12 ) ] ; }
u#fscrypt_policy union fscrypt_policy { t#u8 version ; s#fscrypt_policy_v1 v1 ; s#fscrypt_policy_v2 v2 ; }
u#i2c_smbus_data union i2c_smbus_data { t#__u8 byte ; t#__u16 word ; t#__u8 block [ 32 + 2 ] ; }
u#inet_addr union inet_addr { t#__u32 all [ 4 ] ; t#__be32 ip ; t#__be32 ip6 [ 4 ] ; s#in_addr in ; s#in6_addr in6 ; }
u#iwreq_data union iwreq_data { char name [ 16 ] ; s#iw_point essid ; s#iw_param nwid ; s#iw_freq freq ; s#iw_param sens ; s#iw_param bitrate ; s#iw_param txpower ; s#iw_param rts ; s#iw_param frag ; t#__u32 mode ; s#iw_param retry ; s#iw_point encoding ; s#iw_param power ; s#iw_quality qual ; s#sockaddr ap_addr ; s#sockaddr addr ; s#iw_param param ; s#iw_point data ; }
u#kernfs_node_id union kernfs_node_id { struct { t#u32 ino ; t#u32 generation ; } ; t#u64 id ; }
u#key_payload union key_payload { void * rcu_data0 ; void * data [ 4 ] ; }
u#nf_conntrack_man_proto union nf_conntrack_man_proto { t#__be16 all ; struct { t#__be16 port ; } tcp ; struct { t#__be16 port ; } udp ; struct { t#__be16 id ; } icmp ; struct { t#__be16 port ; } dccp ; struct { t#__be16 port ; } sctp ; struct { t#__be16 key ; } gre ; }
u#nf_conntrack_proto union nf_conntrack_proto { s#nf_ct_dccp dccp ; s#ip_ct_sctp sctp ; s#ip_ct_tcp tcp ; s#nf_ct_udp udp ; s#nf_ct_gre gre ; unsigned int tmpl_padto ; }
u#nf_inet_addr union nf_inet_addr { t#__u32 all [ 4 ] ; t#__be32 ip ; t#__be32 ip6 [ 4 ] ; s#in_addr in ; s#in6_addr in6 ; }
u#perf_mem_data_src union perf_mem_data_src { t#__u64 val ; struct { t#__u64 mem_op : 5 , mem_lvl : 14 , mem_snoop : 5 , mem_lock : 2 , mem_dtlb : 7 , mem_lvl_num : 4 , mem_remote : 1 , mem_snoopx : 2 , mem_rsvd : 24 ; } ; }
u#sigval union sigval { int sival_int ; void * sival_ptr ; }
u#tcp_cc_info@270739f8 union tcp_cc_info { UNKNOWN }
u#tcp_cc_info@dd26ac50 union tcp_cc_info { s#tcpvegas_info vegas ; s#tcp_dctcp_info dctcp ; s#tcp_bbr_info bbr ; }
u#tls_crypto_context union tls_crypto_context { s#tls_crypto_info info ; union { s#tls12_crypto_info_aes_gcm_128 aes_gcm_128 ; s#tls12_crypto_info_aes_gcm_256 aes_gcm_256 ; } ; }
unload_nls extern void unload_nls ( s#nls_table * )
unlock_new_inode extern void unlock_new_inode ( s#inode * )
unlock_page extern void unlock_page ( s#page * )
unlock_rename extern void unlock_rename ( s#dentry * , s#dentry * )
unmap_mapping_range void unmap_mapping_range ( s#address_space * , t#loff_t const , t#loff_t const , int )
unregister_binfmt extern void unregister_binfmt ( s#linux_binfmt * )
unregister_blkdev extern void unregister_blkdev ( unsigned int , const char * )
unregister_chrdev_region extern void unregister_chrdev_region ( t#dev_t , unsigned )
unregister_filesystem extern int unregister_filesystem ( s#file_system_type * )
unregister_inet6addr_notifier int unregister_inet6addr_notifier ( s#notifier_block * )
unregister_inetaddr_notifier int unregister_inetaddr_notifier ( s#notifier_block * )
unregister_netdev void unregister_netdev ( s#net_device * )
unregister_netdevice_notifier int unregister_netdevice_notifier ( s#notifier_block * )
unregister_reboot_notifier extern int unregister_reboot_notifier ( s#notifier_block * )
unuse_mm void unuse_mm ( s#mm_struct * )
up extern void up ( s#semaphore * )
up_read extern void up_read ( s#rw_semaphore * )
up_write extern void up_write ( s#rw_semaphore * )
use_mm void use_mm ( s#mm_struct * )
usleep_range void usleep_range ( unsigned long , unsigned long )
utf32_to_utf8 extern int utf32_to_utf8 ( t#unicode_t , t#u8 * , int )
utf8_to_utf32 extern int utf8_to_utf32 ( const t#u8 * , int , t#unicode_t * )
uv_bios_call extern t#s64 uv_bios_call ( e#uv_bios_cmd , t#u64 , t#u64 , t#u64 , t#u64 , t#u64 )
uv_possible_blades extern short uv_possible_blades
uv_setup_irq extern int uv_setup_irq ( char * , int , int , unsigned long , int )
uv_teardown_irq extern void uv_teardown_irq ( unsigned int )
uv_type extern int uv_type
vfree extern void vfree ( const void * )
vfs_create extern int vfs_create ( s#inode * , s#dentry * , t#umode_t , t#bool )
vfs_fsync extern int vfs_fsync ( s#file * , int )
vfs_fsync_range extern int vfs_fsync_range ( s#file * , t#loff_t , t#loff_t , int )
vfs_get_link extern const char * vfs_get_link ( s#dentry * , s#delayed_call * )
vfs_getattr extern int vfs_getattr ( const s#path * , s#kstat * , t#u32 , unsigned int )
vfs_iter_read t#ssize_t vfs_iter_read ( s#file * , s#iov_iter * , t#loff_t * , t#rwf_t )
vfs_iter_write t#ssize_t vfs_iter_write ( s#file * , s#iov_iter * , t#loff_t * , t#rwf_t )
vfs_link extern int vfs_link ( s#dentry * , s#inode * , s#dentry * , s#inode * * )
vfs_llseek extern t#loff_t vfs_llseek ( s#file * , t#loff_t , int )
vfs_mkdir extern int vfs_mkdir ( s#inode * , s#dentry * , t#umode_t )
vfs_mknod extern int vfs_mknod ( s#inode * , s#dentry * , t#umode_t , t#dev_t )
vfs_rename extern int vfs_rename ( s#inode * , s#dentry * , s#inode * , s#dentry * , s#inode * * , unsigned int )
vfs_rmdir extern int vfs_rmdir ( s#inode * , s#dentry * )
vfs_symlink extern int vfs_symlink ( s#inode * , s#dentry * , const char * )
vfs_unlink extern int vfs_unlink ( s#inode * , s#dentry * , s#inode * * )
vgacon_text_force extern t#bool vgacon_text_force ( void )
vm_insert_page int vm_insert_page ( s#vm_area_struct * , unsigned long , s#page * )
vm_mmap extern unsigned long __attribute__ ( ( __warn_unused_result__ ) ) vm_mmap ( s#file * , unsigned long , unsigned long , unsigned long , unsigned long , unsigned long )
vm_munmap extern int vm_munmap ( unsigned long , t#size_t )
vmalloc extern void * vmalloc ( unsigned long )
vmalloc_base extern unsigned long vmalloc_base
vmalloc_to_page s#page * vmalloc_to_page ( const void * )
vmalloc_to_pfn unsigned long vmalloc_to_pfn ( const void * )
vmap extern void * vmap ( s#page * * , unsigned int , unsigned long , t#pgprot_t )
vmemmap_base extern unsigned long vmemmap_base
vprintk __attribute__ ( ( __format__ ( printf , 1 , 0 ) ) ) int vprintk ( const char * , t#va_list )
vscnprintf extern __attribute__ ( ( __format__ ( printf , 3 , 0 ) ) ) int vscnprintf ( char * , t#size_t , const char * , t#va_list )
vsnprintf extern __attribute__ ( ( __format__ ( printf , 3 , 0 ) ) ) int vsnprintf ( char * , t#size_t , const char * , t#va_list )
vsprintf extern __attribute__ ( ( __format__ ( printf , 2 , 0 ) ) ) int vsprintf ( char * , const char * , t#va_list )
vunmap extern void vunmap ( const void * )
wait_for_completion extern void wait_for_completion ( s#completion * )
wait_for_completion_interruptible extern int wait_for_completion_interruptible ( s#completion * )
wait_for_completion_io_timeout extern unsigned long wait_for_completion_io_timeout ( s#completion * , unsigned long )
wait_for_completion_timeout extern unsigned long wait_for_completion_timeout ( s#completion * , unsigned long )
wait_on_page_bit extern void wait_on_page_bit ( s#page * , int )
wake_up_process extern int wake_up_process ( s#task_struct * )
write_inode_now extern int write_inode_now ( s#inode * , int )
wrmsr_safe_on_cpu int wrmsr_safe_on_cpu ( unsigned int , t#u32 , t#u32 , t#u32 )
ww_mutex_lock_interruptible extern int __attribute__ ( ( __warn_unused_result__ ) ) ww_mutex_lock_interruptible ( s#ww_mutex * , s#ww_acquire_ctx * )
ww_mutex_unlock extern void ww_mutex_unlock ( s#ww_mutex * )
x86_cpu_to_apicid extern __attribute__ ( ( section ( ".data..percpu" "..read_mostly" ) ) ) __typeof__ ( t#u16 ) x86_cpu_to_apicid
yield void yield ( void )
zalloc_cpumask_var t#bool zalloc_cpumask_var ( t#cpumask_var_t * , t#gfp_t )
zap_vma_ptes void zap_vma_ptes ( s#vm_area_struct * , unsigned long , unsigned long )
F#arch/x86/kernel/apic/apic.symtypes x86_cpu_to_apicid
F#arch/x86/kernel/apic/x2apic_uv_x.symtypes __uv_cpu_info __uv_hub_info_list __uv_uek_dummy is_uv_system uv_possible_blades
F#arch/x86/kernel/cpu/bugs.symtypes mds_idle_clear
F#arch/x86/kernel/cpu/common.symtypes __preempt_count current_task gdt_page s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@581f6d64 s#cfs_rq@b985a5b8 s#cgroup_namespace@b9b52aeb s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@b9bbae00 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@b304f10d s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@43548338 s#trace_eval_map@b76c02a9 s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@ce8044bf s#user_namespace@e4129c73 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#arch/x86/kernel/cpu/mtrr/mtrr.symtypes arch_phys_wc_add arch_phys_wc_del
F#arch/x86/kernel/ftrace_64.symtypes __fentry__
F#arch/x86/kernel/head64.symtypes page_offset_base pgdir_shift ptrs_per_p4d vmalloc_base vmemmap_base
F#arch/x86/kernel/head_64.symtypes empty_zero_page phys_base
F#arch/x86/kernel/paravirt.symtypes pv_ops s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@581f6d64 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@2ba1f463 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#arch/x86/kernel/pci-dma.symtypes dma_ops s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_domain@3cbf842a s#iommu_fwspec@0612b24b s#iommu_ops@f490065f s#iommu_param@b3fd8593 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#arch/x86/kernel/setup.symtypes boot_cpu_data
F#arch/x86/kernel/setup_percpu.symtypes __per_cpu_offset cpu_number this_cpu_off
F#arch/x86/kernel/smpboot.symtypes cpu_info cpu_sibling_map
F#arch/x86/kernel/tsc.symtypes cpu_khz s#module@689a97e0 tsc_khz
F#arch/x86/lib/copy_user_64.symtypes copy_user_enhanced_fast_string copy_user_generic_string copy_user_generic_unrolled
F#arch/x86/lib/csum-wrappers_64.symtypes csum_ipv6_magic s#in6_addr@d91c0c20
F#arch/x86/lib/delay.symtypes __const_udelay
F#arch/x86/lib/getuser.symtypes __get_user_2 __get_user_8
F#arch/x86/lib/hweight.symtypes __sw_hweight32 __sw_hweight64
F#arch/x86/lib/iomem.symtypes memcpy_fromio memcpy_toio
F#arch/x86/lib/memcpy_64.symtypes memcpy
F#arch/x86/lib/memmove_64.symtypes memmove
F#arch/x86/lib/memset_64.symtypes memset
F#arch/x86/lib/msr-smp.symtypes rdmsr_safe_on_cpu wrmsr_safe_on_cpu
F#arch/x86/lib/putuser.symtypes __put_user_2 __put_user_4 __put_user_8
F#arch/x86/lib/retpoline.symtypes __x86_indirect_thunk_r10 __x86_indirect_thunk_r11 __x86_indirect_thunk_r12 __x86_indirect_thunk_r13 __x86_indirect_thunk_r14 __x86_indirect_thunk_r15 __x86_indirect_thunk_r8 __x86_indirect_thunk_r9 __x86_indirect_thunk_rax __x86_indirect_thunk_rbx __x86_indirect_thunk_rcx __x86_indirect_thunk_rdi __x86_indirect_thunk_rdx __x86_indirect_thunk_rsi
F#arch/x86/mm/extable.symtypes ex_handler_default s#exception_table_entry@e46c8460
F#arch/x86/mm/init.symtypes cpu_tlbstate s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@2ba1f463 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#arch/x86/mm/init_64.symtypes __default_kernel_pte_mask
F#arch/x86/mm/ioremap.symtypes ioremap_nocache iounmap
F#arch/x86/mm/mem_encrypt.symtypes sme_me_mask
F#arch/x86/mm/numa.symtypes __node_distance node_to_cpumask_map s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#arch/x86/mm/pageattr.symtypes lookup_address s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#arch/x86/mm/pgtable.symtypes physical_mask
F#arch/x86/mm/physaddr.symtypes __virt_addr_valid
F#arch/x86/platform/uv/bios_uv.symtypes sn_coherency_id sn_partition_id sn_region_size uv_bios_call uv_type
F#arch/x86/platform/uv/uv_irq.symtypes uv_setup_irq uv_teardown_irq
F#block/bio-integrity.symtypes bio_integrity_add_page bio_integrity_alloc s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@3ad62766 s#blk_mq_alloc_data@d4c09bd3 s#blk_mq_ctx@1fedf6a6 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@94882faa s#blk_plug@804d8ff3 s#blk_stat_callback@153642c5 s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#block/bio.symtypes bio_add_page bio_alloc_bioset bio_endio bio_free_pages bio_init bio_put fs_bio_set s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@3ad62766 s#blk_mq_alloc_data@d4c09bd3 s#blk_mq_ctx@1fedf6a6 s#blk_mq_debugfs_attr@9913c52c s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@94882faa s#blk_plug@804d8ff3 s#blk_stat_callback@153642c5 s#blk_trace@cc1dd338 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@689a97e0 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@395a85b5 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#block/blk-core.symtypes blk_alloc_queue blk_cleanup_queue blk_finish_plug blk_get_request blk_put_request blk_queue_flag_clear blk_queue_flag_set blk_start_plug kblockd_mod_delayed_work_on s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@3ad62766 s#blk_mq_alloc_data@d4c09bd3 s#blk_mq_ctx@1fedf6a6 s#blk_mq_debugfs_attr@9913c52c s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@94882faa s#blk_plug@804d8ff3 s#blk_stat_callback@153642c5 s#blk_trace@cc1dd338 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@395a85b5 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d submit_bio
F#block/blk-exec.symtypes blk_execute_rq s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@3ad62766 s#blk_mq_alloc_data@d4c09bd3 s#blk_mq_ctx@1fedf6a6 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@94882faa s#blk_plug@804d8ff3 s#blk_stat_callback@153642c5 s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#block/blk-integrity.symtypes blk_integrity_compare s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@3ad62766 s#blk_mq_alloc_data@d4c09bd3 s#blk_mq_ctx@1fedf6a6 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@94882faa s#blk_plug@804d8ff3 s#blk_stat_callback@153642c5 s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@689a97e0 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#block/blk-lib.symtypes blkdev_issue_discard s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@3ad62766 s#blk_mq_alloc_data@d4c09bd3 s#blk_mq_ctx@1fedf6a6 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@94882faa s#blk_plug@804d8ff3 s#blk_stat_callback@153642c5 s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#block/blk-map.symtypes blk_rq_map_kern s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@3ad62766 s#blk_mq_alloc_data@d4c09bd3 s#blk_mq_ctx@1fedf6a6 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@94882faa s#blk_plug@804d8ff3 s#blk_stat_callback@153642c5 s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#block/blk-mq-tag.symtypes blk_mq_unique_tag s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@3ad62766 s#blk_mq_alloc_data@d4c09bd3 s#blk_mq_ctx@1fedf6a6 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@94882faa s#blk_plug@804d8ff3 s#blk_stat_callback@153642c5 s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#block/blk-mq.symtypes blk_mq_alloc_request blk_mq_alloc_tag_set blk_mq_complete_request blk_mq_end_request blk_mq_free_tag_set blk_mq_init_queue blk_mq_kick_requeue_list blk_mq_run_hw_queues blk_mq_start_request blk_mq_start_stopped_hw_queues blk_mq_stop_hw_queues blk_mq_tag_to_rq s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@3ad62766 s#blk_mq_alloc_data@d4c09bd3 s#blk_mq_ctx@1fedf6a6 s#blk_mq_debugfs_attr@9913c52c s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@94882faa s#blk_plug@804d8ff3 s#blk_stat_callback@153642c5 s#blk_trace@cc1dd338 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@395a85b5 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_eval_map@b76c02a9 s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#block/blk-settings.symtypes blk_queue_bounce_limit blk_queue_io_min blk_queue_io_opt blk_queue_logical_block_size blk_queue_make_request blk_queue_max_discard_sectors blk_queue_max_hw_sectors blk_queue_max_segments blk_queue_physical_block_size blk_queue_segment_boundary blk_queue_stack_limits blk_set_default_limits blk_stack_limits s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@3ad62766 s#blk_mq_alloc_data@d4c09bd3 s#blk_mq_ctx@1fedf6a6 s#blk_mq_debugfs_attr@9913c52c s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@94882faa s#blk_plug@804d8ff3 s#blk_stat_callback@153642c5 s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@395a85b5 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#block/bsg-lib.symtypes bsg_job_done s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@78ab9fcb s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#bsg_job@20bb26f8 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#block/genhd.symtypes __alloc_disk_node bdget_disk del_gendisk device_add_disk get_gendisk invalidate_partition put_disk register_blkdev s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@e8137038 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@3ad62766 s#blk_mq_alloc_data@d4c09bd3 s#blk_mq_ctx@1fedf6a6 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@94882faa s#blk_plug@804d8ff3 s#blk_stat_callback@153642c5 s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d set_disk_ro unregister_blkdev
F#block/partition-generic.symtypes bdevname s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@cc1dd338 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@320188e6 s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#block/scsi_ioctl.symtypes s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@78ab9fcb s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d scsi_cmd_ioctl scsi_req_init
F#drivers/acpi/acpica/utglobal.symtypes acpi_gbl_FADT
F#drivers/acpi/osl.symtypes acpi_os_map_memory acpi_os_unmap_memory
F#drivers/base/bus.symtypes bus_register bus_unregister s#acpi_device_id@e58a0b4f s#address_space@349a6ef4 s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dev_pagemap@ad17fee0 s#dev_pin_info@74d04f18 s#dev_pm_qos@99a04b89 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@eeec2887 s#dma_map_ops@b53ba484 s#driver_private@408764e2 s#exception_table_entry@8a548305 s#file@5dd0e54d s#files_struct@8536a667 s#fs_struct@b5890d40 s#ftrace_ret_stack@5d35a84f s#io_context@3741925f s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@f383e753 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vm_operations_struct@3620399f s#wake_irq@c4d4f412 s#ww_acquire_ctx@5198829a
F#drivers/base/core.symtypes __root_device_register _dev_err _dev_info _dev_warn dev_driver_string dev_printk dev_set_name device_create_file device_remove_file get_device put_device root_device_unregister s#Qdisc@ccf40764 s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#badblocks@7e65f071 s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@e60777b1 s#blk_plug@e2161b61 s#block_device_operations@e76b186a s#bpf_prog@3425efb4 s#btf_type@21423afe s#bucket_table@6a272079 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@99a04b89 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@eeec2887 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@408764e2 s#dsa_port@258bc0e4 s#dst_entry@d3e7ee36 s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@02b05148 s#fib_rules_ops@306a8a75 s#fib_table@c68738ba s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#garp_port@d7d34070 s#gendisk@5a9c6afa s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@fbc129b1 s#inet_hashinfo@b8c86004 s#inet_peer_base@34625d11 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@9f3c7244 s#ipv4_devconf@97093f25 s#ipv6_devconf@7893195b s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@957f97dc s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mini_Qdisc@6baae82b s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@397a4195 s#neigh_parms@3fe62c7d s#neighbour@8167d134 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@88a4c771 s#pid_namespace@987b78a4 s#pipe_inode_info@15860e0e s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8affdff9 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@25784684 s#subsys_private@f383e753 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@c4d4f412 s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_state@92682e23 s#xt_table@e8d708cb
F#drivers/base/devres.symtypes devm_kmalloc s#acpi_device_id@e58a0b4f s#address_space@349a6ef4 s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dev_pagemap@ad17fee0 s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@eeec2887 s#dma_map_ops@b53ba484 s#driver_private@408764e2 s#exception_table_entry@e46c8460 s#file@5dd0e54d s#files_struct@8536a667 s#fs_struct@b5890d40 s#ftrace_ret_stack@5d35a84f s#io_context@3741925f s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@f383e753 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vm_operations_struct@3620399f s#wake_irq@491e180a s#ww_acquire_ctx@5198829a
F#drivers/base/platform.symtypes __platform_driver_register e#irqchip_irq_state@56cb9417 platform_device_register platform_device_unregister platform_driver_unregister s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@99a04b89 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@eeec2887 s#dma_map_ops@32abb76b s#driver_private@408764e2 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_affinity_notify@7c091feb s#irq_data@93dca921 s#irq_domain@4f911733 s#irq_domain_chip_generic@67f6e6bd s#irqaction@d1da71ce s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mfd_cell@f317b0fa s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#msi_desc@9f5aa3f4 s#msi_msg@32144411 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#property_entry@ac14a6d4 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@f383e753 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@c4d4f412 s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#drivers/char/misc.symtypes misc_deregister misc_register s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@581f6d64 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#drivers/char/random.symtypes get_random_bytes s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#badblocks@7e65f071 s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@e60777b1 s#blk_plug@e2161b61 s#block_device_operations@e76b186a s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@3472311d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#drivers/cpufreq/cpufreq.symtypes cpufreq_quick_get s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@99a04b89 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#thermal_cooling_device@9311ae38 s#thermal_zone_device@3877063e s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_color_mgmt.symtypes drm_mode_crtc_set_gamma_size e#drm_mode_status@6248d25c s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_fence@7b78d61e s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@29b68afd s#drm_connector_helper_funcs@3c5b23fa s#drm_crtc@9c9d4a7a s#drm_crtc_commit@3e47b158 s#drm_crtc_helper_funcs@37d3f30d s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89b09d3d s#drm_encoder@293b3591 s#drm_fb_helper@dc5ca20c s#drm_file@49c1474e s#drm_format_info@cc8c824a s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_ioctl_desc@3f35714d s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@983d54ed s#drm_mode_config_helper_funcs@fb91c19d s#drm_pending_vblank_event@c8ec8e16 s#drm_plane_helper_funcs@1b5e7541 s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_property_blob@eb6b379a s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#drm_writeback_job@2e73e578 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#gpio_desc@b1bba9b1 s#hd_struct@1d7bc37c s#i2c_adapter@bce1d587 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@bad89e92 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_connector.symtypes drm_connector_attach_encoder drm_connector_cleanup drm_connector_init drm_connector_register drm_connector_unregister drm_connector_update_edid_property drm_mode_create_suggested_offset_properties e#drm_mode_status@6248d25c s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_fence@7b78d61e s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@29b68afd s#drm_connector_helper_funcs@3c5b23fa s#drm_crtc@9c9d4a7a s#drm_crtc_commit@3e47b158 s#drm_crtc_helper_funcs@37d3f30d s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89b09d3d s#drm_encoder@e709a8f3 s#drm_encoder_helper_funcs@b856403a s#drm_fb_helper@dc5ca20c s#drm_file@bb08bb79 s#drm_format_info@cc8c824a s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_ioctl_desc@f665e742 s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@cb6c1386 s#drm_mode_config_helper_funcs@fb91c19d s#drm_pending_vblank_event@c8ec8e16 s#drm_plane_helper_funcs@1b5e7541 s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_property_blob@eb6b379a s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#drm_writeback_job@2e73e578 s#edid@16d576b8 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#gpio_desc@b1bba9b1 s#hd_struct@1d7bc37c s#i2c_adapter@bce1d587 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_crtc.symtypes drm_crtc_cleanup e#drm_mode_status@6248d25c s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_fence@8e26171f s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@5fd79871 s#drm_connector_helper_funcs@3c5b23fa s#drm_crtc@9c9d4a7a s#drm_crtc_commit@1f5d7ca0 s#drm_crtc_helper_funcs@37d3f30d s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89b09d3d s#drm_encoder@293b3591 s#drm_fb_helper@dc5ca20c s#drm_file@bb08bb79 s#drm_format_info@6837d0de s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_ioctl_desc@f665e742 s#drm_local_map@bdecdd4c s#drm_master@6756e15d s#drm_minor@cb6c1386 s#drm_mode_config_helper_funcs@fb91c19d s#drm_pending_vblank_event@c8ec8e16 s#drm_plane_helper_funcs@1b5e7541 s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_property_blob@eb6b379a s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#drm_writeback_job@2e73e578 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#gpio_desc@b1bba9b1 s#hd_struct@1d7bc37c s#i2c_adapter@bce1d587 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_crtc_helper.symtypes drm_crtc_helper_set_config drm_helper_connector_dpms drm_helper_disable_unused_functions drm_helper_resume_force_mode e#drm_mode_status@6248d25c e#mode_set_atomic@f3a8e138 s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_fence@7b78d61e s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@5fd79871 s#drm_connector_helper_funcs@5fecad4f s#drm_crtc@9c9d4a7a s#drm_crtc_commit@1f5d7ca0 s#drm_crtc_helper_funcs@b225cf3a s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89b09d3d s#drm_encoder@e709a8f3 s#drm_encoder_helper_funcs@311eff43 s#drm_fb_helper@84ff80c8 s#drm_file@bb08bb79 s#drm_format_info@6837d0de s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_ioctl_desc@3f35714d s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@cb6c1386 s#drm_mode_config_helper_funcs@8d991067 s#drm_pending_vblank_event@ab3ce691 s#drm_plane_helper_funcs@e13aa34c s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_property_blob@eb6b379a s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@f9e3375d s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#drm_writeback_connector@2ba84383 s#drm_writeback_job@2e73e578 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#gpio_desc@b1bba9b1 s#hd_struct@1d7bc37c s#i2c_adapter@bce1d587 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_drv.symtypes drm_dev_alloc drm_dev_put drm_dev_register drm_dev_unregister e#drm_mode_status@6248d25c s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#audit_names@7d86a629 s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@29b68afd s#drm_device@f01f4e00 s#drm_device_dma@170ac67a s#drm_display_mode@371d70fe s#drm_driver@89b09d3d s#drm_fb_helper@dc5ca20c s#drm_file@bb08bb79 s#drm_format_info@cc8c824a s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_ioctl_desc@f665e742 s#drm_local_map@fe62129b s#drm_master@6756e15d s#drm_minor@cb6c1386 s#drm_mode_config_helper_funcs@fb91c19d s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_sg_mem@82c63c60 s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@a1a27c9b s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_edid.symtypes drm_add_modes_noedid e#drm_mode_status@6248d25c s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_fence@7b78d61e s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@29b68afd s#drm_connector_helper_funcs@3c5b23fa s#drm_crtc@9c9d4a7a s#drm_crtc_commit@3e47b158 s#drm_crtc_helper_funcs@37d3f30d s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89b09d3d s#drm_encoder@e709a8f3 s#drm_encoder_helper_funcs@b856403a s#drm_fb_helper@dc5ca20c s#drm_file@49c1474e s#drm_format_info@cc8c824a s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_ioctl_desc@3f35714d s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@983d54ed s#drm_mode_config_helper_funcs@fb91c19d s#drm_pending_vblank_event@c8ec8e16 s#drm_plane_helper_funcs@1b5e7541 s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_property_blob@eb6b379a s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#drm_writeback_job@2e73e578 s#edid@16d576b8 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#gpio_desc@b1bba9b1 s#hd_struct@1d7bc37c s#i2c_adapter@bce1d587 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@bad89e92 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_encoder.symtypes drm_encoder_cleanup drm_encoder_init e#drm_mode_status@6248d25c s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_fence@7b78d61e s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@29b68afd s#drm_connector_helper_funcs@3c5b23fa s#drm_crtc@9c9d4a7a s#drm_crtc_commit@3e47b158 s#drm_crtc_helper_funcs@37d3f30d s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89b09d3d s#drm_encoder@e709a8f3 s#drm_encoder_helper_funcs@b856403a s#drm_fb_helper@dc5ca20c s#drm_file@49c1474e s#drm_format_info@cc8c824a s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_ioctl_desc@3f35714d s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@983d54ed s#drm_mode_config_helper_funcs@fb91c19d s#drm_pending_vblank_event@c8ec8e16 s#drm_plane_helper_funcs@1b5e7541 s#drm_printer@36d43322 s#drm_property@c1a88f85 s#drm_property_blob@eb6b379a s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#drm_writeback_job@2e73e578 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#gpio_desc@b1bba9b1 s#hd_struct@1d7bc37c s#i2c_adapter@bce1d587 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sg_table@bad89e92 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_fb_helper.symtypes drm_fb_helper_alloc_fbi drm_fb_helper_blank drm_fb_helper_check_var drm_fb_helper_debug_enter drm_fb_helper_debug_leave drm_fb_helper_deferred_io drm_fb_helper_fill_info drm_fb_helper_fini drm_fb_helper_init drm_fb_helper_initial_config drm_fb_helper_pan_display drm_fb_helper_prepare drm_fb_helper_restore_fbdev_mode_unlocked drm_fb_helper_set_par drm_fb_helper_set_suspend_unlocked drm_fb_helper_setcmap drm_fb_helper_sys_copyarea drm_fb_helper_sys_fillrect drm_fb_helper_sys_imageblit drm_fb_helper_unregister_fbi e#drm_mode_status@6248d25c e#mode_set_atomic@f3a8e138 s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_buf@f15b8dec s#dma_buf_attachment@0ed4e87b s#dma_fence@8e26171f s#dma_map_ops@32abb76b s#dma_resv@5e7ab572 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@5fd79871 s#drm_connector_helper_funcs@5fecad4f s#drm_crtc@9c9d4a7a s#drm_crtc_commit@1f5d7ca0 s#drm_crtc_helper_funcs@b225cf3a s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89b09d3d s#drm_encoder@e709a8f3 s#drm_encoder_helper_funcs@311eff43 s#drm_fb_helper@84ff80c8 s#drm_file@bb08bb79 s#drm_format_info@6837d0de s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_ioctl_desc@f665e742 s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@cb6c1386 s#drm_mode_config_helper_funcs@8d991067 s#drm_pending_vblank_event@ab3ce691 s#drm_plane_helper_funcs@e13aa34c s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_property_blob@eb6b379a s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@f9e3375d s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#drm_writeback_connector@2ba84383 s#drm_writeback_job@2e73e578 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#gpio_desc@b1bba9b1 s#hd_struct@1d7bc37c s#i2c_adapter@bce1d587 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_file.symtypes drm_open drm_poll drm_read drm_release e#drm_mode_status@6248d25c s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_fence@8e26171f s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@29b68afd s#drm_device@f01f4e00 s#drm_device_dma@170ac67a s#drm_display_mode@371d70fe s#drm_driver@89b09d3d s#drm_fb_helper@dc5ca20c s#drm_file@bb08bb79 s#drm_format_info@cc8c824a s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_ioctl_desc@f665e742 s#drm_local_map@fe62129b s#drm_master@6756e15d s#drm_minor@cb6c1386 s#drm_mode_config_helper_funcs@fb91c19d s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_sg_mem@82c63c60 s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#hotplug_slot@1b7da886 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#msi_controller@89001ff4 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@2976ceb1 s#pci_sriov@8eb10e41 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_fourcc.symtypes drm_mode_legacy_fb_format e#drm_mode_status@79db3277 s#device@92fea4ff s#drm_agp_head@c33f2cd8 s#drm_atomic_state@29b68afd s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@4e593122 s#drm_driver@89de969d s#drm_fb_helper@dc5ca20c s#drm_file@49c1474e s#drm_format_info@6837d0de s#drm_framebuffer@f1c36731 s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@983d54ed s#drm_mode_config_helper_funcs@fb91c19d s#drm_property@390e68d7 s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#inode@1197d713 s#pci_dev@058da080 s#task_struct@1b9c735e s#ww_acquire_ctx@65179dfb
F#drivers/gpu/drm/drm_framebuffer.symtypes drm_framebuffer_cleanup drm_framebuffer_init drm_framebuffer_unregister_private e#drm_mode_status@6248d25c s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_fence@7b78d61e s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@5fd79871 s#drm_connector_helper_funcs@3c5b23fa s#drm_crtc@9c9d4a7a s#drm_crtc_commit@1f5d7ca0 s#drm_crtc_helper_funcs@37d3f30d s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89b09d3d s#drm_encoder@293b3591 s#drm_fb_helper@dc5ca20c s#drm_file@bb08bb79 s#drm_format_info@6837d0de s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_ioctl_desc@f665e742 s#drm_local_map@bdecdd4c s#drm_master@6756e15d s#drm_minor@cb6c1386 s#drm_mode_config_helper_funcs@fb91c19d s#drm_pending_vblank_event@c8ec8e16 s#drm_plane_helper_funcs@1b5e7541 s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_property_blob@eb6b379a s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#drm_writeback_job@2e73e578 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#gpio_desc@b1bba9b1 s#hd_struct@1d7bc37c s#i2c_adapter@bce1d587 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_gem.symtypes drm_gem_dumb_destroy drm_gem_handle_create drm_gem_object_init drm_gem_object_lookup drm_gem_object_put drm_gem_object_put_unlocked drm_gem_object_release e#drm_mode_status@79db3277 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_buf@f15b8dec s#dma_buf_attachment@0ed4e87b s#dma_fence@8e26171f s#dma_map_ops@32abb76b s#dma_resv@c4cd21aa s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@29b68afd s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@4e593122 s#drm_driver@89b09d3d s#drm_fb_helper@dc5ca20c s#drm_file@bb08bb79 s#drm_format_info@cc8c824a s#drm_framebuffer@f1c36731 s#drm_gem_object@377040dc s#drm_ioctl_desc@f665e742 s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@cb6c1386 s#drm_mode_config_helper_funcs@fb91c19d s#drm_printer@a70a8fdd s#drm_property@390e68d7 s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@4f294723 s#drm_vram_mm@01d83f01 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@65179dfb s#xattr_handler@7bf97ef7
F#drivers/gpu/drm/drm_ioc32.symtypes drm_compat_ioctl s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@b9bbae00 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_ioctl.symtypes drm_ioctl e#drm_mode_status@6248d25c s#acpi_device_id@9537f188 s#address_space@7671788d s#agp_bridge_data@d6b34e56 s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#drm_agp_head@ba365327 s#drm_atomic_state@29b68afd s#drm_device@f01f4e00 s#drm_device_dma@170ac67a s#drm_display_mode@371d70fe s#drm_driver@89b09d3d s#drm_fb_helper@dc5ca20c s#drm_file@bb08bb79 s#drm_format_info@cc8c824a s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_ioctl_desc@f665e742 s#drm_local_map@fe62129b s#drm_master@6756e15d s#drm_minor@cb6c1386 s#drm_mode_config_helper_funcs@fb91c19d s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_sg_mem@82c63c60 s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#hotplug_slot@1b7da886 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#msi_controller@89001ff4 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@2976ceb1 s#pci_sriov@8eb10e41 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_irq.symtypes drm_irq_install drm_irq_uninstall e#drm_mode_status@6248d25c s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@29b68afd s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89b09d3d s#drm_fb_helper@dc5ca20c s#drm_file@bb08bb79 s#drm_format_info@cc8c824a s#drm_framebuffer@f1c36731 s#drm_gem_object@0843e595 s#drm_ioctl_desc@f665e742 s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@cb6c1386 s#drm_mode_config_helper_funcs@fb91c19d s#drm_printer@a70a8fdd s#drm_property@390e68d7 s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@f9e3375d s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#hotplug_slot@1b7da886 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#msi_controller@89001ff4 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@2976ceb1 s#pci_sriov@8eb10e41 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_mode_config.symtypes drm_mode_config_cleanup drm_mode_config_init drm_mode_config_reset e#drm_mode_status@6248d25c s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@29b68afd s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89b09d3d s#drm_fb_helper@dc5ca20c s#drm_file@bb08bb79 s#drm_format_info@cc8c824a s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_ioctl_desc@f665e742 s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@cb6c1386 s#drm_mode_config_helper_funcs@fb91c19d s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_mode_object.symtypes drm_mode_object_find drm_object_attach_property drm_object_property_set_value e#drm_mode_status@6248d25c s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_fence@7b78d61e s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@5fd79871 s#drm_connector_helper_funcs@3c5b23fa s#drm_crtc@9c9d4a7a s#drm_crtc_commit@1f5d7ca0 s#drm_crtc_helper_funcs@37d3f30d s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89b09d3d s#drm_encoder@293b3591 s#drm_fb_helper@dc5ca20c s#drm_file@bb08bb79 s#drm_format_info@cc8c824a s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_ioctl_desc@3f35714d s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@cb6c1386 s#drm_mode_config_helper_funcs@fb91c19d s#drm_pending_vblank_event@c8ec8e16 s#drm_plane_helper_funcs@1b5e7541 s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_property_blob@eb6b379a s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#drm_writeback_job@2e73e578 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#gpio_desc@b1bba9b1 s#hd_struct@1d7bc37c s#i2c_adapter@bce1d587 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_modes.symtypes drm_cvt_mode drm_mode_destroy drm_mode_probed_add e#drm_mode_status@6248d25c s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_fence@7b78d61e s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@29b68afd s#drm_connector_helper_funcs@3c5b23fa s#drm_crtc@9c9d4a7a s#drm_crtc_commit@3e47b158 s#drm_crtc_helper_funcs@37d3f30d s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89de969d s#drm_encoder@293b3591 s#drm_fb_helper@dc5ca20c s#drm_file@49c1474e s#drm_format_info@cc8c824a s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@983d54ed s#drm_mode_config_helper_funcs@fb91c19d s#drm_pending_vblank_event@c8ec8e16 s#drm_plane_helper_funcs@1b5e7541 s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_property_blob@eb6b379a s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#drm_writeback_job@2e73e578 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#gpio_desc@b1bba9b1 s#hd_struct@1d7bc37c s#i2c_adapter@bce1d587 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_modeset_helper.symtypes drm_crtc_init drm_helper_mode_fill_fb_struct e#drm_mode_status@6248d25c e#mode_set_atomic@f3a8e138 s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_fence@7b78d61e s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@29b68afd s#drm_connector_helper_funcs@5fecad4f s#drm_crtc@9c9d4a7a s#drm_crtc_commit@3e47b158 s#drm_crtc_helper_funcs@b225cf3a s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89de969d s#drm_encoder@e709a8f3 s#drm_encoder_helper_funcs@311eff43 s#drm_fb_helper@84ff80c8 s#drm_file@49c1474e s#drm_format_info@6837d0de s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@983d54ed s#drm_mode_config_helper_funcs@8d991067 s#drm_pending_vblank_event@c8ec8e16 s#drm_plane_helper_funcs@e13aa34c s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_property_blob@eb6b379a s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#drm_writeback_connector@2ba84383 s#drm_writeback_job@2e73e578 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#gpio_desc@b1bba9b1 s#hd_struct@1d7bc37c s#i2c_adapter@bce1d587 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_modeset_lock.symtypes drm_modeset_lock_all drm_modeset_unlock_all e#drm_mode_status@6248d25c s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_fence@7b78d61e s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@5fd79871 s#drm_connector_helper_funcs@3c5b23fa s#drm_crtc@9c9d4a7a s#drm_crtc_commit@1f5d7ca0 s#drm_crtc_helper_funcs@37d3f30d s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89de969d s#drm_encoder@293b3591 s#drm_fb_helper@dc5ca20c s#drm_file@49c1474e s#drm_format_info@cc8c824a s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@983d54ed s#drm_mode_config_helper_funcs@fb91c19d s#drm_pending_vblank_event@c8ec8e16 s#drm_plane_helper_funcs@1b5e7541 s#drm_printer@36d43322 s#drm_property@c1a88f85 s#drm_property_blob@eb6b379a s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#drm_writeback_job@2e73e578 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#gpio_desc@b1bba9b1 s#hd_struct@1d7bc37c s#i2c_adapter@bce1d587 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_prime.symtypes drm_gem_prime_export drm_gem_prime_fd_to_handle drm_gem_prime_handle_to_fd drm_gem_prime_import e#drm_mode_status@79db3277 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_buf@f15b8dec s#dma_buf_attachment@0ed4e87b s#dma_fence@8e26171f s#dma_map_ops@32abb76b s#dma_resv@c4cd21aa s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@29b68afd s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@4e593122 s#drm_driver@89b09d3d s#drm_fb_helper@dc5ca20c s#drm_file@bb08bb79 s#drm_format_info@cc8c824a s#drm_framebuffer@893ba53b s#drm_gem_object@377040dc s#drm_ioctl_desc@f665e742 s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@cb6c1386 s#drm_mode_config_helper_funcs@fb91c19d s#drm_printer@a70a8fdd s#drm_property@390e68d7 s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@4f294723 s#drm_vram_mm@01d83f01 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_print.symtypes drm_dbg drm_err s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_printer@a70a8fdd s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_probe_helper.symtypes drm_helper_probe_single_connector_modes drm_kms_helper_hotplug_event drm_kms_helper_poll_disable drm_kms_helper_poll_enable e#drm_mode_status@6248d25c e#mode_set_atomic@f3a8e138 s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_fence@7b78d61e s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@29b68afd s#drm_connector_helper_funcs@5fecad4f s#drm_crtc@9c9d4a7a s#drm_crtc_commit@3e47b158 s#drm_crtc_helper_funcs@b225cf3a s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89de969d s#drm_encoder@e709a8f3 s#drm_encoder_helper_funcs@311eff43 s#drm_fb_helper@84ff80c8 s#drm_file@49c1474e s#drm_format_info@6837d0de s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@983d54ed s#drm_mode_config_helper_funcs@8d991067 s#drm_pending_vblank_event@c8ec8e16 s#drm_plane_helper_funcs@e13aa34c s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_property_blob@eb6b379a s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@96724d0b s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#drm_writeback_connector@2ba84383 s#drm_writeback_job@2e73e578 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#gpio_desc@b1bba9b1 s#hd_struct@1d7bc37c s#i2c_adapter@bce1d587 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/drm_vblank.symtypes drm_crtc_send_vblank_event e#drm_mode_status@6248d25c s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_fence@7b78d61e s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#drm_agp_head@c33f2cd8 s#drm_atomic_state@29b68afd s#drm_connector_helper_funcs@3c5b23fa s#drm_crtc@9c9d4a7a s#drm_crtc_commit@3e47b158 s#drm_crtc_helper_funcs@37d3f30d s#drm_device@f01f4e00 s#drm_device_dma@f324333c s#drm_display_mode@371d70fe s#drm_driver@89b09d3d s#drm_encoder@293b3591 s#drm_fb_helper@dc5ca20c s#drm_file@bb08bb79 s#drm_format_info@cc8c824a s#drm_framebuffer@893ba53b s#drm_gem_object@0843e595 s#drm_ioctl_desc@f665e742 s#drm_local_map@bdecdd4c s#drm_master@50c9739b s#drm_minor@cb6c1386 s#drm_mode_config_helper_funcs@fb91c19d s#drm_pending_vblank_event@ab3ce691 s#drm_plane_helper_funcs@1b5e7541 s#drm_printer@a70a8fdd s#drm_property@c1a88f85 s#drm_property_blob@eb6b379a s#drm_sg_mem@51d33cdd s#drm_vblank_crtc@f9e3375d s#drm_vma_offset_manager@a5667b87 s#drm_vram_mm@01d83f01 s#drm_writeback_job@2e73e578 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#gpio_desc@b1bba9b1 s#hd_struct@1d7bc37c s#i2c_adapter@bce1d587 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@058da080 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@b76c02a9 s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d
F#drivers/gpu/drm/ttm/ttm_bo.symtypes s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_fence@8e26171f s#dma_resv@c4cd21aa s#drm_device@2410e563 s#drm_file@49c1474e s#drm_gem_object@377040dc s#drm_printer@a70a8fdd s#drm_vma_offset_manager@4f294723 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@bad89e92 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d ttm_bo_add_to_lru ttm_bo_del_sub_from_lru ttm_bo_device_init ttm_bo_device_release ttm_bo_dma_acc_size ttm_bo_eviction_valuable ttm_bo_init ttm_bo_init_mm ttm_bo_move_to_lru_tail ttm_bo_put ttm_bo_validate
F#drivers/gpu/drm/ttm/ttm_bo_manager.symtypes s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_fence@8e26171f s#dma_resv@c4cd21aa s#drm_device@2410e563 s#drm_file@49c1474e s#drm_gem_object@377040dc s#drm_printer@a70a8fdd s#drm_vma_offset_manager@4f294723 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@bad89e92 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d ttm_bo_manager_func
F#drivers/gpu/drm/ttm/ttm_bo_util.symtypes s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_fence@8e26171f s#dma_resv@c4cd21aa s#drm_device@2410e563 s#drm_file@49c1474e s#drm_gem_object@377040dc s#drm_printer@a70a8fdd s#drm_vma_offset_manager@4f294723 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@bad89e92 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d ttm_bo_kmap ttm_bo_kunmap
F#drivers/gpu/drm/ttm/ttm_bo_vm.symtypes s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_fence@8e26171f s#dma_resv@c4cd21aa s#drm_device@2410e563 s#drm_file@49c1474e s#drm_gem_object@377040dc s#drm_printer@a70a8fdd s#drm_vma_offset_manager@4f294723 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@bad89e92 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@65179dfb s#xattr_handler@16eddf4d ttm_bo_mmap
F#drivers/gpu/drm/ttm/ttm_tt.symtypes s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_buf@6a611902 s#dma_buf_attachment@a5b0fd3f s#dma_fence@8e26171f s#dma_map_ops@b53ba484 s#dma_resv@c4cd21aa s#driver_private@80bd9a0c s#drm_device@2410e563 s#drm_file@49c1474e s#drm_gem_object@377040dc s#drm_printer@a70a8fdd s#drm_vma_offset_manager@4f294723 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@689a97e0 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@65179dfb s#xattr_handler@7bf97ef7 ttm_tt_fini ttm_tt_init
F#drivers/input/input.symtypes input_allocate_device input_event input_free_device input_register_device input_set_abs_params input_unregister_device s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#input_dev@23cd9473 s#input_mt@4b7f3470 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#drivers/nvme/host/fc.symtypes nvme_fc_register_localport nvme_fc_register_remoteport nvme_fc_set_remoteport_devloss nvme_fc_unregister_localport nvme_fc_unregister_remoteport s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@78ab9fcb s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@cc1dd338 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#bucket_table@6a272079 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@581f6d64 s#cfs_rq@b985a5b8 s#cgroup_namespace@b9b52aeb s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dst_entry@d3e7ee36 s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@02b05148 s#fib_rules_ops@306a8a75 s#fib_table@c68738ba s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#inet_hashinfo@b8c86004 s#inet_peer_base@34625d11 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@9f3c7244 s#ipv4_devconf@97093f25 s#ipv6_devconf@7893195b s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_route@6bce9b55 s#mtd_info@8095bfdb s#neighbour@8167d134 s#net@13fb33f5 s#net_device@f8d214a7 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@43548338 s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#trace_eval_map@b76c02a9 s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@ce8044bf s#user_namespace@e4129c73 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xt_table@e8d708cb
F#drivers/pci/access.symtypes pci_read_config_word pcie_capability_clear_and_set_word s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#hotplug_slot@1b7da886 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#msi_controller@89001ff4 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@2976ceb1 s#pci_sriov@b84c07c7 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#drivers/pci/iov.symtypes pci_disable_sriov pci_enable_sriov s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#hotplug_slot@1b7da886 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#msi_controller@89001ff4 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@2976ceb1 s#pci_sriov@b84c07c7 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#drivers/pci/msi.symtypes e#irqchip_irq_state@8b3c971d pci_alloc_irq_vectors_affinity pci_disable_msix pci_enable_msix_range pci_free_irq_vectors pci_irq_vector s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#hotplug_slot@1b7da886 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_affinity@5ea67367 s#irq_affinity_desc@fe1e4133 s#irq_affinity_notify@2a9cac88 s#irq_data@93dca921 s#irq_domain@4f911733 s#irq_domain_chip_generic@67f6e6bd s#irqaction@ba286ba9 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#msi_controller@6e4dfcd1 s#msi_desc@d0a9f3ca s#msi_msg@32c26c35 s#msix_entry@354c1fd8 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@2976ceb1 s#pci_sriov@b84c07c7 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#drivers/pci/pci-driver.symtypes __pci_register_driver pci_unregister_driver s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#hotplug_slot@1b7da886 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#msi_controller@89001ff4 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#pci_dev@2976ceb1 s#pci_sriov@b84c07c7 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#drivers/pci/pci.symtypes pci_choose_state pci_disable_device pci_enable_device pci_enable_device_mem pci_find_ext_capability pci_release_regions pci_request_regions pci_restore_state pci_save_state pci_set_master pci_set_power_state s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#hotplug_slot@83c3bbce s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_affinity_desc@fe1e4133 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#msi_controller@6e4dfcd1 s#msi_desc@d0a9f3ca s#msi_msg@32c26c35 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@2976ceb1 s#pci_sriov@b84c07c7 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#drivers/scsi/hosts.symtypes s#Scsi_Host@87e10e66 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@78ab9fcb s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#scsi_cmnd@59823f46 s#scsi_device@3f7150d7 s#scsi_device_handler@2fa82fb9 s#scsi_target@ee547d1b s#scsi_transport_template@4cdd7909 s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d scsi_add_host_with_dma scsi_host_alloc scsi_host_put scsi_is_host_device scsi_remove_host
F#drivers/scsi/scsi.symtypes s#Scsi_Host@87e10e66 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@78ab9fcb s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#scsi_cmnd@d2143453 s#scsi_device@3f7150d7 s#scsi_device_handler@2fa82fb9 s#scsi_target@ee547d1b s#scsi_transport_template@45ac62e3 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d scsi_change_queue_depth scsi_device_get scsi_device_put
F#drivers/scsi/scsi_common.symtypes int_to_scsilun scsi_build_sense_buffer scsi_device_type scsi_normalize_sense
F#drivers/scsi/scsi_lib.symtypes s#Scsi_Host@87e10e66 s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@78ab9fcb s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#scsi_cmnd@d2143453 s#scsi_device@3f7150d7 s#scsi_device_handler@43a42425 s#scsi_target@ee547d1b s#scsi_transport_template@4cdd7909 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d scsi_block_requests scsi_unblock_requests
F#drivers/scsi/scsi_lib_dma.symtypes s#Scsi_Host@87e10e66 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@78ab9fcb s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#scsi_cmnd@d2143453 s#scsi_device@3f7150d7 s#scsi_device_handler@2fa82fb9 s#scsi_target@ee547d1b s#scsi_transport_template@45ac62e3 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d scsi_dma_map scsi_dma_unmap
F#drivers/scsi/scsi_scan.symtypes s#Scsi_Host@87e10e66 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@78ab9fcb s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#scsi_cmnd@d2143453 s#scsi_device@3f7150d7 s#scsi_device_handler@43a42425 s#scsi_target@ee547d1b s#scsi_transport_template@4cdd7909 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d scsi_add_device
F#drivers/scsi/scsi_sysfs.symtypes s#Scsi_Host@87e10e66 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@78ab9fcb s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#scsi_cmnd@d2143453 s#scsi_device@3f7150d7 s#scsi_device_handler@43a42425 s#scsi_target@ee547d1b s#scsi_transport_template@4cdd7909 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d scsi_is_sdev_device scsi_remove_device
F#drivers/scsi/scsi_transport_fc.symtypes fc_attach_transport fc_block_scsi_eh fc_eh_timed_out fc_get_event_number fc_host_post_event fc_release_transport fc_remote_port_add fc_remote_port_delete fc_remove_host s#Scsi_Host@87e10e66 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@78ab9fcb s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#bsg_job@20bb26f8 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@b9b52aeb s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@15860e0e s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#scsi_cmnd@d2143453 s#scsi_device@3f7150d7 s#scsi_device_handler@2fa82fb9 s#scsi_target@ee547d1b s#scsi_transport_template@4cdd7909 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@43548338 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#user_namespace@e4129c73 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d scsi_is_fc_rport
F#drivers/scsi/scsi_transport_sas.symtypes s#Scsi_Host@87e10e66 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@c9d2e390 s#blk_mq_ops@af0c83e7 s#blk_mq_tag_set@7fcc4b92 s#blk_mq_tags@78ab9fcb s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#bsg_job@20bb26f8 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#scsi_cmnd@d2143453 s#scsi_device@3f7150d7 s#scsi_device_handler@2fa82fb9 s#scsi_target@ee547d1b s#scsi_transport_template@4cdd7909 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d sas_attach_transport sas_end_device_alloc sas_expander_alloc sas_phy_add sas_phy_alloc sas_phy_delete sas_port_add sas_port_add_phy sas_port_alloc_num sas_port_delete sas_port_delete_phy sas_port_free sas_release_transport sas_rphy_add
F#drivers/scsi/scsicam.symtypes s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d57e740 s#block_device_operations@08e6d986 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_subsys_state@9592e946 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d scsicam_bios_param
F#drivers/tty/tty_io.symtypes s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@581f6d64 s#cfs_rq@b985a5b8 s#cgroup_namespace@b9b52aeb s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@bbbe635b s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#serial_icounter_struct@07c098b2 s#serial_struct@e37eacf1 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@43548338 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@950549ed s#user_namespace@e4129c73 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d tty_kref_put tty_name
F#drivers/tty/tty_jobctrl.symtypes get_current_tty s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@581f6d64 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#serial_icounter_struct@d94a6582 s#serial_struct@0187e4b2 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@43548338 s#tty_struct@950549ed s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#drivers/video/console/vgacon.symtypes s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@581f6d64 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#serial_icounter_struct@d94a6582 s#serial_struct@0187e4b2 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@950549ed s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d vgacon_text_force
F#drivers/video/fbdev/core/fb_defio.symtypes fb_deferred_io_cleanup fb_deferred_io_init s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@84d343d7 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/attr.symtypes inode_newsize_ok notify_change s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@b9b52aeb s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1c585393 s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@b9bbae00 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@43548338 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@7bf97ef7 setattr_prepare
F#fs/bad_inode.symtypes is_bad_inode s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#key@3d33306b s#kmem_cache@bb73f614 s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/block_dev.symtypes bd_set_size bdget bdput blkdev_get blkdev_get_by_dev blkdev_get_by_path blkdev_put freeze_bdev invalidate_bdev ioctl_by_bdev lookup_bdev revalidate_disk s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#audit_names@7d86a629 s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@34d57cc8 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@a1a27c9b s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iomap@3288b49c s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d sb_set_blocksize set_blocksize thaw_bdev
F#fs/buffer.symtypes __bread_gfp __brelse __set_page_dirty_buffers free_buffer_head invalidate_inode_buffers nobh_truncate_page nobh_write_begin nobh_write_end nobh_writepage s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@cc1dd338 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/char_dev.symtypes __register_chrdev __unregister_chrdev alloc_chrdev_region cdev_add cdev_del cdev_init register_chrdev_region s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@581f6d64 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d unregister_chrdev_region
F#fs/d_path.symtypes d_path dentry_path_raw s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@7d6db402 s#fs_struct@9e826f8c s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@ac4fda29 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/dcache.symtypes d_add d_alloc d_drop d_find_alias d_instantiate d_invalidate d_lookup d_make_root d_move d_obtain_alias d_prune_aliases d_set_d_op d_splice_alias dget_parent dput names_cachep s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@b9b52aeb s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@7d6db402 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@929b13ee s#fsnotify_mark_connector@1c585393 s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@ac4fda29 s#module@689a97e0 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@43548338 s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@a6dd4e37 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/debugfs/file.symtypes debugfs_create_u32 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/debugfs/inode.symtypes debugfs_create_dir debugfs_create_file debugfs_remove s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@b9b52aeb s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1c585393 s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@43548338 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/exec.symtypes __register_binfmt s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@bbbe635b s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@9e826f8c s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1c585393 s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@b304f10d s#linux_binfmt@c068fab7 s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@2ba1f463 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@3472311d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d unregister_binfmt
F#fs/fcntl.symtypes fasync_helper kill_fasync s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@bbbe635b s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/file.symtypes __close_fd __fdget fget s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@bbbe635b s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/file_table.symtypes alloc_file_pseudo fput s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@581f6d64 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@bbbe635b s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1c585393 s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/filesystems.symtypes register_filesystem s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#audit_names@7d86a629 s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@a1a27c9b s#fs_parameter_description@4f0d202c s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d unregister_filesystem
F#fs/fs-writeback.symtypes __mark_inode_dirty s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d write_inode_now
F#fs/inode.symtypes __insert_inode_hash __remove_inode_hash address_space_init_once clear_inode drop_nlink iget5_locked iget_locked igrab ilookup inc_nlink init_special_inode inode_init_once iput iunique new_inode s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@581f6d64 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1c585393 s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@689a97e0 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@69f88c1a s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@a6dd4e37 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d set_nlink touch_atime unlock_new_inode
F#fs/ioctl.symtypes fiemap_check_flags fiemap_fill_next_extent generic_block_fiemap s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/libfs.symtypes __generic_file_fsync generic_read_dir kfree_link memory_read_from_buffer s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#audit_names@7d86a629 s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#export_operations@34d57cc8 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@a1a27c9b s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iomap@3288b49c s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@3663e9fd s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@689a97e0 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@a6dd4e37 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d simple_read_from_buffer simple_write_begin simple_write_end simple_write_to_buffer
F#fs/locks.symtypes __break_lease locks_init_lock locks_lock_inode_wait posix_lock_file posix_test_lock s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@bbbe635b s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/mpage.symtypes mpage_readpage mpage_readpages mpage_writepages s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#export_operations@34d57cc8 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iomap@3288b49c s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@689a97e0 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/namei.symtypes done_path_create follow_down_one full_name_hash generic_permission inode_permission kern_path kern_path_create lock_rename lookup_one_len path_get path_put s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@e60777b1 s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#bucket_table@6a272079 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dst_entry@d3e7ee36 s#ebt_table@e2db16e1 s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@02b05148 s#fib_rules_ops@306a8a75 s#fib_table@c68738ba s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@7d6db402 s#fs_struct@9e826f8c s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1c585393 s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#in6_addr@52a16b22 s#inet_hashinfo@b8c86004 s#inet_peer_base@34625d11 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@9f3c7244 s#ipv4_devconf@97093f25 s#ipv6_devconf@7893195b s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@ac4fda29 s#module@21b68714 s#module_kobject@091e288e s#mpls_route@6bce9b55 s#mtd_info@8095bfdb s#neighbour@8167d134 s#net@13fb33f5 s#net_device@f8d214a7 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@69f88c1a s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@3472311d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xt_table@e8d708cb unlock_rename vfs_create vfs_get_link vfs_link vfs_mkdir vfs_mknod vfs_rename vfs_rmdir vfs_symlink vfs_unlink
F#fs/namespace.symtypes mntget mntput s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#audit_names@7d86a629 s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@a1a27c9b s#fs_parameter_description@71ccdead s#fs_pin@7d6db402 s#fs_struct@9e826f8c s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1c585393 s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@ac4fda29 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@805c1444 s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@7bf97ef7
F#fs/nls/nls_base.symtypes load_nls s#anon_vma@ca7d7321 s#exception_table_entry@8a548305 s#file@5dd0e54d s#kernfs_iattrs@58e69d36 s#kobject@bfa79cfb s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#poll_table_struct@ff0e459e s#seq_file@9afb65e4 s#sock@25784684 s#task_struct@1b9c735e s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vm_operations_struct@3620399f unload_nls utf32_to_utf8 utf8_to_utf32
F#fs/open.symtypes dentry_open filp_close filp_open finish_no_open finish_open generic_file_open s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@581f6d64 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@bbbe635b s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@9e826f8c s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1c585393 s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#serial_icounter_struct@d94a6582 s#serial_struct@0187e4b2 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@950549ed s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/proc/generic.symtypes PDE_DATA proc_create proc_create_data proc_mkdir proc_remove remove_proc_entry s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@c068fab7 s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@c35e0eb9 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/read_write.symtypes default_llseek fixed_size_llseek generic_file_llseek kernel_read kernel_write no_llseek noop_llseek s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1c585393 s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d vfs_iter_read vfs_iter_write vfs_llseek
F#fs/readdir.symtypes iterate_dir s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1c585393 s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/seq_file.symtypes s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d seq_escape seq_lseek seq_open seq_printf seq_putc seq_puts seq_read seq_release single_open single_release
F#fs/splice.symtypes generic_file_splice_read iter_file_splice_write s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#fs/stat.symtypes generic_fillattr s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d vfs_getattr
F#fs/super.symtypes deactivate_locked_super drop_super get_super kill_anon_super kill_block_super mount_bdev mount_nodev s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#audit_names@7d86a629 s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#export_operations@34d57cc8 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@a1a27c9b s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@929b13ee s#fsnotify_mark_connector@1c585393 s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iomap@3288b49c s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@689a97e0 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@a6dd4e37 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d set_anon_super sget super_setup_bdi super_setup_bdi_name
F#fs/sync.symtypes s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d vfs_fsync vfs_fsync_range
F#fs/sysfs/file.symtypes s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#exception_table_entry@8a548305 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d sysfs_create_bin_file sysfs_remove_bin_file
F#fs/xattr.symtypes __vfs_getxattr __vfs_removexattr s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1c585393 s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@69f88c1a s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@7bf97ef7
F#init/init_task.symtypes init_task s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@e60777b1 s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#bucket_table@6a272079 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@b9b52aeb s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dst_entry@d3e7ee36 s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@02b05148 s#fib_rules_ops@306a8a75 s#fib_table@c68738ba s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#in6_addr@52a16b22 s#inet_hashinfo@b8c86004 s#inet_peer_base@34625d11 s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@b9bbae00 s#ip_ra_chain@9f3c7244 s#ipv4_devconf@97093f25 s#ipv6_devconf@7893195b s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_route@6bce9b55 s#mtd_info@8095bfdb s#neighbour@8167d134 s#net@13fb33f5 s#net_device@f8d214a7 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@43548338 s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@3472311d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xt_table@e8d708cb
F#init/main.symtypes reset_devices
F#kernel/capability.symtypes capable s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#kernel/cpu.symtypes __cpu_active_mask __cpu_online_mask __cpu_possible_mask __cpu_present_mask __cpuhp_remove_state __cpuhp_setup_state __num_online_cpus cpu_bit_bitmap
F#kernel/crash_dump.symtypes elfcorehdr_addr
F#kernel/cred.symtypes __put_cred override_creds prepare_creds revert_creds s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@e60777b1 s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#bucket_table@6a272079 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@b9b52aeb s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dst_entry@d3e7ee36 s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@02b05148 s#fib_rules_ops@306a8a75 s#fib_table@c68738ba s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#in6_addr@52a16b22 s#inet_hashinfo@b8c86004 s#inet_peer_base@34625d11 s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@b9bbae00 s#ip_ra_chain@9f3c7244 s#ipv4_devconf@97093f25 s#ipv6_devconf@7893195b s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@c068fab7 s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_route@6bce9b55 s#mtd_info@8095bfdb s#neighbour@8167d134 s#net@13fb33f5 s#net_device@f8d214a7 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@43548338 s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@3472311d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xt_table@e8d708cb
F#kernel/dma/direct.symtypes dma_direct_map_page dma_direct_unmap_page s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#kernel/dma/mapping.symtypes dma_alloc_attrs dma_free_attrs dma_set_coherent_mask dma_set_mask s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_data@d5e32130 s#irq_domain@4f911733 s#irq_domain_chip_generic@a950c4c2 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#kernel/events/core.symtypes perf_trace_run_bpf_submit s#Qdisc@a8f71573 s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@e60777b1 s#blk_plug@e2161b61 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@d3e7ee36 s#ebt_table@e2db16e1 s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@02b05148 s#fib_rules_ops@306a8a75 s#fib_table@c68738ba s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#garp_port@d7d34070 s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@fbc129b1 s#inet_hashinfo@b8c86004 s#inet_peer_base@34625d11 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@9f3c7244 s#ipv4_devconf@97093f25 s#ipv6_devconf@7893195b s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@957f97dc s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@397a4195 s#neigh_parms@3fe62c7d s#neighbour@8167d134 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@504ec6af s#perf_event_context@da95161d s#phy_device@88a4c771 s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#proc_ns_operations@805c1444 s#qdisc_walker@0594779d s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@e56f3513 s#robust_list_head@0e27a833 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_state@92682e23 s#xt_table@e8d708cb
F#kernel/exit.symtypes complete_and_exit do_exit s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#bucket_table@6a272079 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@581f6d64 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dst_entry@d3e7ee36 s#ebt_table@e2db16e1 s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@02b05148 s#fib_rules_ops@306a8a75 s#fib_table@c68738ba s#file@fb39ac8a s#file_operations@85658159 s#files_struct@bbbe635b s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@9e826f8c s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#inet_hashinfo@b8c86004 s#inet_peer_base@34625d11 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@9f3c7244 s#ipv4_devconf@97093f25 s#ipv6_devconf@7893195b s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@b304f10d s#linux_binfmt@c068fab7 s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_route@6bce9b55 s#mtd_info@8095bfdb s#neighbour@8167d134 s#net@13fb33f5 s#net_device@f8d214a7 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@eb94c81f s#rq_qos@0cb844b7 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#serial_icounter_struct@d94a6582 s#serial_struct@0187e4b2 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@13bb9f30 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@950549ed s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@3472311d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xt_table@e8d708cb
F#kernel/fork.symtypes __mmdrop get_task_mm mmput s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@84d343d7 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@581f6d64 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@bbbe635b s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@9e826f8c s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@b304f10d s#linux_binfmt@c068fab7 s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@2ba1f463 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@eb94c81f s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#serial_icounter_struct@d94a6582 s#serial_struct@0187e4b2 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@13bb9f30 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@950549ed s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#kernel/groups.symtypes in_egroup_p in_group_p s#cred@87f3888e s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#proc_ns_operations@d97ed1ec s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87
F#kernel/irq/irqdesc.symtypes e#irqchip_irq_state@8b3c971d irq_to_desc s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_affinity_desc@fe1e4133 s#irq_affinity_notify@2a9cac88 s#irq_data@93dca921 s#irq_domain@4f911733 s#irq_domain_chip_generic@67f6e6bd s#irqaction@ba286ba9 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#msi_desc@9f5aa3f4 s#msi_msg@32144411 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#kernel/irq/manage.symtypes e#irqchip_irq_state@8b3c971d free_irq irq_set_affinity_hint request_threaded_irq s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#irq_affinity_notify@2a9cac88 s#irqaction@ba286ba9 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d synchronize_irq
F#kernel/kallsyms.symtypes kallsyms_lookup_name kallsyms_on_each_symbol s#Qdisc@a8f71573 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@e60777b1 s#blk_plug@e2161b61 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@d3e7ee36 s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@02b05148 s#fib_rules_ops@306a8a75 s#fib_table@c68738ba s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@54b523fb s#garp_port@d7d34070 s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@fbc129b1 s#inet_hashinfo@b8c86004 s#inet_peer_base@34625d11 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@9f3c7244 s#ipv4_devconf@97093f25 s#ipv6_devconf@7893195b s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@957f97dc s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@397a4195 s#neigh_parms@3fe62c7d s#neighbour@8167d134 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@88a4c771 s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@0594779d s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_state@92682e23 s#xt_table@e8d708cb sprint_symbol
F#kernel/kmod.symtypes __request_module
F#kernel/kthread.symtypes kthread_create_on_node kthread_should_stop kthread_stop s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@c068fab7 s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@689a97e0 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#kernel/locking/mutex.symtypes __mutex_init mutex_is_locked mutex_trylock mutex_unlock s#address_space@349a6ef4 s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dev_pagemap@ad17fee0 s#file@5dd0e54d s#files_struct@8536a667 s#fs_struct@b5890d40 s#ftrace_ret_stack@5d35a84f s#io_context@3741925f s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#pollfd@9600d34e s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@43548338 s#tty_struct@71ff2bce s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@a6dd4e37 s#vm_operations_struct@3620399f s#ww_acquire_ctx@65179dfb ww_mutex_lock_interruptible ww_mutex_unlock
F#kernel/locking/rwsem.symtypes __init_rwsem down_read down_read_trylock down_write down_write_trylock downgrade_write up_read up_write
F#kernel/locking/semaphore.symtypes down down_interruptible up
F#kernel/locking/spinlock.symtypes _raw_read_lock _raw_read_lock_bh _raw_read_lock_irqsave _raw_read_unlock_bh _raw_read_unlock_irqrestore _raw_spin_lock _raw_spin_lock_bh _raw_spin_lock_irq _raw_spin_lock_irqsave _raw_spin_trylock _raw_spin_unlock_bh _raw_spin_unlock_irqrestore _raw_write_lock _raw_write_lock_bh _raw_write_lock_irqsave _raw_write_unlock_bh _raw_write_unlock_irqrestore
F#kernel/module.symtypes __module_get module_put s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@b304f10d s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d try_module_get
F#kernel/panic.symtypes __stack_chk_fail __warn_printk panic
F#kernel/params.symtypes param_array_ops param_ops_charp param_ops_int param_ops_long param_ops_string param_ops_uint param_ops_ulong s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#user_namespace@e4129c73 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#kernel/pid.symtypes find_get_pid find_pid_ns find_vpid pid_task put_pid s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@e60777b1 s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#bucket_table@6a272079 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dst_entry@d3e7ee36 s#ebt_table@e2db16e1 s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@02b05148 s#fib_rules_ops@306a8a75 s#fib_table@c68738ba s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#in6_addr@52a16b22 s#inet_hashinfo@b8c86004 s#inet_peer_base@34625d11 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@9f3c7244 s#ipv4_devconf@97093f25 s#ipv6_devconf@7893195b s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_route@6bce9b55 s#mtd_info@8095bfdb s#neighbour@8167d134 s#net@13fb33f5 s#net_device@f8d214a7 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#proc_ns_operations@805c1444 s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@3472311d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xt_table@e8d708cb
F#kernel/printk/printk.symtypes printk s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@581f6d64 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#serial_icounter_struct@d94a6582 s#serial_struct@0187e4b2 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@950549ed s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d vprintk
F#kernel/rcu/tree.symtypes synchronize_rcu
F#kernel/reboot.symtypes emergency_restart register_reboot_notifier s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d unregister_reboot_notifier
F#kernel/resource.symtypes __release_region __request_region iomem_resource s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#kernel/sched/completion.symtypes complete complete_all wait_for_completion wait_for_completion_interruptible wait_for_completion_io_timeout wait_for_completion_timeout
F#kernel/sched/core.symtypes _cond_resched default_wake_function io_schedule preempt_notifier_dec preempt_notifier_inc preempt_notifier_register preempt_notifier_unregister s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#bucket_table@6a272079 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@517e95b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@99a04b89 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dst_entry@d3e7ee36 s#ebt_table@e2db16e1 s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@02b05148 s#fib_rules_ops@306a8a75 s#fib_table@c68738ba s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#inet_hashinfo@b8c86004 s#inet_peer_base@34625d11 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@9f3c7244 s#ipv4_devconf@97093f25 s#ipv6_devconf@7893195b s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@b304f10d s#linux_binfmt@c068fab7 s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@2ba1f463 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_route@6bce9b55 s#mtd_info@8095bfdb s#neighbour@8167d134 s#net@13fb33f5 s#net_device@f8d214a7 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@1547700c s#scatterlist@ecca3350 s#sched_class@ec44831d s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@13bb9f30 s#task_group@cc1a0e3d s#task_struct@73c78347 s#taskstats@c98d8516 s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@3472311d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xt_table@e8d708cb sched_setscheduler schedule set_cpus_allowed_ptr set_user_nice wake_up_process yield
F#kernel/sched/wait.symtypes __init_waitqueue_head __wake_up add_wait_queue autoremove_wake_function finish_wait init_wait_entry prepare_to_wait prepare_to_wait_event prepare_to_wait_exclusive remove_wait_queue
F#kernel/signal.symtypes flush_signals kernel_sigaction kill_pid recalc_sigpending s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@581f6d64 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@c068fab7 s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#serial_icounter_struct@d94a6582 s#serial_struct@0187e4b2 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@950549ed s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d send_sig send_sig_info sigprocmask
F#kernel/smp.symtypes nr_cpu_ids smp_call_function smp_call_function_many smp_call_function_single
F#kernel/softirq.symtypes __local_bh_enable_ip __tasklet_hi_schedule tasklet_init
F#kernel/time/hrtimer.symtypes hrtimer_cancel hrtimer_init hrtimer_start_range_ns hrtimer_try_to_cancel s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d schedule_hrtimeout_range
F#kernel/time/jiffies.symtypes jiffies
F#kernel/time/time.symtypes __msecs_to_jiffies jiffies_to_msecs jiffies_to_timespec64 jiffies_to_timeval set_normalized_timespec64 sys_tz
F#kernel/time/timeconv.symtypes time64_to_tm
F#kernel/time/timekeeping.symtypes ktime_get_coarse_real_ts64 ktime_get_coarse_ts64 ktime_get_raw_ts64 ktime_get_real_seconds ktime_get_real_ts64 ktime_get_ts64 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@b9b52aeb s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@43548338 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@ce8044bf s#user_namespace@e4129c73 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#kernel/time/timer.symtypes add_timer del_timer del_timer_sync init_timer_key mod_timer msleep msleep_interruptible round_jiffies schedule_timeout schedule_timeout_uninterruptible usleep_range
F#kernel/trace/bpf_trace.symtypes bpf_trace_run1 bpf_trace_run10 bpf_trace_run2 bpf_trace_run4 s#Qdisc@a8f71573 s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@d3e7ee36 s#ebt_table@e2db16e1 s#event_filter@75cdb1df s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@02b05148 s#fib_rules_ops@306a8a75 s#fib_table@c68738ba s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@738615b3 s#ftrace_ret_stack@54b523fb s#garp_port@d7d34070 s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@fbc129b1 s#inet_hashinfo@b8c86004 s#inet_peer_base@34625d11 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@9f3c7244 s#ipv4_devconf@97093f25 s#ipv6_devconf@7893195b s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@957f97dc s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@2ba1f463 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@397a4195 s#neigh_parms@3fe62c7d s#neighbour@8167d134 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@504ec6af s#perf_event_context@da95161d s#phy_device@88a4c771 s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@0594779d s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_array@a37454c4 s#trace_buffer@638f6e6e s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@04454c6c s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_state@92682e23 s#xt_table@e8d708cb
F#kernel/trace/trace.symtypes s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@75cdb1df s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@738615b3 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@a37454c4 s#trace_buffer@638f6e6e s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@04454c6c s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d trace_event_buffer_commit trace_handle_return
F#kernel/trace/trace_event_perf.symtypes perf_trace_buf_alloc
F#kernel/trace/trace_events.symtypes s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@75cdb1df s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@738615b3 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@c068fab7 s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@a37454c4 s#trace_buffer@638f6e6e s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@04454c6c s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d trace_define_field trace_event_buffer_reserve trace_event_ignore_this_pid trace_event_raw_init trace_event_reg
F#kernel/trace/trace_events_trigger.symtypes event_triggers_call s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@75cdb1df s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@738615b3 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@a37454c4 s#trace_buffer@638f6e6e s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@04454c6c s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#kernel/trace/trace_output.symtypes s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@a2ebfa8f s#blk_plug@e2161b61 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@75cdb1df s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@738615b3 s#ftrace_ret_stack@54b523fb s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@4916233f s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@a37454c4 s#trace_buffer@638f6e6e s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@04454c6c s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d trace_print_hex_seq trace_raw_output_prep
F#kernel/trace/trace_seq.symtypes s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d trace_seq_printf
F#kernel/umh.symtypes call_usermodehelper call_usermodehelper_exec call_usermodehelper_setup s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@bbbe635b s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@9e826f8c s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@c068fab7 s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@7bf97ef7
F#kernel/user_namespace.symtypes from_kgid from_kuid make_kgid make_kuid s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@b9b52aeb s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@ad17fee0 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@9e826f8c s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#kernel_pkey_params@96107994 s#kernel_pkey_query@dc358d8c s#key@bd80406c s#key_type@d979dd54 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@689a97e0 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_ns_operations@805c1444 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@43548338 s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@3620399f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#kernel/workqueue.symtypes alloc_workqueue cancel_delayed_work cancel_delayed_work_sync cancel_work_sync delayed_work_timer_fn destroy_workqueue flush_work flush_workqueue queue_delayed_work_on queue_rcu_work queue_work_on system_wq
F#lib/bcd.symtypes _bin2bcd
F#lib/bitmap.symtypes __bitmap_and __bitmap_equal __bitmap_intersects __bitmap_weight bitmap_find_next_zero_area_off
F#lib/cpu_rmap.symtypes alloc_cpu_rmap free_irq_cpu_rmap irq_cpu_rmap_add s#cpu_rmap@161123fe
F#lib/cpumask.symtypes cpumask_local_spread cpumask_next cpumask_next_and free_cpumask_var zalloc_cpumask_var
F#lib/crc32.symtypes crc32_le
F#lib/ctype.symtypes _ctype
F#lib/dump_stack.symtypes dump_stack
F#lib/find_bit.symtypes find_first_bit find_first_zero_bit find_next_bit
F#lib/genalloc.symtypes gen_pool_add_owner gen_pool_create gen_pool_destroy gen_pool_dma_alloc gen_pool_free_owner gen_pool_virt_to_phys s#acpi_device_id@9537f188 s#address_space@349a6ef4 s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dev_pagemap@ad17fee0 s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#file@5dd0e54d s#files_struct@8536a667 s#fs_struct@b5890d40 s#ftrace_ret_stack@5d35a84f s#gen_pool@d712e204 s#io_context@3741925f s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#vdso_image@a6dd4e37 s#vm_operations_struct@3620399f s#wake_irq@491e180a s#ww_acquire_ctx@5198829a
F#lib/hexdump.symtypes print_hex_dump
F#lib/iomap.symtypes ioread32 ioread8 iowrite32 pci_iounmap s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#hotplug_slot@1b7da886 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#msi_controller@89001ff4 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@2976ceb1 s#pci_sriov@8eb10e41 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#lib/iov_iter.symtypes _copy_from_iter _copy_to_iter iov_iter_advance iov_iter_bvec iov_iter_get_pages iov_iter_init iov_iter_npages iov_iter_revert iov_iter_single_seg_count s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#bio_vec@e60777b1 s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@b9bbae00 s#key@3d33306b s#kmem_cache@bb73f614 s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@15860e0e s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#user_struct@9707419f s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#lib/kobject.symtypes kobject_put s#anon_vma@ca7d7321 s#file@5dd0e54d s#kernfs_iattrs@58e69d36 s#kobject@bfa79cfb s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#poll_table_struct@ff0e459e s#seq_file@9afb65e4 s#sock@25784684 s#task_struct@1b9c735e s#user_namespace@e4129c73 s#vdso_image@a6dd4e37 s#vm_operations_struct@3620399f
F#lib/kstrtox.symtypes kstrtoull
F#lib/list_debug.symtypes __list_add_valid __list_del_entry_valid
F#lib/lockref.symtypes lockref_get
F#lib/nlattr.symtypes nla_put s#net_device@f8d214a7 s#nla_policy@6b31e364 s#sk_buff@fe0da31a s#sock@25784684
F#lib/parser.symtypes match_token
F#lib/pci_iomap.symtypes pci_iomap_range s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#hotplug_slot@1b7da886 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@3d33306b s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#msi_controller@89001ff4 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#of_device_id@8080a399 s#pci_dev@2976ceb1 s#pci_sriov@8eb10e41 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#proc_dir_entry@615cd3ba s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#lib/rbtree.symtypes rb_erase rb_first rb_insert_color rb_next rb_replace_node
F#lib/scatterlist.symtypes s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#key@3d33306b s#kmem_cache@bb73f614 s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sg_table@81d73f88 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d sg_copy_from_buffer sg_copy_to_buffer sg_next
F#lib/sort.symtypes sort
F#lib/string.symtypes fortify_panic memchr memcmp strcasecmp strcat strchr strcmp strcpy strim strlcat strlcpy strlen strncasecmp strncat strncmp strncpy strnlen strrchr strscpy strsep strspn strstr
F#lib/strncpy_from_user.symtypes strncpy_from_user
F#lib/usercopy.symtypes _copy_from_user _copy_to_user
F#lib/vsprintf.symtypes scnprintf simple_strtol simple_strtoul simple_strtoull snprintf sprintf sscanf vscnprintf vsnprintf vsprintf
F#mm/filemap.symtypes __generic_file_write_iter __lock_page add_to_page_cache_locked end_page_writeback filemap_fault filemap_fdatawait_range filemap_fdatawrite filemap_fdatawrite_range filemap_flush filemap_write_and_wait filemap_write_and_wait_range generic_file_direct_write generic_file_mmap generic_file_read_iter generic_file_write_iter generic_write_checks grab_cache_page_write_begin pagecache_get_page read_cache_page s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@84d343d7 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@6270f693 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@34d57cc8 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iomap@3288b49c s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@13bb9f30 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@7bf97ef7 unlock_page wait_on_page_bit
F#mm/gup.symtypes get_user_pages get_user_pages_remote get_user_pages_unlocked s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@84d343d7 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@6270f693 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@b304f10d s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@689a97e0 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#mm/memory.symtypes high_memory remap_pfn_range s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@84d343d7 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@6270f693 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@b304f10d s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@2ba1f463 s#mnt_namespace@13467d86 s#module@689a97e0 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@13bb9f30 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d unmap_mapping_range vm_insert_page zap_vma_ptes
F#mm/mempolicy.symtypes alloc_pages_current s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@84d343d7 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@6270f693 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@2ba1f463 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#mm/mempool.symtypes mempool_alloc mempool_alloc_slab mempool_create mempool_create_node mempool_destroy mempool_free mempool_free_slab mempool_resize
F#mm/memremap.symtypes __put_devmap_managed_page devmap_managed_key s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@689a97e0 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#mm/mmap.symtypes find_vma s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@84d343d7 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@6270f693 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@b304f10d s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@2ba1f463 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@7bf97ef7 vm_munmap
F#mm/mmu_context.symtypes s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#key@3d33306b s#kmem_cache@bb73f614 s#kstatfs@195c0481 s#ldt_struct@b304f10d s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d unuse_mm use_mm
F#mm/mmu_notifier.symtypes __mmu_notifier_register mmu_notifier_unregister s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@f160657f s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#key@3d33306b s#kmem_cache@bb73f614 s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@2ba1f463 s#module@689a97e0 s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@9afb65e4 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#user_namespace@e4129c73 s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#mm/page-writeback.symtypes __set_page_dirty_nobuffers __test_set_page_writeback clear_page_dirty_for_io redirty_page_for_writepage s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@84d343d7 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@6270f693 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d set_page_dirty tag_pages_for_writeback
F#mm/page_alloc.symtypes __alloc_pages_nodemask __free_pages __get_free_pages _totalram_pages free_pages node_states numa_node s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@6270f693 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_eval_map@b76c02a9 s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d si_meminfo
F#mm/slab_common.symtypes kmalloc_caches kmalloc_order_trace kmem_cache_create kmem_cache_create_usercopy kmem_cache_destroy s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@b98becec s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#mm/slub.symtypes __kmalloc __kmalloc_node kfree kmem_cache_alloc kmem_cache_alloc_node_trace kmem_cache_alloc_trace kmem_cache_free s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@6270f693 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@b98becec s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#trace_eval_map@b76c02a9 s#trace_event_call@943b33bd s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#mm/sparse.symtypes mem_section
F#mm/swap.symtypes __pagevec_lru_add __pagevec_release __put_page mark_page_accessed pagevec_lookup_range_tag release_pages s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@6270f693 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@504ec6af s#perf_event_context@da95161d s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d
F#mm/truncate.symtypes invalidate_mapping_pages s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@84d343d7 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@6270f693 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#export_operations@34d57cc8 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iomap@3288b49c s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@76413666 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@689a97e0 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@e097dc66 s#signal_struct@f9b7dce5 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@a6dd4e37 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@7bf97ef7 truncate_inode_pages truncate_inode_pages_final truncate_inode_pages_range truncate_pagecache truncate_setsize
F#mm/usercopy.symtypes __check_object_size
F#mm/util.symtypes __page_mapcount s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@6270f693 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@404c556b s#mempolicy@d15df970 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@689a97e0 s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@7fc9a8a2 s#request_queue@7d823707 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#subsys_private@c4423409 s#swap_info_struct@9fa38aaa s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d vm_mmap
F#mm/vmalloc.symtypes __get_vm_area __vmalloc map_vm_area s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@338fca9c s#bdi_writeback@6b721080 s#bio_list@9189344b s#blk_plug@e2161b61 s#capture_control@6270f693 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#compat_robust_list_head@d2202b4f s#cred@87f3888e s#css_set@90aef3e2 s#dentry@89754a82 s#dev_pagemap@f818805d s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#gendisk@e24151d3 s#hd_struct@1d7bc37c s#inode@247ddf29 s#io_context@74d48535 s#iov_iter@76413666 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@170c24b3 s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@987b78a4 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#reclaim_state@8708b031 s#request_queue@4916233f s#robust_list_head@0e27a833 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sock@25784684 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@43548338 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#user_namespace@e4129c73 s#user_struct@95a11e87 s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vm_operations_struct@736be16f s#writeback_control@480d8bf2 s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d vfree vmalloc vmalloc_to_page vmalloc_to_pfn vmap vunmap
F#net/core/dev.symtypes __dev_kfree_skb_any __napi_schedule __napi_schedule_irqoff __skb_gso_segment alloc_netdev_mqs call_netdevice_notifiers dev_add_pack dev_close dev_get_flags dev_open dev_queue_xmit dev_remove_pack dev_set_promiscuity free_netdev napi_complete_done napi_disable napi_gro_receive napi_schedule_prep netdev_err netdev_info netdev_refcnt_read netdev_warn netif_napi_add netif_napi_del netif_receive_skb netif_rx_ni netif_schedule_queue netif_set_real_num_rx_queues netif_set_real_num_tx_queues netif_set_xps_queue netif_tx_wake_queue register_netdev register_netdevice_notifier rps_may_expire_flow s#Qdisc@a8f71573 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@161123fe s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink@12421530 s#devlink_port@5c77e7ef s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@a9b2433b s#fib6_nh@58738b2a s#fib6_table@42ca046e s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@efb17ba1 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@54b523fb s#garp_port@d7d34070 s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@d6565e2d s#inet6_dev@0c18377d s#inet_hashinfo@b8c86004 s#inet_peer_base@b794a578 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_mc_list@f9cf7620 s#ip_ra_chain@b9bbe5c8 s#ipv4_devconf@565485a8 s#ipv6_devconf@894cddd6 s#irq_domain@27204fc0 s#iw_handler_def@2758a185 s#iw_public_data@301f3163 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#libipw_device@70ed142f s#linux_binfmt@aef01ecd s#lwtunnel_state@6ca8743b s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@116b278b s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@2448a600 s#netns_ipvs@44694bf2 s#netpoll_info@98bfee78 s#nexthop@f775ce4b s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@eb89433b s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@88a4c771 s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#prefix_info@5c565f54 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@231386e1 s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock@568be5db s#request_sock_ops@5710a44a s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@dc946ade s#rt6_statistics@cc743561 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@1f233d59 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@0e5bce9a s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#timewait_sock_ops@c9c9c483 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@b76c02a9 s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@65f9c4a3 s#udp_tunnel_info@f257dedc s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_policy@5e47c369 s#xfrm_sec_ctx@09045510 s#xfrm_state@9ae89e4f s#xt_table@e8d708cb unregister_netdev unregister_netdevice_notifier
F#net/core/flow_dissector.symtypes __skb_flow_dissect flow_get_u32_dst flow_get_u32_src flow_keys_dissector s#Qdisc@a8f71573 s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#devlink@12421530 s#devlink_port@5c77e7ef s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@0a000a0a s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@a9b2433b s#fib6_nh@58738b2a s#fib6_table@42ca046e s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@efb17ba1 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fixed_phy_status@f4b8b452 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#garp_port@d7d34070 s#gendisk@5a9c6afa s#gpio_desc@b1bba9b1 s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@0c18377d s#inet_hashinfo@b8c86004 s#inet_peer_base@b794a578 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@b9bbe5c8 s#ipv4_devconf@97093f25 s#ipv6_devconf@894cddd6 s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#lwtunnel_state@6ca8743b s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@116b278b s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@2448a600 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nexthop@f775ce4b s#nf_conn@272c8dff s#nf_conntrack_helper@a2caf207 s#nf_conntrack_tuple@2612735a s#nf_ct_event_notifier@0c2087cc s#nf_exp_event_notifier@ebd03d31 s#nf_hook_entries@eb89433b s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@0f12e8aa s#phy_led_trigger@5e55ce3b s#pid_namespace@987b78a4 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#prefix_info@5c565f54 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@0594779d s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock@568be5db s#request_sock_ops@5710a44a s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@dc946ade s#rt6_statistics@cc743561 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@1f233d59 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#timewait_sock_ops@c9c9c483 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@fd544100 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_policy@a692f712 s#xfrm_state@92682e23 s#xt_table@346cc783
F#net/core/net_namespace.symtypes init_net net_namespace_list s#Qdisc@a8f71573 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@c68738ba s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#garp_port@d7d34070 s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@fbc129b1 s#inet_hashinfo@b8c86004 s#inet_peer_base@34625d11 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@9f3c7244 s#ipv4_devconf@97093f25 s#ipv6_devconf@7893195b s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#lwtunnel_state@c2751f5a s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@397a4195 s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@2448a600 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@88a4c771 s#pid_namespace@987b78a4 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#proc_ns_operations@805c1444 s#qdisc_walker@0594779d s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock_ops@b37b346c s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@1f233d59 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#timewait_sock_ops@e9b123c0 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@fd544100 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_policy@a692f712 s#xfrm_state@92682e23 s#xt_table@e8d708cb
F#net/core/rtnetlink.symtypes rtnl_is_locked rtnl_lock rtnl_unlock s#Qdisc@a8f71573 s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@efb17ba1 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#garp_port@d7d34070 s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@0c18377d s#inet_hashinfo@79948b29 s#inet_peer_base@b794a578 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@b9bbe5c8 s#ipv4_devconf@97093f25 s#ipv6_devconf@894cddd6 s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#lwtunnel_state@c2751f5a s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@116b278b s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@88a4c771 s#pid_namespace@987b78a4 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#prefix_info@8e275acb s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@231386e1 s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock@568be5db s#request_sock_ops@5710a44a s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@577947e6 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@92350be6 s#tcp_fastopen_context@6f553f23 s#timewait_sock_ops@c9c9c483 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@65f9c4a3 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_policy@a692f712 s#xfrm_state@92682e23 s#xt_table@e8d708cb u#tcp_cc_info@270739f8
F#net/core/skbuff.symtypes __alloc_skb __netdev_alloc_skb __pskb_pull_tail consume_skb kfree_skb napi_consume_skb s#Qdisc@a8f71573 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@a9b2433b s#fib6_nh@58738b2a s#fib6_table@42ca046e s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@efb17ba1 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#garp_port@d7d34070 s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@0c18377d s#inet_hashinfo@b8c86004 s#inet_peer_base@b794a578 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@b9bbe5c8 s#ipv4_devconf@97093f25 s#ipv6_devconf@894cddd6 s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#lwtunnel_state@c2751f5a s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@116b278b s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nexthop@fa8f6e55 s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@88a4c771 s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#prefix_info@8e275acb s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@231386e1 s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock@568be5db s#request_sock_ops@5710a44a s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@dc946ade s#rt6_statistics@cc743561 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@1f233d59 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#timewait_sock_ops@c9c9c483 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@b76c02a9 s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@fd544100 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_policy@5e47c369 s#xfrm_sec_ctx@09045510 s#xfrm_state@9ae89e4f s#xt_table@e8d708cb skb_checksum skb_copy_bits skb_pull skb_push skb_put skb_tstamp_tx
F#net/core/sock.symtypes lock_sock_nested release_sock s#Qdisc@a8f71573 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@a9b2433b s#fib6_nh@58738b2a s#fib6_table@42ca046e s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@efb17ba1 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#garp_port@d7d34070 s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@0c18377d s#inet_hashinfo@79948b29 s#inet_peer_base@b794a578 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@b9bbe5c8 s#ipv4_devconf@97093f25 s#ipv6_devconf@894cddd6 s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#lwtunnel_state@c2751f5a s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@116b278b s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nexthop@fa8f6e55 s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@88a4c771 s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#prefix_info@8e275acb s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@0594779d s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock@568be5db s#request_sock_ops@5710a44a s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@dc946ade s#rt6_statistics@cc743561 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@577947e6 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@92350be6 s#tcp_fastopen_context@6f553f23 s#timewait_sock_ops@c9c9c483 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@b76c02a9 s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@fd544100 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_policy@5e47c369 s#xfrm_sec_ctx@09045510 s#xfrm_state@9ae89e4f s#xt_table@e8d708cb sock_setsockopt u#tcp_cc_info@270739f8
F#net/core/timestamping.symtypes s#Qdisc@a8f71573 s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@efb17ba1 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#garp_port@d7d34070 s#gendisk@5a9c6afa s#gpio_desc@b1bba9b1 s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@0c18377d s#inet_hashinfo@b8c86004 s#inet_peer_base@b794a578 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@b9bbe5c8 s#ipv4_devconf@97093f25 s#ipv6_devconf@894cddd6 s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#lwtunnel_state@c2751f5a s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@116b278b s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@0f12e8aa s#phy_led_trigger@5e55ce3b s#pid_namespace@987b78a4 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#prefix_info@8e275acb s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@0594779d s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock@568be5db s#request_sock_ops@5710a44a s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@1f233d59 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#timewait_sock_ops@c9c9c483 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@fd544100 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_policy@a692f712 s#xfrm_state@92682e23 s#xt_table@e8d708cb skb_clone_tx_timestamp
F#net/core/utils.symtypes in4_pton in_aton net_ratelimit s#Qdisc@a8f71573 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@c68738ba s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#garp_port@d7d34070 s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@0c18377d s#inet_hashinfo@b8c86004 s#inet_peer_base@34625d11 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@9f3c7244 s#ipv4_devconf@97093f25 s#ipv6_devconf@894cddd6 s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#lwtunnel_state@c2751f5a s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@116b278b s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@88a4c771 s#pid_namespace@987b78a4 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#prefix_info@8e275acb s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@0594779d s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock@568be5db s#request_sock_ops@5710a44a s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@1f233d59 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#timewait_sock_ops@c9c9c483 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@fd544100 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_policy@a692f712 s#xfrm_state@92682e23 s#xt_table@e8d708cb
F#net/ethernet/eth.symtypes alloc_etherdev_mqs eth_type_trans eth_validate_addr ether_setup s#Qdisc@a8f71573 s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@346471e3 s#device_private@95088762 s#devlink@12421530 s#devlink_port@5c77e7ef s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@0a000a0a s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@efb17ba1 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fixed_phy_status@f4b8b452 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#garp_port@d7d34070 s#gendisk@5a9c6afa s#gpio_desc@b1bba9b1 s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@0c18377d s#inet_hashinfo@b8c86004 s#inet_peer_base@b794a578 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@b9bbe5c8 s#ipv4_devconf@97093f25 s#ipv6_devconf@894cddd6 s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#lwtunnel_state@c2751f5a s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@116b278b s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@0f12e8aa s#phy_led_trigger@5e55ce3b s#pid_namespace@987b78a4 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#prefix_info@8e275acb s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@231386e1 s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock@568be5db s#request_sock_ops@5710a44a s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@1f233d59 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#timewait_sock_ops@c9c9c483 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@fd544100 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_policy@a692f712 s#xfrm_state@92682e23 s#xt_table@e8d708cb
F#net/ethtool/ioctl.symtypes ethtool_op_get_link netdev_rss_key_fill s#Qdisc@a8f71573 s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink@12421530 s#devlink_port@5c77e7ef s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@c68738ba s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#garp_port@d7d34070 s#gendisk@5a9c6afa s#gpio_desc@b1bba9b1 s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@fbc129b1 s#inet_hashinfo@b8c86004 s#inet_peer_base@34625d11 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@9f3c7244 s#ip_tunnel_info@4daf0583 s#ipv4_devconf@97093f25 s#ipv6_devconf@7893195b s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#lwtunnel_state@c2751f5a s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@397a4195 s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@0f12e8aa s#phy_led_trigger@5e55ce3b s#pid_namespace@987b78a4 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#psample_group@19511b48 s#qdisc_walker@0594779d s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock_ops@b37b346c s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@1f233d59 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#timewait_sock_ops@e9b123c0 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@fd544100 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@baa32ed1 s#xfrm_policy@a692f712 s#xfrm_state@92682e23 s#xsk_queue@210033fd s#xt_table@e8d708cb
F#net/ipv4/devinet.symtypes register_inetaddr_notifier s#Qdisc@a8f71573 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@efb17ba1 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#garp_port@d7d34070 s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@d6565e2d s#inet6_dev@0c18377d s#inet_hashinfo@b8c86004 s#inet_peer_base@b794a578 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_mc_list@055d3767 s#ip_ra_chain@b9bbe5c8 s#ipv4_devconf@565485a8 s#ipv6_devconf@894cddd6 s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#lwtunnel_state@c2751f5a s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@116b278b s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@88a4c771 s#pid_namespace@987b78a4 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#prefix_info@5c565f54 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@0594779d s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock@568be5db s#request_sock_ops@5710a44a s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@1f233d59 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#timewait_sock_ops@c9c9c483 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@fd544100 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_policy@a692f712 s#xfrm_state@92682e23 s#xt_table@e8d708cb unregister_inetaddr_notifier
F#net/ipv4/inet_connection_sock.symtypes inet_csk_delete_keepalive_timer inet_csk_reset_keepalive_timer s#Qdisc@a8f71573 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@a9b2433b s#fib6_nh@58738b2a s#fib6_table@42ca046e s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@efb17ba1 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#garp_port@d7d34070 s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@0c18377d s#inet_hashinfo@79948b29 s#inet_peer_base@b794a578 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@b9bbe5c8 s#ipv4_devconf@97093f25 s#ipv6_devconf@894cddd6 s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#lwtunnel_state@c2751f5a s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@116b278b s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nexthop@fa8f6e55 s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@88a4c771 s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#prefix_info@5c565f54 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@0594779d s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock@568be5db s#request_sock_ops@5710a44a s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@dc946ade s#rt6_statistics@cc743561 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@577947e6 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@92350be6 s#tcp_fastopen_context@6f553f23 s#timewait_sock_ops@c9c9c483 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@fd544100 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_policy@5e47c369 s#xfrm_sec_ctx@09045510 s#xfrm_state@9ae89e4f s#xt_table@e8d708cb u#tcp_cc_info@270739f8
F#net/ipv6/addrconf_core.symtypes __ipv6_addr_type register_inet6addr_notifier s#Qdisc@a8f71573 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_config@0a182705 s#fib6_info@efeac2b6 s#fib6_nh@8a2b5b63 s#fib6_table@9726e4a6 s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@efb17ba1 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#garp_port@d7d34070 s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@0c18377d s#inet_hashinfo@b8c86004 s#inet_peer_base@b794a578 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@b9bbe5c8 s#ipv4_devconf@97093f25 s#ipv6_devconf@894cddd6 s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#lwtunnel_state@c2751f5a s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@116b278b s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@88a4c771 s#pid_namespace@987b78a4 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#prefix_info@5c565f54 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@0594779d s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock@568be5db s#request_sock_ops@5710a44a s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@1f233d59 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#timewait_sock_ops@c9c9c483 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@fd544100 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_policy@a692f712 s#xfrm_state@92682e23 s#xt_table@e8d708cb unregister_inet6addr_notifier
F#net/netfilter/core.symtypes e#nf_nat_manip_type@d357bd25 nf_register_net_hook nf_unregister_net_hook s#Qdisc@a8f71573 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@efb17ba1 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#garp_port@d7d34070 s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@d6565e2d s#inet6_dev@0c18377d s#inet_hashinfo@79948b29 s#inet_peer_base@b794a578 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_mc_list@f9cf7620 s#ip_ra_chain@b9bbe5c8 s#ipv4_devconf@565485a8 s#ipv6_devconf@894cddd6 s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#lwtunnel_state@c2751f5a s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@116b278b s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nf_conn@97995174 s#nf_conntrack_tuple@20c83093 s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@eb89433b s#nf_logger@bdabd2f7 s#nf_queue_handler@e8c11dbf s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@88a4c771 s#pid_namespace@987b78a4 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#prefix_info@5c565f54 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@0594779d s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock@568be5db s#request_sock_ops@5710a44a s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@577947e6 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@92350be6 s#tcp_fastopen_context@6f553f23 s#timewait_sock_ops@c9c9c483 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@fd544100 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_policy@a692f712 s#xfrm_state@92682e23 s#xt_table@e8d708cb u#tcp_cc_info@270739f8
F#net/netlink/af_netlink.symtypes __netlink_kernel_create __nlmsg_put netlink_kernel_release netlink_unicast s#Qdisc@a8f71573 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@c68738ba s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@5d35a84f s#garp_port@d7d34070 s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@fbc129b1 s#inet_hashinfo@b8c86004 s#inet_peer_base@34625d11 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@9f3c7244 s#ipv4_devconf@97093f25 s#ipv6_devconf@7893195b s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#lwtunnel_state@c2751f5a s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@397a4195 s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@2448a600 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@88a4c771 s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@0594779d s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock_ops@b37b346c s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@1f233d59 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#timewait_sock_ops@e9b123c0 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@fd544100 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_policy@a692f712 s#xfrm_state@92682e23 s#xt_table@e8d708cb
F#net/sched/sch_generic.symtypes netif_carrier_off netif_carrier_on s#Qdisc@a8f71573 s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@a9b2433b s#fib6_nh@58738b2a s#fib6_table@42ca046e s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@efb17ba1 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_ret_stack@54b523fb s#garp_port@d7d34070 s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@0c18377d s#inet_hashinfo@b8c86004 s#inet_peer_base@b794a578 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@b9bbe5c8 s#ipv4_devconf@97093f25 s#ipv6_devconf@894cddd6 s#irq_domain@27204fc0 s#iw_handler_def@c89ad982 s#iw_public_data@41c9989c s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#lwtunnel_state@c2751f5a s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@116b278b s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nexthop@fa8f6e55 s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@68c7f280 s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#phy_device@88a4c771 s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#prefix_info@8e275acb s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@231386e1 s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock@568be5db s#request_sock_ops@5710a44a s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@dc946ade s#rt6_statistics@cc743561 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@1f233d59 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#timewait_sock_ops@c9c9c483 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_eval_map@b76c02a9 s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@fd544100 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@300e1803 s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@16eddf4d s#xdp_umem@9bb07a90 s#xfrm_policy@5e47c369 s#xfrm_sec_ctx@09045510 s#xfrm_state@9ae89e4f s#xt_table@e8d708cb
F#net/socket.symtypes kernel_accept kernel_recvmsg kernel_sendmsg kernel_setsockopt s#Qdisc@a8f71573 s#acpi_device_id@9537f188 s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#audit_names@7d86a629 s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@a43ba637 s#btf_type@21423afe s#bucket_table@c560ef84 s#can_dev_rcv_lists@f9a3495b s#can_pkg_stats@b6fbe87d s#can_rcv_lists_stats@7dc788d5 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cpu_rmap@912b6b64 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#devlink_port@90deb245 s#dma_map_ops@32abb76b s#driver_private@80bd9a0c s#dsa_port@258bc0e4 s#dst_entry@9c1118aa s#ebt_table@e2db16e1 s#event_filter@89b1689f s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#fib6_info@efeac2b6 s#fib6_table@9726e4a6 s#fib_notifier_ops@2fff9c30 s#fib_rules_ops@55ec4785 s#fib_table@efb17ba1 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@a1a27c9b s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1e0318bf s#ftrace_hash@302dc061 s#ftrace_ret_stack@54b523fb s#garp_port@d7d34070 s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#in_device@e840243a s#inet6_dev@0c18377d s#inet_hashinfo@b8c86004 s#inet_peer_base@b794a578 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#ip_ra_chain@b9bbe5c8 s#ipv4_devconf@97093f25 s#ipv6_devconf@894cddd6 s#irq_domain@27204fc0 s#iw_handler_def@2758a185 s#iw_public_data@301f3163 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#l3mdev_ops@705e73d8 s#ldt_struct@408584e6 s#libipw_device@70ed142f s#linux_binfmt@aef01ecd s#lwtunnel_state@c2751f5a s#mem_cgroup@404c556b s#mempolicy@66376883 s#mini_Qdisc@bab43749 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mpls_dev@ecb506b0 s#mpls_route@6bce9b55 s#mrp_port@e05e7d57 s#mtd_info@8095bfdb s#ndisc_ops@116b278b s#neigh_parms@628b99fe s#neighbour@c02c9362 s#net@13fb33f5 s#net_device@253381a9 s#net_generic@1d11e6c7 s#netns_ipvs@44694bf2 s#netpoll_info@1c74e1ed s#nf_ct_event_notifier@6bfe66ad s#nf_exp_event_notifier@1c74d879 s#nf_hook_entries@eb89433b s#nf_logger@bdabd2f7 s#nf_queue_handler@ee42ac91 s#nfs4_lock_state@47003d93 s#nla_policy@6b31e364 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@8080a399 s#perf_event@504ec6af s#perf_event_context@da95161d s#phy_device@88a4c771 s#pid_namespace@db754917 s#pipe_inode_info@15860e0e s#poll_table_struct@8d8f3878 s#pollfd@b58156ac s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#prefix_info@8e275acb s#proc_dir_entry@615cd3ba s#proc_ns_operations@d97ed1ec s#qdisc_walker@0594779d s#raw_hashinfo@98139727 s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock@568be5db s#request_sock_ops@5710a44a s#ring_buffer@553305a1 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt6_info@ba0d0e7c s#rt6_statistics@1738033f s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#rtnl_link_ops@8a68c797 s#scatterlist@ecca3350 s#sched_class@05ccdc2b s#sctp_mib@9b8f12f8 s#seg6_pernet_data@eb2e9422 s#seq_file@cc612266 s#seq_operations@af352468 s#sg_table@81d73f88 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@fe0da31a s#sock@4416faa5 s#sock_reuseport@1f233d59 s#socket@7480649c s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#tcf_walker@58fadffa s#tcp_congestion_ops@a057e2b5 s#tcp_fastopen_context@8c605e6d s#timewait_sock_ops@c9c9c483 s#tipc_bearer@55f19674 s#tlsdev_ops@4e0b3003 s#trace_array@0621e4a4 s#trace_buffer@d5396653 s#trace_eval_map@b76c02a9 s#trace_event_call@e24e7fca s#tracer@3969359b s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#udp_table@fd544100 s#udp_tunnel_info@c81bddce s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vlan_info@f17b3f88 s#vm_operations_struct@736be16f s#wake_irq@491e180a s#wireless_dev@7bc3c537 s#wpan_dev@dcad4f7d s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@7bf97ef7 s#xdp_umem@9bb07a90 s#xfrm_policy@a692f712 s#xfrm_state@92682e23 s#xt_table@e8d708cb sock_create sock_create_kern sock_release sockfd_lookup
F#security/security.symtypes s#acpi_device_id@e58a0b4f s#address_space@7671788d s#anon_vma@ca7d7321 s#audit_context@382c83ee s#backing_dev_info@455abe82 s#badblocks@7e65f071 s#bdi_writeback@ee17abf1 s#bio@e54780c0 s#bio_list@d0a28660 s#bio_vec@e60777b1 s#blk_flush_queue@4aaf6b7c s#blk_mq_alloc_data@f0c73be0 s#blk_mq_ctx@a9e7a7e1 s#blk_mq_debugfs_attr@26a35b37 s#blk_mq_hw_ctx@161034f1 s#blk_mq_ops@b0c59979 s#blk_mq_tag_set@1cc4433c s#blk_plug@804d8ff3 s#blk_stat_callback@4f234dfa s#blk_trace@ed399ad7 s#blkcg_gq@5d8f5c98 s#block_device_operations@08e6d986 s#bpf_prog@3425efb4 s#capture_control@e8ae89d1 s#cdev@69ffcaf2 s#cfs_rq@b985a5b8 s#cgroup_namespace@64e94de2 s#cgroup_subsys_state@afae38ff s#cgroup_taskset@1a4c4a87 s#compat_robust_list_head@320188e6 s#cred@87f3888e s#css_set@1dc87d2d s#dentry@89754a82 s#dev_pagemap@f818805d s#dev_pin_info@74d04f18 s#dev_pm_qos@4a00fc73 s#device@3d2c6ff1 s#device_node@26a212ba s#device_private@95088762 s#dma_map_ops@b53ba484 s#driver_private@80bd9a0c s#exception_table_entry@e46c8460 s#export_operations@96518368 s#fasync_struct@eabe0712 s#file@fb39ac8a s#file_operations@85658159 s#files_struct@8536a667 s#fs_context@dc4237ee s#fs_parameter_description@71ccdead s#fs_pin@cb017644 s#fs_struct@b5890d40 s#fscrypt_info@6cd45ba4 s#fscrypt_operations@8c0aa70b s#fsnotify_mark_connector@1c585393 s#ftrace_ret_stack@5d35a84f s#gendisk@5a9c6afa s#hd_geometry@1fae69fd s#hd_struct@332d8e6e s#in6_addr@52a16b22 s#inode@247ddf29 s#io_context@74d48535 s#iommu_fwspec@adc7e3b0 s#iommu_ops@1370663c s#iommu_param@ac3bc360 s#iov_iter@b9bbae00 s#irq_domain@27204fc0 s#kernfs_iattrs@58e69d36 s#key@bd80406c s#key_type@856c83c0 s#key_user@35e5d8d6 s#kmem_cache@bb73f614 s#kobject@bfa79cfb s#kstatfs@195c0481 s#ldt_struct@408584e6 s#linux_binfmt@aef01ecd s#mem_cgroup@3b7d487b s#mempolicy@66376883 s#mmu_notifier_mm@e39c2669 s#mnt_namespace@13467d86 s#module@21b68714 s#module_kobject@091e288e s#mtd_info@8095bfdb s#net@be3f1911 s#nfs4_lock_state@47003d93 s#nlm_lockowner@c8646510 s#nsproxy@2a3b7f29 s#of_device_id@fae262dc s#perf_event@82b204da s#perf_event_context@11805577 s#pid_namespace@db754917 s#pipe_inode_info@b8d1ccf7 s#poll_table_struct@ff0e459e s#pollfd@9600d34e s#posix_acl@a4ffd084 s#pr_ops@43a01d23 s#proc_ns_operations@d97ed1ec s#reclaim_state@8708b031 s#request_queue@7d823707 s#request_sock@b3c35828 s#robust_list_head@0e27a833 s#rq_qos@0cb844b7 s#rt_mutex_waiter@aa7a31a4 s#rt_rq@2a9a7031 s#sched_class@05ccdc2b s#sctp_endpoint@5eb67cfb s#seq_file@cc612266 s#seq_operations@af352468 s#sighand_struct@7ec6c431 s#signal_struct@7d107823 s#sk_buff@d4487beb s#sock@25784684 s#socket@4b8cff44 s#subsys_private@c4423409 s#swap_info_struct@a9138d45 s#task_delay_info@57aa8129 s#task_group@4547b22f s#task_struct@73c78347 s#taskstats@c98d8516 s#trace_eval_map@2ac6e30f s#trace_event_call@943b33bd s#tty_struct@71ff2bce s#ucounts@1f7dd376 s#user_namespace@efbfb978 s#user_struct@95a11e87 s#uts_namespace@d3e2a34d s#vdso_image@7db1df11 s#vfsmount@e8166fae s#vm_operations_struct@736be16f s#wake_irq@491e180a s#writeback_control@164d496b s#ww_acquire_ctx@5198829a s#xattr_handler@7bf97ef7 s#xfrm_sec_ctx@a097fdcc s#xfrm_state@92682e23 security_inode_init_security
